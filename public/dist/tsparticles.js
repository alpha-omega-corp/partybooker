/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/assets/tsparticles.bundle.js":
/*!***************************************************!*\
  !*** ./resources/js/assets/tsparticles.bundle.js ***!
  \***************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/*!\n * Author : Matteo Bruni\n * MIT license: https://opensource.org/licenses/MIT\n * Demo / Generator : https://particles.js.org/\n * GitHub : https://www.github.com/matteobruni/tsparticles\n * How to use? : Check the GitHub README\n * v2.8.0\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? 0 : _typeof(exports)) === 'object' && ( false ? 0 : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else { var i, a; }\n})(this, function () {\n  return (/******/function () {\n      // webpackBootstrap\n      /******/\n      \"use strict\";\n\n      /******/ // The require scope\n      /******/\n      var __nested_webpack_require_18088__ = {};\n      /******/\n      /************************************************************************/\n      /******/ /* webpack/runtime/define property getters */\n      /******/\n      (function () {\n        /******/ // define getter functions for harmony exports\n        /******/__nested_webpack_require_18088__.d = function (exports, definition) {\n          /******/for (var key in definition) {\n            /******/if (__nested_webpack_require_18088__.o(definition, key) && !__nested_webpack_require_18088__.o(exports, key)) {\n              /******/Object.defineProperty(exports, key, {\n                enumerable: true,\n                get: definition[key]\n              });\n              /******/\n            }\n            /******/\n          }\n          /******/\n        };\n        /******/\n      })();\n      /******/\n      /******/ /* webpack/runtime/hasOwnProperty shorthand */\n      /******/\n      (function () {\n        /******/__nested_webpack_require_18088__.o = function (obj, prop) {\n          return Object.prototype.hasOwnProperty.call(obj, prop);\n        };\n        /******/\n      })();\n      /******/\n      /******/ /* webpack/runtime/make namespace object */\n      /******/\n      (function () {\n        /******/ // define __esModule on exports\n        /******/__nested_webpack_require_18088__.r = function (exports) {\n          /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n            /******/Object.defineProperty(exports, Symbol.toStringTag, {\n              value: 'Module'\n            });\n            /******/\n          }\n          /******/\n          Object.defineProperty(exports, '__esModule', {\n            value: true\n          });\n          /******/\n        };\n        /******/\n      })();\n      /******/\n      /************************************************************************/\n      var __nested_webpack_exports__ = {};\n      // ESM COMPAT FLAG\n      __nested_webpack_require_18088__.r(__nested_webpack_exports__);\n\n      // EXPORTS\n      __nested_webpack_require_18088__.d(__nested_webpack_exports__, {\n        \"AnimatableColor\": function AnimatableColor() {\n          return (/* reexport */_AnimatableColor\n          );\n        },\n        \"AnimationOptions\": function AnimationOptions() {\n          return (/* reexport */_AnimationOptions\n          );\n        },\n        \"Background\": function Background() {\n          return (/* reexport */_Background\n          );\n        },\n        \"BackgroundMask\": function BackgroundMask() {\n          return (/* reexport */_BackgroundMask\n          );\n        },\n        \"BackgroundMaskCover\": function BackgroundMaskCover() {\n          return (/* reexport */_BackgroundMaskCover\n          );\n        },\n        \"Circle\": function Circle() {\n          return (/* reexport */_Circle\n          );\n        },\n        \"ClickEvent\": function ClickEvent() {\n          return (/* reexport */_ClickEvent\n          );\n        },\n        \"Collisions\": function Collisions() {\n          return (/* reexport */_Collisions\n          );\n        },\n        \"CollisionsAbsorb\": function CollisionsAbsorb() {\n          return (/* reexport */_CollisionsAbsorb\n          );\n        },\n        \"CollisionsOverlap\": function CollisionsOverlap() {\n          return (/* reexport */_CollisionsOverlap\n          );\n        },\n        \"ColorAnimation\": function ColorAnimation() {\n          return (/* reexport */_ColorAnimation\n          );\n        },\n        \"DivEvent\": function DivEvent() {\n          return (/* reexport */_DivEvent\n          );\n        },\n        \"Events\": function Events() {\n          return (/* reexport */_Events\n          );\n        },\n        \"ExternalInteractorBase\": function ExternalInteractorBase() {\n          return (/* reexport */_ExternalInteractorBase\n          );\n        },\n        \"FullScreen\": function FullScreen() {\n          return (/* reexport */_FullScreen\n          );\n        },\n        \"HoverEvent\": function HoverEvent() {\n          return (/* reexport */_HoverEvent\n          );\n        },\n        \"HslAnimation\": function HslAnimation() {\n          return (/* reexport */_HslAnimation\n          );\n        },\n        \"HslColorManager\": function HslColorManager() {\n          return (/* reexport */_HslColorManager\n          );\n        },\n        \"Interactivity\": function Interactivity() {\n          return (/* reexport */_Interactivity\n          );\n        },\n        \"ManualParticle\": function ManualParticle() {\n          return (/* reexport */_ManualParticle\n          );\n        },\n        \"Modes\": function Modes() {\n          return (/* reexport */_Modes\n          );\n        },\n        \"Move\": function Move() {\n          return (/* reexport */_Move\n          );\n        },\n        \"MoveAngle\": function MoveAngle() {\n          return (/* reexport */_MoveAngle\n          );\n        },\n        \"MoveAttract\": function MoveAttract() {\n          return (/* reexport */_MoveAttract\n          );\n        },\n        \"MoveCenter\": function MoveCenter() {\n          return (/* reexport */_MoveCenter\n          );\n        },\n        \"MoveGravity\": function MoveGravity() {\n          return (/* reexport */_MoveGravity\n          );\n        },\n        \"MovePath\": function MovePath() {\n          return (/* reexport */_MovePath\n          );\n        },\n        \"MoveTrail\": function MoveTrail() {\n          return (/* reexport */_MoveTrail\n          );\n        },\n        \"Opacity\": function Opacity() {\n          return (/* reexport */_Opacity\n          );\n        },\n        \"OpacityAnimation\": function OpacityAnimation() {\n          return (/* reexport */_OpacityAnimation\n          );\n        },\n        \"Options\": function Options() {\n          return (/* reexport */_Options\n          );\n        },\n        \"OptionsColor\": function OptionsColor() {\n          return (/* reexport */_OptionsColor\n          );\n        },\n        \"OutModes\": function OutModes() {\n          return (/* reexport */_OutModes\n          );\n        },\n        \"Parallax\": function Parallax() {\n          return (/* reexport */_Parallax\n          );\n        },\n        \"ParticlesBounce\": function ParticlesBounce() {\n          return (/* reexport */_ParticlesBounce\n          );\n        },\n        \"ParticlesBounceFactor\": function ParticlesBounceFactor() {\n          return (/* reexport */_ParticlesBounceFactor\n          );\n        },\n        \"ParticlesDensity\": function ParticlesDensity() {\n          return (/* reexport */_ParticlesDensity\n          );\n        },\n        \"ParticlesInteractorBase\": function ParticlesInteractorBase() {\n          return (/* reexport */_ParticlesInteractorBase\n          );\n        },\n        \"ParticlesNumber\": function ParticlesNumber() {\n          return (/* reexport */_ParticlesNumber\n          );\n        },\n        \"ParticlesOptions\": function ParticlesOptions() {\n          return (/* reexport */_ParticlesOptions\n          );\n        },\n        \"Point\": function Point() {\n          return (/* reexport */_Point\n          );\n        },\n        \"Range\": function Range() {\n          return (/* reexport */_Range\n          );\n        },\n        \"Rectangle\": function Rectangle() {\n          return (/* reexport */_Rectangle\n          );\n        },\n        \"ResizeEvent\": function ResizeEvent() {\n          return (/* reexport */_ResizeEvent\n          );\n        },\n        \"Responsive\": function Responsive() {\n          return (/* reexport */_Responsive\n          );\n        },\n        \"RgbColorManager\": function RgbColorManager() {\n          return (/* reexport */_RgbColorManager\n          );\n        },\n        \"Shadow\": function Shadow() {\n          return (/* reexport */_Shadow\n          );\n        },\n        \"Shape\": function Shape() {\n          return (/* reexport */_Shape\n          );\n        },\n        \"Size\": function Size() {\n          return (/* reexport */_Size\n          );\n        },\n        \"SizeAnimation\": function SizeAnimation() {\n          return (/* reexport */_SizeAnimation\n          );\n        },\n        \"Spin\": function Spin() {\n          return (/* reexport */_Spin\n          );\n        },\n        \"Stroke\": function Stroke() {\n          return (/* reexport */_Stroke\n          );\n        },\n        \"Theme\": function Theme() {\n          return (/* reexport */_Theme\n          );\n        },\n        \"ThemeDefault\": function ThemeDefault() {\n          return (/* reexport */_ThemeDefault\n          );\n        },\n        \"ValueWithRandom\": function ValueWithRandom() {\n          return (/* reexport */_ValueWithRandom\n          );\n        },\n        \"Vector\": function Vector() {\n          return (/* reexport */_Vector\n          );\n        },\n        \"Vector3d\": function Vector3d() {\n          return (/* reexport */_Vector3d\n          );\n        },\n        \"ZIndex\": function ZIndex() {\n          return (/* reexport */_ZIndex\n          );\n        },\n        \"addColorManager\": function addColorManager() {\n          return (/* reexport */_addColorManager\n          );\n        },\n        \"addEasing\": function addEasing() {\n          return (/* reexport */_addEasing\n          );\n        },\n        \"alterHsl\": function alterHsl() {\n          return (/* reexport */_alterHsl\n          );\n        },\n        \"animate\": function animate() {\n          return (/* reexport */_animate\n          );\n        },\n        \"areBoundsInside\": function areBoundsInside() {\n          return (/* reexport */_areBoundsInside\n          );\n        },\n        \"arrayRandomIndex\": function arrayRandomIndex() {\n          return (/* reexport */_arrayRandomIndex\n          );\n        },\n        \"calcExactPositionOrRandomFromSize\": function calcExactPositionOrRandomFromSize() {\n          return (/* reexport */_calcExactPositionOrRandomFromSize\n          );\n        },\n        \"calcExactPositionOrRandomFromSizeRanged\": function calcExactPositionOrRandomFromSizeRanged() {\n          return (/* reexport */_calcExactPositionOrRandomFromSizeRanged\n          );\n        },\n        \"calcPositionFromSize\": function calcPositionFromSize() {\n          return (/* reexport */_calcPositionFromSize\n          );\n        },\n        \"calcPositionOrRandomFromSize\": function calcPositionOrRandomFromSize() {\n          return (/* reexport */_calcPositionOrRandomFromSize\n          );\n        },\n        \"calcPositionOrRandomFromSizeRanged\": function calcPositionOrRandomFromSizeRanged() {\n          return (/* reexport */_calcPositionOrRandomFromSizeRanged\n          );\n        },\n        \"calculateBounds\": function calculateBounds() {\n          return (/* reexport */_calculateBounds\n          );\n        },\n        \"cancelAnimation\": function cancelAnimation() {\n          return (/* reexport */_cancelAnimation\n          );\n        },\n        \"circleBounce\": function circleBounce() {\n          return (/* reexport */_circleBounce\n          );\n        },\n        \"circleBounceDataFromParticle\": function circleBounceDataFromParticle() {\n          return (/* reexport */_circleBounceDataFromParticle\n          );\n        },\n        \"clamp\": function clamp() {\n          return (/* reexport */_clamp\n          );\n        },\n        \"clear\": function clear() {\n          return (/* reexport */_clear\n          );\n        },\n        \"collisionVelocity\": function collisionVelocity() {\n          return (/* reexport */_collisionVelocity\n          );\n        },\n        \"colorMix\": function colorMix() {\n          return (/* reexport */_colorMix\n          );\n        },\n        \"colorToHsl\": function colorToHsl() {\n          return (/* reexport */_colorToHsl\n          );\n        },\n        \"colorToRgb\": function colorToRgb() {\n          return (/* reexport */_colorToRgb\n          );\n        },\n        \"deepExtend\": function deepExtend() {\n          return (/* reexport */_deepExtend\n          );\n        },\n        \"divMode\": function divMode() {\n          return (/* reexport */_divMode\n          );\n        },\n        \"divModeExecute\": function divModeExecute() {\n          return (/* reexport */_divModeExecute\n          );\n        },\n        \"drawLine\": function drawLine() {\n          return (/* reexport */_drawLine\n          );\n        },\n        \"drawParticle\": function drawParticle() {\n          return (/* reexport */_drawParticle\n          );\n        },\n        \"drawParticlePlugin\": function drawParticlePlugin() {\n          return (/* reexport */_drawParticlePlugin\n          );\n        },\n        \"drawPlugin\": function drawPlugin() {\n          return (/* reexport */_drawPlugin\n          );\n        },\n        \"drawShape\": function drawShape() {\n          return (/* reexport */_drawShape\n          );\n        },\n        \"drawShapeAfterEffect\": function drawShapeAfterEffect() {\n          return (/* reexport */_drawShapeAfterEffect\n          );\n        },\n        \"drawTriangle\": function drawTriangle() {\n          return (/* reexport */_drawTriangle\n          );\n        },\n        \"executeOnSingleOrMultiple\": function executeOnSingleOrMultiple() {\n          return (/* reexport */_executeOnSingleOrMultiple\n          );\n        },\n        \"findItemFromSingleOrMultiple\": function findItemFromSingleOrMultiple() {\n          return (/* reexport */_findItemFromSingleOrMultiple\n          );\n        },\n        \"generatedAttribute\": function generatedAttribute() {\n          return (/* reexport */_generatedAttribute\n          );\n        },\n        \"getDistance\": function getDistance() {\n          return (/* reexport */_getDistance\n          );\n        },\n        \"getDistances\": function getDistances() {\n          return (/* reexport */_getDistances\n          );\n        },\n        \"getEasing\": function getEasing() {\n          return (/* reexport */_getEasing\n          );\n        },\n        \"getHslAnimationFromHsl\": function getHslAnimationFromHsl() {\n          return (/* reexport */_getHslAnimationFromHsl\n          );\n        },\n        \"getHslFromAnimation\": function getHslFromAnimation() {\n          return (/* reexport */_getHslFromAnimation\n          );\n        },\n        \"getLinkColor\": function getLinkColor() {\n          return (/* reexport */_getLinkColor\n          );\n        },\n        \"getLinkRandomColor\": function getLinkRandomColor() {\n          return (/* reexport */_getLinkRandomColor\n          );\n        },\n        \"getParticleBaseVelocity\": function getParticleBaseVelocity() {\n          return (/* reexport */_getParticleBaseVelocity\n          );\n        },\n        \"getParticleDirectionAngle\": function getParticleDirectionAngle() {\n          return (/* reexport */_getParticleDirectionAngle\n          );\n        },\n        \"getRandom\": function getRandom() {\n          return (/* reexport */_getRandom\n          );\n        },\n        \"getRandomRgbColor\": function getRandomRgbColor() {\n          return (/* reexport */_getRandomRgbColor\n          );\n        },\n        \"getRangeMax\": function getRangeMax() {\n          return (/* reexport */_getRangeMax\n          );\n        },\n        \"getRangeMin\": function getRangeMin() {\n          return (/* reexport */_getRangeMin\n          );\n        },\n        \"getRangeValue\": function getRangeValue() {\n          return (/* reexport */_getRangeValue\n          );\n        },\n        \"getStyleFromHsl\": function getStyleFromHsl() {\n          return (/* reexport */_getStyleFromHsl\n          );\n        },\n        \"getStyleFromRgb\": function getStyleFromRgb() {\n          return (/* reexport */_getStyleFromRgb\n          );\n        },\n        \"getValue\": function getValue() {\n          return (/* reexport */_getValue\n          );\n        },\n        \"hasMatchMedia\": function hasMatchMedia() {\n          return (/* reexport */_hasMatchMedia\n          );\n        },\n        \"hslToRgb\": function hslToRgb() {\n          return (/* reexport */_hslToRgb\n          );\n        },\n        \"hslaToRgba\": function hslaToRgba() {\n          return (/* reexport */_hslaToRgba\n          );\n        },\n        \"isDivModeEnabled\": function isDivModeEnabled() {\n          return (/* reexport */_isDivModeEnabled\n          );\n        },\n        \"isInArray\": function isInArray() {\n          return (/* reexport */_isInArray\n          );\n        },\n        \"isPointInside\": function isPointInside() {\n          return (/* reexport */_isPointInside\n          );\n        },\n        \"isSsr\": function isSsr() {\n          return (/* reexport */_isSsr\n          );\n        },\n        \"itemFromArray\": function itemFromArray() {\n          return (/* reexport */_itemFromArray\n          );\n        },\n        \"itemFromSingleOrMultiple\": function itemFromSingleOrMultiple() {\n          return (/* reexport */_itemFromSingleOrMultiple\n          );\n        },\n        \"loadFont\": function loadFont() {\n          return (/* reexport */_loadFont\n          );\n        },\n        \"loadFull\": function loadFull() {\n          return (/* reexport */_loadFull\n          );\n        },\n        \"loadOptions\": function loadOptions() {\n          return (/* reexport */_loadOptions\n          );\n        },\n        \"loadParticlesOptions\": function loadParticlesOptions() {\n          return (/* reexport */_loadParticlesOptions\n          );\n        },\n        \"loadSlim\": function loadSlim() {\n          return (/* reexport */_loadSlim\n          );\n        },\n        \"mix\": function mix() {\n          return (/* reexport */_mix\n          );\n        },\n        \"mouseDownEvent\": function mouseDownEvent() {\n          return (/* reexport */_mouseDownEvent\n          );\n        },\n        \"mouseLeaveEvent\": function mouseLeaveEvent() {\n          return (/* reexport */_mouseLeaveEvent\n          );\n        },\n        \"mouseMoveEvent\": function mouseMoveEvent() {\n          return (/* reexport */_mouseMoveEvent\n          );\n        },\n        \"mouseOutEvent\": function mouseOutEvent() {\n          return (/* reexport */_mouseOutEvent\n          );\n        },\n        \"mouseUpEvent\": function mouseUpEvent() {\n          return (/* reexport */_mouseUpEvent\n          );\n        },\n        \"paintBase\": function paintBase() {\n          return (/* reexport */_paintBase2\n          );\n        },\n        \"paintImage\": function paintImage() {\n          return (/* reexport */_paintImage2\n          );\n        },\n        \"parseAlpha\": function parseAlpha() {\n          return (/* reexport */_parseAlpha\n          );\n        },\n        \"randomInRange\": function randomInRange() {\n          return (/* reexport */_randomInRange\n          );\n        },\n        \"rangeColorToHsl\": function rangeColorToHsl() {\n          return (/* reexport */_rangeColorToHsl\n          );\n        },\n        \"rangeColorToRgb\": function rangeColorToRgb() {\n          return (/* reexport */_rangeColorToRgb\n          );\n        },\n        \"rectBounce\": function rectBounce() {\n          return (/* reexport */_rectBounce\n          );\n        },\n        \"resizeEvent\": function resizeEvent() {\n          return (/* reexport */_resizeEvent\n          );\n        },\n        \"rgbToHsl\": function rgbToHsl() {\n          return (/* reexport */_rgbToHsl\n          );\n        },\n        \"safeMatchMedia\": function safeMatchMedia() {\n          return (/* reexport */_safeMatchMedia\n          );\n        },\n        \"setRandom\": function setRandom() {\n          return (/* reexport */_setRandom\n          );\n        },\n        \"setRangeValue\": function setRangeValue() {\n          return (/* reexport */_setRangeValue\n          );\n        },\n        \"singleDivModeExecute\": function singleDivModeExecute() {\n          return (/* reexport */_singleDivModeExecute\n          );\n        },\n        \"stringToAlpha\": function stringToAlpha() {\n          return (/* reexport */_stringToAlpha\n          );\n        },\n        \"stringToRgb\": function stringToRgb() {\n          return (/* reexport */_stringToRgb\n          );\n        },\n        \"touchCancelEvent\": function touchCancelEvent() {\n          return (/* reexport */_touchCancelEvent\n          );\n        },\n        \"touchEndEvent\": function touchEndEvent() {\n          return (/* reexport */_touchEndEvent\n          );\n        },\n        \"touchMoveEvent\": function touchMoveEvent() {\n          return (/* reexport */_touchMoveEvent\n          );\n        },\n        \"touchStartEvent\": function touchStartEvent() {\n          return (/* reexport */_touchStartEvent\n          );\n        },\n        \"tsParticles\": function tsParticles() {\n          return (/* reexport */_tsParticles\n          );\n        },\n        \"visibilityChangeEvent\": function visibilityChangeEvent() {\n          return (/* reexport */_visibilityChangeEvent\n          );\n        }\n      });\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Utils/EventDispatcher.js\n      var EventDispatcher = /*#__PURE__*/function () {\n        function EventDispatcher() {\n          _classCallCheck(this, EventDispatcher);\n          this._listeners = new Map();\n        }\n        _createClass(EventDispatcher, [{\n          key: \"addEventListener\",\n          value: function addEventListener(type, listener) {\n            var _a;\n            this.removeEventListener(type, listener);\n            if (!this._listeners.get(type)) {\n              this._listeners.set(type, []);\n            }\n            (_a = this._listeners.get(type)) === null || _a === void 0 ? void 0 : _a.push(listener);\n          }\n        }, {\n          key: \"dispatchEvent\",\n          value: function dispatchEvent(type, args) {\n            var _a;\n            (_a = this._listeners.get(type)) === null || _a === void 0 ? void 0 : _a.forEach(function (handler) {\n              return handler(args);\n            });\n          }\n        }, {\n          key: \"hasEventListener\",\n          value: function hasEventListener(type) {\n            return !!this._listeners.get(type);\n          }\n        }, {\n          key: \"removeAllEventListeners\",\n          value: function removeAllEventListeners(type) {\n            if (!type) {\n              this._listeners = new Map();\n            } else {\n              this._listeners[\"delete\"](type);\n            }\n          }\n        }, {\n          key: \"removeEventListener\",\n          value: function removeEventListener(type, listener) {\n            var arr = this._listeners.get(type);\n            if (!arr) {\n              return;\n            }\n            var length = arr.length,\n              idx = arr.indexOf(listener);\n            if (idx < 0) {\n              return;\n            }\n            if (length === 1) {\n              this._listeners[\"delete\"](type);\n            } else {\n              arr.splice(idx, 1);\n            }\n          }\n        }]);\n        return EventDispatcher;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/Vector3d.js\n      var _Vector3d = /*#__PURE__*/function () {\n        function _Vector3d(xOrCoords, y, z) {\n          _classCallCheck(this, _Vector3d);\n          if (typeof xOrCoords !== \"number\" && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            var coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : 0;\n          } else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z !== null && z !== void 0 ? z : 0;\n          } else {\n            throw new Error(\"tsParticles - Vector3d not initialized correctly\");\n          }\n        }\n        _createClass(_Vector3d, [{\n          key: \"angle\",\n          get: function get() {\n            return Math.atan2(this.y, this.x);\n          },\n          set: function set(angle) {\n            this.updateFromAngle(angle, this.length);\n          }\n        }, {\n          key: \"length\",\n          get: function get() {\n            return Math.sqrt(this.getLengthSq());\n          },\n          set: function set(length) {\n            this.updateFromAngle(this.angle, length);\n          }\n        }, {\n          key: \"add\",\n          value: function add(v) {\n            return _Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n          }\n        }, {\n          key: \"addTo\",\n          value: function addTo(v) {\n            this.x += v.x;\n            this.y += v.y;\n            this.z += v.z;\n          }\n        }, {\n          key: \"copy\",\n          value: function copy() {\n            return _Vector3d.clone(this);\n          }\n        }, {\n          key: \"distanceTo\",\n          value: function distanceTo(v) {\n            return this.sub(v).length;\n          }\n        }, {\n          key: \"distanceToSq\",\n          value: function distanceToSq(v) {\n            return this.sub(v).getLengthSq();\n          }\n        }, {\n          key: \"div\",\n          value: function div(n) {\n            return _Vector3d.create(this.x / n, this.y / n, this.z / n);\n          }\n        }, {\n          key: \"divTo\",\n          value: function divTo(n) {\n            this.x /= n;\n            this.y /= n;\n            this.z /= n;\n          }\n        }, {\n          key: \"getLengthSq\",\n          value: function getLengthSq() {\n            return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n          }\n        }, {\n          key: \"mult\",\n          value: function mult(n) {\n            return _Vector3d.create(this.x * n, this.y * n, this.z * n);\n          }\n        }, {\n          key: \"multTo\",\n          value: function multTo(n) {\n            this.x *= n;\n            this.y *= n;\n            this.z *= n;\n          }\n        }, {\n          key: \"rotate\",\n          value: function rotate(angle) {\n            return _Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n          }\n        }, {\n          key: \"setTo\",\n          value: function setTo(c) {\n            this.x = c.x;\n            this.y = c.y;\n            var v3d = c;\n            this.z = v3d.z ? v3d.z : 0;\n          }\n        }, {\n          key: \"sub\",\n          value: function sub(v) {\n            return _Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n          }\n        }, {\n          key: \"subFrom\",\n          value: function subFrom(v) {\n            this.x -= v.x;\n            this.y -= v.y;\n            this.z -= v.z;\n          }\n        }, {\n          key: \"updateFromAngle\",\n          value: function updateFromAngle(angle, length) {\n            this.x = Math.cos(angle) * length;\n            this.y = Math.sin(angle) * length;\n          }\n        }], [{\n          key: \"origin\",\n          get: function get() {\n            return _Vector3d.create(0, 0, 0);\n          }\n        }, {\n          key: \"clone\",\n          value: function clone(source) {\n            return _Vector3d.create(source.x, source.y, source.z);\n          }\n        }, {\n          key: \"create\",\n          value: function create(x, y, z) {\n            return new _Vector3d(x, y, z);\n          }\n        }]);\n        return _Vector3d;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/Vector.js\n      var _Vector = /*#__PURE__*/function (_Vector3d2) {\n        _inherits(_Vector, _Vector3d2);\n        var _super = _createSuper(_Vector);\n        function _Vector(xOrCoords, y) {\n          _classCallCheck(this, _Vector);\n          return _super.call(this, xOrCoords, y, 0);\n        }\n        _createClass(_Vector, null, [{\n          key: \"origin\",\n          get: function get() {\n            return _Vector.create(0, 0);\n          }\n        }, {\n          key: \"clone\",\n          value: function clone(source) {\n            return _Vector.create(source.x, source.y);\n          }\n        }, {\n          key: \"create\",\n          value: function create(x, y) {\n            return new _Vector(x, y);\n          }\n        }]);\n        return _Vector;\n      }(_Vector3d);\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Utils/NumberUtils.js\n\n      var _random = Math.random;\n      var easings = new Map();\n      function _addEasing(name, easing) {\n        if (!easings.get(name)) {\n          easings.set(name, easing);\n        }\n      }\n      function _getEasing(name) {\n        return easings.get(name) || function (value) {\n          return value;\n        };\n      }\n      function _setRandom() {\n        var rnd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Math.random;\n        _random = rnd;\n      }\n      function _getRandom() {\n        return _clamp(_random(), 0, 1 - 1e-16);\n      }\n      function _clamp(num, min, max) {\n        return Math.min(Math.max(num, min), max);\n      }\n      function _mix(comp1, comp2, weight1, weight2) {\n        return Math.floor((comp1 * weight1 + comp2 * weight2) / (weight1 + weight2));\n      }\n      function _randomInRange(r) {\n        var max = _getRangeMax(r);\n        var min = _getRangeMin(r);\n        if (max === min) {\n          min = 0;\n        }\n        return _getRandom() * (max - min) + min;\n      }\n      function _getRangeValue(value) {\n        return typeof value === \"number\" ? value : _randomInRange(value);\n      }\n      function _getRangeMin(value) {\n        return typeof value === \"number\" ? value : value.min;\n      }\n      function _getRangeMax(value) {\n        return typeof value === \"number\" ? value : value.max;\n      }\n      function _setRangeValue(source, value) {\n        if (source === value || value === undefined && typeof source === \"number\") {\n          return source;\n        }\n        var min = _getRangeMin(source),\n          max = _getRangeMax(source);\n        return value !== undefined ? {\n          min: Math.min(min, value),\n          max: Math.max(max, value)\n        } : _setRangeValue(min, max);\n      }\n      function _getValue(options) {\n        var random = options.random,\n          _ref = typeof random === \"boolean\" ? {\n            enable: random,\n            minimumValue: 0\n          } : random,\n          enable = _ref.enable,\n          minimumValue = _ref.minimumValue;\n        return enable ? _getRangeValue(_setRangeValue(options.value, minimumValue)) : _getRangeValue(options.value);\n      }\n      function _getDistances(pointA, pointB) {\n        var dx = pointA.x - pointB.x,\n          dy = pointA.y - pointB.y;\n        return {\n          dx: dx,\n          dy: dy,\n          distance: Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2))\n        };\n      }\n      function _getDistance(pointA, pointB) {\n        return _getDistances(pointA, pointB).distance;\n      }\n      function _getParticleDirectionAngle(direction, position, center) {\n        if (typeof direction === \"number\") {\n          return direction * Math.PI / 180;\n        } else {\n          switch (direction) {\n            case \"top\":\n              return -Math.PI / 2;\n            case \"top-right\":\n              return -Math.PI / 4;\n            case \"right\":\n              return 0;\n            case \"bottom-right\":\n              return Math.PI / 4;\n            case \"bottom\":\n              return Math.PI / 2;\n            case \"bottom-left\":\n              return 3 * Math.PI / 4;\n            case \"left\":\n              return Math.PI;\n            case \"top-left\":\n              return -3 * Math.PI / 4;\n            case \"inside\":\n              return Math.atan2(center.y - position.y, center.x - position.x);\n            case \"outside\":\n              return Math.atan2(position.y - center.y, position.x - center.x);\n            default:\n              return _getRandom() * Math.PI * 2;\n          }\n        }\n      }\n      function _getParticleBaseVelocity(direction) {\n        var baseVelocity = _Vector.origin;\n        baseVelocity.length = 1;\n        baseVelocity.angle = direction;\n        return baseVelocity;\n      }\n      function _collisionVelocity(v1, v2, m1, m2) {\n        return _Vector.create(v1.x * (m1 - m2) / (m1 + m2) + v2.x * 2 * m2 / (m1 + m2), v1.y);\n      }\n      function _calcPositionFromSize(data) {\n        return data.position && data.position.x !== undefined && data.position.y !== undefined ? {\n          x: data.position.x * data.size.width / 100,\n          y: data.position.y * data.size.height / 100\n        } : undefined;\n      }\n      function _calcPositionOrRandomFromSize(data) {\n        var _a, _b, _c, _d;\n        return {\n          x: ((_b = (_a = data.position) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : _getRandom() * 100) * data.size.width / 100,\n          y: ((_d = (_c = data.position) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : _getRandom() * 100) * data.size.height / 100\n        };\n      }\n      function _calcPositionOrRandomFromSizeRanged(data) {\n        var _a, _b;\n        var position = {\n          x: ((_a = data.position) === null || _a === void 0 ? void 0 : _a.x) !== undefined ? _getRangeValue(data.position.x) : undefined,\n          y: ((_b = data.position) === null || _b === void 0 ? void 0 : _b.y) !== undefined ? _getRangeValue(data.position.y) : undefined\n        };\n        return _calcPositionOrRandomFromSize({\n          size: data.size,\n          position: position\n        });\n      }\n      function _calcExactPositionOrRandomFromSize(data) {\n        var _a, _b, _c, _d;\n        return {\n          x: (_b = (_a = data.position) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : _getRandom() * data.size.width,\n          y: (_d = (_c = data.position) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : _getRandom() * data.size.height\n        };\n      }\n      function _calcExactPositionOrRandomFromSizeRanged(data) {\n        var _a, _b;\n        var position = {\n          x: ((_a = data.position) === null || _a === void 0 ? void 0 : _a.x) !== undefined ? _getRangeValue(data.position.x) : undefined,\n          y: ((_b = data.position) === null || _b === void 0 ? void 0 : _b.y) !== undefined ? _getRangeValue(data.position.y) : undefined\n        };\n        return _calcExactPositionOrRandomFromSize({\n          size: data.size,\n          position: position\n        });\n      }\n      function _parseAlpha(input) {\n        return input ? input.endsWith(\"%\") ? parseFloat(input) / 100 : parseFloat(input) : 1;\n      }\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Utils/Utils.js\n\n      function rectSideBounce(pSide, pOtherSide, rectSide, rectOtherSide, velocity, factor) {\n        var res = {\n          bounced: false\n        };\n        if (pOtherSide.min < rectOtherSide.min || pOtherSide.min > rectOtherSide.max || pOtherSide.max < rectOtherSide.min || pOtherSide.max > rectOtherSide.max) {\n          return res;\n        }\n        if (pSide.max >= rectSide.min && pSide.max <= (rectSide.max + rectSide.min) / 2 && velocity > 0 || pSide.min <= rectSide.max && pSide.min > (rectSide.max + rectSide.min) / 2 && velocity < 0) {\n          res.velocity = velocity * -factor;\n          res.bounced = true;\n        }\n        return res;\n      }\n      function checkSelector(element, selectors) {\n        var res = _executeOnSingleOrMultiple(selectors, function (selector) {\n          return element.matches(selector);\n        });\n        return res instanceof Array ? res.some(function (t) {\n          return t;\n        }) : res;\n      }\n      function _isSsr() {\n        return typeof window === \"undefined\" || !window || typeof window.document === \"undefined\" || !window.document;\n      }\n      function _hasMatchMedia() {\n        return !_isSsr() && typeof matchMedia !== \"undefined\";\n      }\n      function _safeMatchMedia(query) {\n        if (!_hasMatchMedia()) {\n          return;\n        }\n        return matchMedia(query);\n      }\n      function _animate() {\n        return _isSsr() ? function (callback) {\n          return setTimeout(callback);\n        } : function (callback) {\n          return (requestAnimationFrame || setTimeout)(callback);\n        };\n      }\n      function _cancelAnimation() {\n        return _isSsr() ? function (handle) {\n          return clearTimeout(handle);\n        } : function (handle) {\n          return (cancelAnimationFrame || clearTimeout)(handle);\n        };\n      }\n      function _isInArray(value, array) {\n        return value === array || array instanceof Array && array.indexOf(value) > -1;\n      }\n      function _loadFont(_x, _x2) {\n        return _loadFont2.apply(this, arguments);\n      }\n      function _loadFont2() {\n        _loadFont2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee58(font, weight) {\n          return _regeneratorRuntime().wrap(function _callee58$(_context58) {\n            while (1) switch (_context58.prev = _context58.next) {\n              case 0:\n                _context58.prev = 0;\n                _context58.next = 3;\n                return document.fonts.load(\"\".concat(weight !== null && weight !== void 0 ? weight : \"400\", \" 36px '\").concat(font !== null && font !== void 0 ? font : \"Verdana\", \"'\"));\n              case 3:\n                _context58.next = 7;\n                break;\n              case 5:\n                _context58.prev = 5;\n                _context58.t0 = _context58[\"catch\"](0);\n              case 7:\n              case \"end\":\n                return _context58.stop();\n            }\n          }, _callee58, null, [[0, 5]]);\n        }));\n        return _loadFont2.apply(this, arguments);\n      }\n      function _arrayRandomIndex(array) {\n        return Math.floor(_getRandom() * array.length);\n      }\n      function _itemFromArray(array, index) {\n        var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        return array[index !== undefined && useIndex ? index % array.length : _arrayRandomIndex(array)];\n      }\n      function _isPointInside(point, size, offset, radius, direction) {\n        return _areBoundsInside(_calculateBounds(point, radius !== null && radius !== void 0 ? radius : 0), size, offset, direction);\n      }\n      function _areBoundsInside(bounds, size, offset, direction) {\n        var inside = true;\n        if (!direction || direction === \"bottom\") {\n          inside = bounds.top < size.height + offset.x;\n        }\n        if (inside && (!direction || direction === \"left\")) {\n          inside = bounds.right > offset.x;\n        }\n        if (inside && (!direction || direction === \"right\")) {\n          inside = bounds.left < size.width + offset.y;\n        }\n        if (inside && (!direction || direction === \"top\")) {\n          inside = bounds.bottom > offset.y;\n        }\n        return inside;\n      }\n      function _calculateBounds(point, radius) {\n        return {\n          bottom: point.y + radius,\n          left: point.x - radius,\n          right: point.x + radius,\n          top: point.y - radius\n        };\n      }\n      function _deepExtend(destination) {\n        for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          sources[_key - 1] = arguments[_key];\n        }\n        for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {\n          var source = _sources[_i];\n          if (source === undefined || source === null) {\n            continue;\n          }\n          if (_typeof(source) !== \"object\") {\n            destination = source;\n            continue;\n          }\n          var sourceIsArray = Array.isArray(source);\n          if (sourceIsArray && (_typeof(destination) !== \"object\" || !destination || !Array.isArray(destination))) {\n            destination = [];\n          } else if (!sourceIsArray && (_typeof(destination) !== \"object\" || !destination || Array.isArray(destination))) {\n            destination = {};\n          }\n          var _loop = function _loop(key) {\n            if (key === \"__proto__\") {\n              return 1; // continue\n            }\n            var sourceDict = source,\n              value = sourceDict[key],\n              isObject = _typeof(value) === \"object\",\n              destDict = destination;\n            destDict[key] = isObject && Array.isArray(value) ? value.map(function (v) {\n              return _deepExtend(destDict[key], v);\n            }) : _deepExtend(destDict[key], value);\n          };\n          for (var key in source) {\n            if (_loop(key)) continue;\n          }\n        }\n        return destination;\n      }\n      function _isDivModeEnabled(mode, divs) {\n        return !!_findItemFromSingleOrMultiple(divs, function (t) {\n          return t.enable && _isInArray(mode, t.mode);\n        });\n      }\n      function _divModeExecute(mode, divs, callback) {\n        _executeOnSingleOrMultiple(divs, function (div) {\n          var divMode = div.mode,\n            divEnabled = div.enable;\n          if (divEnabled && _isInArray(mode, divMode)) {\n            _singleDivModeExecute(div, callback);\n          }\n        });\n      }\n      function _singleDivModeExecute(div, callback) {\n        var selectors = div.selectors;\n        _executeOnSingleOrMultiple(selectors, function (selector) {\n          callback(selector, div);\n        });\n      }\n      function _divMode(divs, element) {\n        if (!element || !divs) {\n          return;\n        }\n        return _findItemFromSingleOrMultiple(divs, function (div) {\n          return checkSelector(element, div.selectors);\n        });\n      }\n      function _circleBounceDataFromParticle(p) {\n        return {\n          position: p.getPosition(),\n          radius: p.getRadius(),\n          mass: p.getMass(),\n          velocity: p.velocity,\n          factor: _Vector.create(_getValue(p.options.bounce.horizontal), _getValue(p.options.bounce.vertical))\n        };\n      }\n      function _circleBounce(p1, p2) {\n        var _p1$velocity$sub = p1.velocity.sub(p2.velocity),\n          xVelocityDiff = _p1$velocity$sub.x,\n          yVelocityDiff = _p1$velocity$sub.y,\n          _ref2 = [p1.position, p2.position],\n          pos1 = _ref2[0],\n          pos2 = _ref2[1],\n          _getDistances2 = _getDistances(pos2, pos1),\n          xDist = _getDistances2.dx,\n          yDist = _getDistances2.dy;\n        if (xVelocityDiff * xDist + yVelocityDiff * yDist < 0) {\n          return;\n        }\n        var angle = -Math.atan2(yDist, xDist),\n          m1 = p1.mass,\n          m2 = p2.mass,\n          u1 = p1.velocity.rotate(angle),\n          u2 = p2.velocity.rotate(angle),\n          v1 = _collisionVelocity(u1, u2, m1, m2),\n          v2 = _collisionVelocity(u2, u1, m1, m2),\n          vFinal1 = v1.rotate(-angle),\n          vFinal2 = v2.rotate(-angle);\n        p1.velocity.x = vFinal1.x * p1.factor.x;\n        p1.velocity.y = vFinal1.y * p1.factor.y;\n        p2.velocity.x = vFinal2.x * p2.factor.x;\n        p2.velocity.y = vFinal2.y * p2.factor.y;\n      }\n      function _rectBounce(particle, divBounds) {\n        var pPos = particle.getPosition(),\n          size = particle.getRadius(),\n          bounds = _calculateBounds(pPos, size),\n          resH = rectSideBounce({\n            min: bounds.left,\n            max: bounds.right\n          }, {\n            min: bounds.top,\n            max: bounds.bottom\n          }, {\n            min: divBounds.left,\n            max: divBounds.right\n          }, {\n            min: divBounds.top,\n            max: divBounds.bottom\n          }, particle.velocity.x, _getValue(particle.options.bounce.horizontal));\n        if (resH.bounced) {\n          if (resH.velocity !== undefined) {\n            particle.velocity.x = resH.velocity;\n          }\n          if (resH.position !== undefined) {\n            particle.position.x = resH.position;\n          }\n        }\n        var resV = rectSideBounce({\n          min: bounds.top,\n          max: bounds.bottom\n        }, {\n          min: bounds.left,\n          max: bounds.right\n        }, {\n          min: divBounds.top,\n          max: divBounds.bottom\n        }, {\n          min: divBounds.left,\n          max: divBounds.right\n        }, particle.velocity.y, _getValue(particle.options.bounce.vertical));\n        if (resV.bounced) {\n          if (resV.velocity !== undefined) {\n            particle.velocity.y = resV.velocity;\n          }\n          if (resV.position !== undefined) {\n            particle.position.y = resV.position;\n          }\n        }\n      }\n      function _executeOnSingleOrMultiple(obj, callback) {\n        return obj instanceof Array ? obj.map(function (item, index) {\n          return callback(item, index);\n        }) : callback(obj, 0);\n      }\n      function _itemFromSingleOrMultiple(obj, index, useIndex) {\n        return obj instanceof Array ? _itemFromArray(obj, index, useIndex) : obj;\n      }\n      function _findItemFromSingleOrMultiple(obj, callback) {\n        return obj instanceof Array ? obj.find(function (t, index) {\n          return callback(t, index);\n        }) : callback(obj, 0) ? obj : undefined;\n      }\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Utils/ColorUtils.js\n\n      var randomColorValue = \"random\",\n        midColorValue = \"mid\",\n        colorManagers = new Map();\n      function _addColorManager(manager) {\n        colorManagers.set(manager.key, manager);\n      }\n      function hue2rgb(p, q, t) {\n        if (t < 0) {\n          t += 1;\n        }\n        if (t > 1) {\n          t -= 1;\n        }\n        if (t < 1 / 6) {\n          return p + (q - p) * 6 * t;\n        }\n        if (t < 1 / 2) {\n          return q;\n        }\n        if (t < 2 / 3) {\n          return p + (q - p) * (2 / 3 - t) * 6;\n        }\n        return p;\n      }\n      function stringToRgba(input) {\n        var _iterator = _createForOfIteratorHelper(colorManagers),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n              manager = _step$value[1];\n            if (input.startsWith(manager.stringPrefix)) {\n              return manager.parseString(input);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i,\n          hexFixed = input.replace(shorthandRegex, function (_, r, g, b, a) {\n            return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n          }),\n          regex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i,\n          result = regex.exec(hexFixed);\n        return result ? {\n          a: result[4] !== undefined ? parseInt(result[4], 16) / 0xff : 1,\n          b: parseInt(result[3], 16),\n          g: parseInt(result[2], 16),\n          r: parseInt(result[1], 16)\n        } : undefined;\n      }\n      function _rangeColorToRgb(input, index) {\n        var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        if (!input) {\n          return;\n        }\n        var color = typeof input === \"string\" ? {\n          value: input\n        } : input;\n        if (typeof color.value === \"string\") {\n          return _colorToRgb(color.value, index, useIndex);\n        }\n        if (color.value instanceof Array) {\n          return _rangeColorToRgb({\n            value: _itemFromArray(color.value, index, useIndex)\n          });\n        }\n        var _iterator2 = _createForOfIteratorHelper(colorManagers),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _step2$value = _slicedToArray(_step2.value, 2),\n              manager = _step2$value[1];\n            var res = manager.handleRangeColor(color);\n            if (res) {\n              return res;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n      function _colorToRgb(input, index) {\n        var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        if (!input) {\n          return;\n        }\n        var color = typeof input === \"string\" ? {\n          value: input\n        } : input;\n        if (typeof color.value === \"string\") {\n          return color.value === randomColorValue ? _getRandomRgbColor() : _stringToRgb(color.value);\n        }\n        if (color.value instanceof Array) {\n          return _colorToRgb({\n            value: _itemFromArray(color.value, index, useIndex)\n          });\n        }\n        var _iterator3 = _createForOfIteratorHelper(colorManagers),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _step3$value = _slicedToArray(_step3.value, 2),\n              manager = _step3$value[1];\n            var res = manager.handleColor(color);\n            if (res) {\n              return res;\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      function _colorToHsl(color, index) {\n        var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var rgb = _colorToRgb(color, index, useIndex);\n        return rgb ? _rgbToHsl(rgb) : undefined;\n      }\n      function _rangeColorToHsl(color, index) {\n        var useIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var rgb = _rangeColorToRgb(color, index, useIndex);\n        return rgb ? _rgbToHsl(rgb) : undefined;\n      }\n      function _rgbToHsl(color) {\n        var r1 = color.r / 255,\n          g1 = color.g / 255,\n          b1 = color.b / 255,\n          max = Math.max(r1, g1, b1),\n          min = Math.min(r1, g1, b1),\n          res = {\n            h: 0,\n            l: (max + min) / 2,\n            s: 0\n          };\n        if (max !== min) {\n          res.s = res.l < 0.5 ? (max - min) / (max + min) : (max - min) / (2.0 - max - min);\n          res.h = r1 === max ? (g1 - b1) / (max - min) : res.h = g1 === max ? 2.0 + (b1 - r1) / (max - min) : 4.0 + (r1 - g1) / (max - min);\n        }\n        res.l *= 100;\n        res.s *= 100;\n        res.h *= 60;\n        if (res.h < 0) {\n          res.h += 360;\n        }\n        if (res.h >= 360) {\n          res.h -= 360;\n        }\n        return res;\n      }\n      function _stringToAlpha(input) {\n        var _a;\n        return (_a = stringToRgba(input)) === null || _a === void 0 ? void 0 : _a.a;\n      }\n      function _stringToRgb(input) {\n        return stringToRgba(input);\n      }\n      function _hslToRgb(hsl) {\n        var result = {\n            b: 0,\n            g: 0,\n            r: 0\n          },\n          hslPercent = {\n            h: hsl.h / 360,\n            l: hsl.l / 100,\n            s: hsl.s / 100\n          };\n        if (!hslPercent.s) {\n          result.b = hslPercent.l;\n          result.g = hslPercent.l;\n          result.r = hslPercent.l;\n        } else {\n          var q = hslPercent.l < 0.5 ? hslPercent.l * (1 + hslPercent.s) : hslPercent.l + hslPercent.s - hslPercent.l * hslPercent.s,\n            p = 2 * hslPercent.l - q;\n          result.r = hue2rgb(p, q, hslPercent.h + 1 / 3);\n          result.g = hue2rgb(p, q, hslPercent.h);\n          result.b = hue2rgb(p, q, hslPercent.h - 1 / 3);\n        }\n        result.r = Math.floor(result.r * 255);\n        result.g = Math.floor(result.g * 255);\n        result.b = Math.floor(result.b * 255);\n        return result;\n      }\n      function _hslaToRgba(hsla) {\n        var rgbResult = _hslToRgb(hsla);\n        return {\n          a: hsla.a,\n          b: rgbResult.b,\n          g: rgbResult.g,\n          r: rgbResult.r\n        };\n      }\n      function _getRandomRgbColor(min) {\n        var fixedMin = min !== null && min !== void 0 ? min : 0;\n        return {\n          b: Math.floor(_randomInRange(_setRangeValue(fixedMin, 256))),\n          g: Math.floor(_randomInRange(_setRangeValue(fixedMin, 256))),\n          r: Math.floor(_randomInRange(_setRangeValue(fixedMin, 256)))\n        };\n      }\n      function _getStyleFromRgb(color, opacity) {\n        return \"rgba(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \", \").concat(opacity !== null && opacity !== void 0 ? opacity : 1, \")\");\n      }\n      function _getStyleFromHsl(color, opacity) {\n        return \"hsla(\".concat(color.h, \", \").concat(color.s, \"%, \").concat(color.l, \"%, \").concat(opacity !== null && opacity !== void 0 ? opacity : 1, \")\");\n      }\n      function _colorMix(color1, color2, size1, size2) {\n        var rgb1 = color1,\n          rgb2 = color2;\n        if (rgb1.r === undefined) {\n          rgb1 = _hslToRgb(color1);\n        }\n        if (rgb2.r === undefined) {\n          rgb2 = _hslToRgb(color2);\n        }\n        return {\n          b: _mix(rgb1.b, rgb2.b, size1, size2),\n          g: _mix(rgb1.g, rgb2.g, size1, size2),\n          r: _mix(rgb1.r, rgb2.r, size1, size2)\n        };\n      }\n      function _getLinkColor(p1, p2, linkColor) {\n        var _a, _b;\n        if (linkColor === randomColorValue) {\n          return _getRandomRgbColor();\n        } else if (linkColor === midColorValue) {\n          var sourceColor = (_a = p1.getFillColor()) !== null && _a !== void 0 ? _a : p1.getStrokeColor(),\n            destColor = (_b = p2 === null || p2 === void 0 ? void 0 : p2.getFillColor()) !== null && _b !== void 0 ? _b : p2 === null || p2 === void 0 ? void 0 : p2.getStrokeColor();\n          if (sourceColor && destColor && p2) {\n            return _colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n          } else {\n            var hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n            if (hslColor) {\n              return _hslToRgb(hslColor);\n            }\n          }\n        } else {\n          return linkColor;\n        }\n      }\n      function _getLinkRandomColor(optColor, blink, consent) {\n        var color = typeof optColor === \"string\" ? optColor : optColor.value;\n        if (color === randomColorValue) {\n          if (consent) {\n            return _rangeColorToRgb({\n              value: color\n            });\n          }\n          if (blink) {\n            return randomColorValue;\n          }\n          return midColorValue;\n        } else if (color === midColorValue) {\n          return midColorValue;\n        } else {\n          return _rangeColorToRgb({\n            value: color\n          });\n        }\n      }\n      function _getHslFromAnimation(animation) {\n        return animation !== undefined ? {\n          h: animation.h.value,\n          s: animation.s.value,\n          l: animation.l.value\n        } : undefined;\n      }\n      function _getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n        var resColor = {\n          h: {\n            enable: false,\n            value: hsl.h\n          },\n          s: {\n            enable: false,\n            value: hsl.s\n          },\n          l: {\n            enable: false,\n            value: hsl.l\n          }\n        };\n        if (animationOptions) {\n          setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n          setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n          setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n        }\n        return resColor;\n      }\n      function setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n        colorValue.enable = colorAnimation.enable;\n        if (colorValue.enable) {\n          colorValue.velocity = _getRangeValue(colorAnimation.speed) / 100 * reduceFactor;\n          colorValue.decay = 1 - _getRangeValue(colorAnimation.decay);\n          colorValue.status = \"increasing\";\n          colorValue.loops = 0;\n          colorValue.maxLoops = _getRangeValue(colorAnimation.count);\n          if (!colorAnimation.sync) {\n            colorValue.velocity *= _getRandom();\n            colorValue.value *= _getRandom();\n          }\n          colorValue.initialValue = colorValue.value;\n        } else {\n          colorValue.velocity = 0;\n        }\n      }\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Utils/CanvasUtils.js\n\n      function _drawLine(context, begin, end) {\n        context.beginPath();\n        context.moveTo(begin.x, begin.y);\n        context.lineTo(end.x, end.y);\n        context.closePath();\n      }\n      function _drawTriangle(context, p1, p2, p3) {\n        context.beginPath();\n        context.moveTo(p1.x, p1.y);\n        context.lineTo(p2.x, p2.y);\n        context.lineTo(p3.x, p3.y);\n        context.closePath();\n      }\n      function _paintBase2(context, dimension, baseColor) {\n        context.fillStyle = baseColor !== null && baseColor !== void 0 ? baseColor : \"rgba(0,0,0,0)\";\n        context.fillRect(0, 0, dimension.width, dimension.height);\n      }\n      function _paintImage2(context, dimension, image, opacity) {\n        if (!image) {\n          return;\n        }\n        context.globalAlpha = opacity;\n        context.drawImage(image, 0, 0, dimension.width, dimension.height);\n        context.globalAlpha = 1;\n      }\n      function _clear(context, dimension) {\n        context.clearRect(0, 0, dimension.width, dimension.height);\n      }\n      function _drawParticle(data) {\n        var _a, _b, _c, _d, _e;\n        var container = data.container,\n          context = data.context,\n          particle = data.particle,\n          delta = data.delta,\n          colorStyles = data.colorStyles,\n          backgroundMask = data.backgroundMask,\n          composite = data.composite,\n          radius = data.radius,\n          opacity = data.opacity,\n          shadow = data.shadow,\n          transform = data.transform;\n        var pos = particle.getPosition(),\n          angle = particle.rotation + (particle.pathRotation ? particle.velocity.angle : 0),\n          rotateData = {\n            sin: Math.sin(angle),\n            cos: Math.cos(angle)\n          },\n          transformData = {\n            a: rotateData.cos * ((_a = transform.a) !== null && _a !== void 0 ? _a : 1),\n            b: rotateData.sin * ((_b = transform.b) !== null && _b !== void 0 ? _b : 1),\n            c: -rotateData.sin * ((_c = transform.c) !== null && _c !== void 0 ? _c : 1),\n            d: rotateData.cos * ((_d = transform.d) !== null && _d !== void 0 ? _d : 1)\n          };\n        context.setTransform(transformData.a, transformData.b, transformData.c, transformData.d, pos.x, pos.y);\n        context.beginPath();\n        if (backgroundMask) {\n          context.globalCompositeOperation = composite;\n        }\n        var shadowColor = particle.shadowColor;\n        if (shadow.enable && shadowColor) {\n          context.shadowBlur = shadow.blur;\n          context.shadowColor = _getStyleFromRgb(shadowColor);\n          context.shadowOffsetX = shadow.offset.x;\n          context.shadowOffsetY = shadow.offset.y;\n        }\n        if (colorStyles.fill) {\n          context.fillStyle = colorStyles.fill;\n        }\n        var strokeWidth = (_e = particle.strokeWidth) !== null && _e !== void 0 ? _e : 0;\n        context.lineWidth = strokeWidth;\n        if (colorStyles.stroke) {\n          context.strokeStyle = colorStyles.stroke;\n        }\n        _drawShape(container, context, particle, radius, opacity, delta);\n        if (strokeWidth > 0) {\n          context.stroke();\n        }\n        if (particle.close) {\n          context.closePath();\n        }\n        if (particle.fill) {\n          context.fill();\n        }\n        _drawShapeAfterEffect(container, context, particle, radius, opacity, delta);\n        context.globalCompositeOperation = \"source-over\";\n        context.setTransform(1, 0, 0, 1, 0, 0);\n      }\n      function _drawShape(container, context, particle, radius, opacity, delta) {\n        if (!particle.shape) {\n          return;\n        }\n        var drawer = container.drawers.get(particle.shape);\n        if (!drawer) {\n          return;\n        }\n        drawer.draw(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n      }\n      function _drawShapeAfterEffect(container, context, particle, radius, opacity, delta) {\n        if (!particle.shape) {\n          return;\n        }\n        var drawer = container.drawers.get(particle.shape);\n        if (!(drawer === null || drawer === void 0 ? void 0 : drawer.afterEffect)) {\n          return;\n        }\n        drawer.afterEffect(context, particle, radius, opacity, delta, container.retina.pixelRatio);\n      }\n      function _drawPlugin(context, plugin, delta) {\n        if (!plugin.draw) {\n          return;\n        }\n        plugin.draw(context, delta);\n      }\n      function _drawParticlePlugin(context, plugin, particle, delta) {\n        if (!plugin.drawParticle) {\n          return;\n        }\n        plugin.drawParticle(context, particle, delta);\n      }\n      function _alterHsl(color, type, value) {\n        return {\n          h: color.h,\n          s: color.s,\n          l: color.l + (type === \"darken\" ? -1 : 1) * value\n        };\n      }\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/Constants.js\n      var _generatedAttribute = \"generated\";\n      var _touchEndEvent = \"touchend\";\n      var _mouseDownEvent = \"pointerdown\";\n      var _mouseUpEvent = \"pointerup\";\n      var _mouseMoveEvent = \"pointermove\";\n      var _touchStartEvent = \"touchstart\";\n      var _touchMoveEvent = \"touchmove\";\n      var _mouseLeaveEvent = \"pointerleave\";\n      var _mouseOutEvent = \"pointerout\";\n      var _touchCancelEvent = \"touchcancel\";\n      var _resizeEvent = \"resize\";\n      var _visibilityChangeEvent = \"visibilitychange\";\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Canvas.js\n\n      function setTransformValue(factor, newFactor, key) {\n        var _a;\n        var newValue = newFactor[key];\n        if (newValue !== undefined) {\n          factor[key] = ((_a = factor[key]) !== null && _a !== void 0 ? _a : 1) * newValue;\n        }\n      }\n      var Canvas = /*#__PURE__*/function () {\n        function Canvas(container) {\n          var _this = this;\n          _classCallCheck(this, Canvas);\n          this.container = container;\n          this.size = {\n            height: 0,\n            width: 0\n          };\n          this._context = null;\n          this._generated = false;\n          this._preDrawUpdaters = [];\n          this._postDrawUpdaters = [];\n          this._resizePlugins = [];\n          this._colorPlugins = [];\n          this._mutationObserver = !_isSsr() && typeof MutationObserver !== \"undefined\" ? new MutationObserver(function (records) {\n            var _iterator4 = _createForOfIteratorHelper(records),\n              _step4;\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var record = _step4.value;\n                if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                  _this._repairStyle();\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }) : undefined;\n        }\n        _createClass(Canvas, [{\n          key: \"_fullScreen\",\n          get: function get() {\n            return this.container.actualOptions.fullScreen.enable;\n          }\n        }, {\n          key: \"clear\",\n          value: function clear() {\n            var _this2 = this;\n            var options = this.container.actualOptions,\n              trail = options.particles.move.trail,\n              trailFill = this._trailFill;\n            if (options.backgroundMask.enable) {\n              this.paint();\n            } else if (trail.enable && trail.length > 0 && trailFill) {\n              if (trailFill.color) {\n                this._paintBase(_getStyleFromRgb(trailFill.color, trailFill.opacity));\n              } else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n              }\n            } else {\n              this.draw(function (ctx) {\n                _clear(ctx, _this2.size);\n              });\n            }\n          }\n        }, {\n          key: \"destroy\",\n          value: function destroy() {\n            var _this3 = this;\n            var _a, _b;\n            (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n            if (this._generated) {\n              (_b = this.element) === null || _b === void 0 ? void 0 : _b.remove();\n            } else {\n              this._resetOriginalStyle();\n            }\n            this.draw(function (ctx) {\n              _clear(ctx, _this3.size);\n            });\n            this._preDrawUpdaters = [];\n            this._postDrawUpdaters = [];\n            this._resizePlugins = [];\n            this._colorPlugins = [];\n          }\n        }, {\n          key: \"draw\",\n          value: function draw(cb) {\n            if (!this._context) {\n              return;\n            }\n            return cb(this._context);\n          }\n        }, {\n          key: \"drawParticle\",\n          value: function drawParticle(particle, delta) {\n            var _this4 = this;\n            var _a;\n            if (particle.spawning || particle.destroyed) {\n              return;\n            }\n            var radius = particle.getRadius();\n            if (radius <= 0) {\n              return;\n            }\n            var pfColor = particle.getFillColor(),\n              psColor = (_a = particle.getStrokeColor()) !== null && _a !== void 0 ? _a : pfColor;\n            var _this$_getPluginParti = this._getPluginParticleColors(particle),\n              _this$_getPluginParti2 = _slicedToArray(_this$_getPluginParti, 2),\n              fColor = _this$_getPluginParti2[0],\n              sColor = _this$_getPluginParti2[1];\n            if (!fColor) {\n              fColor = pfColor;\n            }\n            if (!sColor) {\n              sColor = psColor;\n            }\n            if (!fColor && !sColor) {\n              return;\n            }\n            this.draw(function (ctx) {\n              var _a, _b, _c, _d;\n              var options = _this4.container.actualOptions,\n                zIndexOptions = particle.options.zIndex,\n                zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate),\n                opacity = (_c = (_a = particle.bubble.opacity) !== null && _a !== void 0 ? _a : (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1,\n                strokeOpacity = (_d = particle.strokeOpacity) !== null && _d !== void 0 ? _d : opacity,\n                zOpacity = opacity * zOpacityFactor,\n                zStrokeOpacity = strokeOpacity * zOpacityFactor,\n                transform = {},\n                colorStyles = {\n                  fill: fColor ? _getStyleFromHsl(fColor, zOpacity) : undefined\n                };\n              colorStyles.stroke = sColor ? _getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n              _this4._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n              _drawParticle({\n                container: _this4.container,\n                context: ctx,\n                particle: particle,\n                delta: delta,\n                colorStyles: colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * Math.pow(1 - particle.zIndexFactor, zIndexOptions.sizeRate),\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform: transform\n              });\n              _this4._applyPostDrawUpdaters(particle);\n            });\n          }\n        }, {\n          key: \"drawParticlePlugin\",\n          value: function drawParticlePlugin(plugin, particle, delta) {\n            this.draw(function (ctx) {\n              _drawParticlePlugin(ctx, plugin, particle, delta);\n            });\n          }\n        }, {\n          key: \"drawPlugin\",\n          value: function drawPlugin(plugin, delta) {\n            this.draw(function (ctx) {\n              _drawPlugin(ctx, plugin, delta);\n            });\n          }\n        }, {\n          key: \"init\",\n          value: function () {\n            var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n              var _a;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    this.resize();\n                    this._initStyle();\n                    this._initCover();\n                    _context.prev = 3;\n                    _context.next = 6;\n                    return this._initTrail();\n                  case 6:\n                    _context.next = 11;\n                    break;\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](3);\n                    console.error(_context.t0);\n                  case 11:\n                    this.initBackground();\n                    if (this.element) {\n                      (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.observe(this.element, {\n                        attributes: true\n                      });\n                    }\n                    this.initUpdaters();\n                    this.initPlugins();\n                    this.paint();\n                  case 16:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee, this, [[3, 8]]);\n            }));\n            function init() {\n              return _init.apply(this, arguments);\n            }\n            return init;\n          }()\n        }, {\n          key: \"initBackground\",\n          value: function initBackground() {\n            var options = this.container.actualOptions,\n              background = options.background,\n              element = this.element,\n              elementStyle = element === null || element === void 0 ? void 0 : element.style;\n            if (!elementStyle) {\n              return;\n            }\n            if (background.color) {\n              var color = _rangeColorToRgb(background.color);\n              elementStyle.backgroundColor = color ? _getStyleFromRgb(color, background.opacity) : \"\";\n            } else {\n              elementStyle.backgroundColor = \"\";\n            }\n            elementStyle.backgroundImage = background.image || \"\";\n            elementStyle.backgroundPosition = background.position || \"\";\n            elementStyle.backgroundRepeat = background.repeat || \"\";\n            elementStyle.backgroundSize = background.size || \"\";\n          }\n        }, {\n          key: \"initPlugins\",\n          value: function initPlugins() {\n            this._resizePlugins = [];\n            var _iterator5 = _createForOfIteratorHelper(this.container.plugins),\n              _step5;\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var _step5$value = _slicedToArray(_step5.value, 2),\n                  plugin = _step5$value[1];\n                if (plugin.resize) {\n                  this._resizePlugins.push(plugin);\n                }\n                if (plugin.particleFillColor || plugin.particleStrokeColor) {\n                  this._colorPlugins.push(plugin);\n                }\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        }, {\n          key: \"initUpdaters\",\n          value: function initUpdaters() {\n            this._preDrawUpdaters = [];\n            this._postDrawUpdaters = [];\n            var _iterator6 = _createForOfIteratorHelper(this.container.particles.updaters),\n              _step6;\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                var updater = _step6.value;\n                if (updater.afterDraw) {\n                  this._postDrawUpdaters.push(updater);\n                }\n                if (updater.getColorStyles || updater.getTransformValues || updater.beforeDraw) {\n                  this._preDrawUpdaters.push(updater);\n                }\n              }\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n          }\n        }, {\n          key: \"loadCanvas\",\n          value: function loadCanvas(canvas) {\n            var _a, _b;\n            if (this._generated) {\n              (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();\n            }\n            this._generated = canvas.dataset && _generatedAttribute in canvas.dataset ? canvas.dataset[_generatedAttribute] === \"true\" : this._generated;\n            this.element = canvas;\n            this.element.ariaHidden = \"true\";\n            this._originalStyle = _deepExtend({}, this.element.style);\n            this.size.height = canvas.offsetHeight;\n            this.size.width = canvas.offsetWidth;\n            this._context = this.element.getContext(\"2d\");\n            (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(this.element, {\n              attributes: true\n            });\n            this.container.retina.init();\n            this.initBackground();\n          }\n        }, {\n          key: \"paint\",\n          value: function paint() {\n            var _this5 = this;\n            var options = this.container.actualOptions;\n            this.draw(function (ctx) {\n              if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                _clear(ctx, _this5.size);\n                _this5._paintBase(_this5._coverColorStyle);\n              } else {\n                _this5._paintBase();\n              }\n            });\n          }\n        }, {\n          key: \"resize\",\n          value: function resize() {\n            if (!this.element) {\n              return;\n            }\n            var container = this.container,\n              pxRatio = container.retina.pixelRatio,\n              size = container.canvas.size,\n              newSize = {\n                width: this.element.offsetWidth * pxRatio,\n                height: this.element.offsetHeight * pxRatio\n              };\n            if (newSize.height === size.height && newSize.width === size.width && newSize.height === this.element.height && newSize.width === this.element.width) {\n              return;\n            }\n            var oldSize = Object.assign({}, size);\n            this.element.width = size.width = this.element.offsetWidth * pxRatio;\n            this.element.height = size.height = this.element.offsetHeight * pxRatio;\n            if (this.container.started) {\n              this.resizeFactor = {\n                width: size.width / oldSize.width,\n                height: size.height / oldSize.height\n              };\n            }\n          }\n        }, {\n          key: \"windowResize\",\n          value: function () {\n            var _windowResize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n              var container, needsRefresh;\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (this.element) {\n                      _context2.next = 2;\n                      break;\n                    }\n                    return _context2.abrupt(\"return\");\n                  case 2:\n                    this.resize();\n                    container = this.container, needsRefresh = container.updateActualOptions();\n                    container.particles.setDensity();\n                    this._applyResizePlugins();\n                    if (!needsRefresh) {\n                      _context2.next = 9;\n                      break;\n                    }\n                    _context2.next = 9;\n                    return container.refresh();\n                  case 9:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2, this);\n            }));\n            function windowResize() {\n              return _windowResize.apply(this, arguments);\n            }\n            return windowResize;\n          }()\n        }, {\n          key: \"_applyPostDrawUpdaters\",\n          value: function _applyPostDrawUpdaters(particle) {\n            var _a;\n            var _iterator7 = _createForOfIteratorHelper(this._postDrawUpdaters),\n              _step7;\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var updater = _step7.value;\n                (_a = updater.afterDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n        }, {\n          key: \"_applyPreDrawUpdaters\",\n          value: function _applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform) {\n            var _a;\n            var _iterator8 = _createForOfIteratorHelper(this._preDrawUpdaters),\n              _step8;\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var updater = _step8.value;\n                if (updater.getColorStyles) {\n                  var _updater$getColorStyl = updater.getColorStyles(particle, ctx, radius, zOpacity),\n                    fill = _updater$getColorStyl.fill,\n                    stroke = _updater$getColorStyl.stroke;\n                  if (fill) {\n                    colorStyles.fill = fill;\n                  }\n                  if (stroke) {\n                    colorStyles.stroke = stroke;\n                  }\n                }\n                if (updater.getTransformValues) {\n                  var updaterTransform = updater.getTransformValues(particle);\n                  for (var key in updaterTransform) {\n                    setTransformValue(transform, updaterTransform, key);\n                  }\n                }\n                (_a = updater.beforeDraw) === null || _a === void 0 ? void 0 : _a.call(updater, particle);\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n          }\n        }, {\n          key: \"_applyResizePlugins\",\n          value: function _applyResizePlugins() {\n            var _iterator9 = _createForOfIteratorHelper(this._resizePlugins),\n              _step9;\n            try {\n              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                var plugin = _step9.value;\n                if (plugin.resize) {\n                  plugin.resize();\n                }\n              }\n            } catch (err) {\n              _iterator9.e(err);\n            } finally {\n              _iterator9.f();\n            }\n          }\n        }, {\n          key: \"_getPluginParticleColors\",\n          value: function _getPluginParticleColors(particle) {\n            var fColor, sColor;\n            var _iterator10 = _createForOfIteratorHelper(this._colorPlugins),\n              _step10;\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var plugin = _step10.value;\n                if (!fColor && plugin.particleFillColor) {\n                  fColor = _rangeColorToHsl(plugin.particleFillColor(particle));\n                }\n                if (!sColor && plugin.particleStrokeColor) {\n                  sColor = _rangeColorToHsl(plugin.particleStrokeColor(particle));\n                }\n                if (fColor && sColor) {\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n            return [fColor, sColor];\n          }\n        }, {\n          key: \"_initCover\",\n          value: function _initCover() {\n            var options = this.container.actualOptions,\n              cover = options.backgroundMask.cover,\n              color = cover.color,\n              coverRgb = _rangeColorToRgb(color);\n            if (coverRgb) {\n              var coverColor = {\n                r: coverRgb.r,\n                g: coverRgb.g,\n                b: coverRgb.b,\n                a: cover.opacity\n              };\n              this._coverColorStyle = _getStyleFromRgb(coverColor, coverColor.a);\n            }\n          }\n        }, {\n          key: \"_initStyle\",\n          value: function _initStyle() {\n            var element = this.element,\n              options = this.container.actualOptions;\n            if (!element) {\n              return;\n            }\n            if (this._fullScreen) {\n              this._originalStyle = _deepExtend({}, element.style);\n              this._setFullScreenStyle();\n            } else {\n              this._resetOriginalStyle();\n            }\n            for (var key in options.style) {\n              if (!key || !options.style) {\n                continue;\n              }\n              var value = options.style[key];\n              if (!value) {\n                continue;\n              }\n              element.style.setProperty(key, value, \"important\");\n            }\n          }\n        }, {\n          key: \"_initTrail\",\n          value: function () {\n            var _initTrail2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n              var _this6 = this;\n              var options, trail, trailFill, fillColor, _trail;\n              return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                while (1) switch (_context3.prev = _context3.next) {\n                  case 0:\n                    options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n                    if (trail.enable) {\n                      _context3.next = 3;\n                      break;\n                    }\n                    return _context3.abrupt(\"return\");\n                  case 3:\n                    if (!trailFill.color) {\n                      _context3.next = 11;\n                      break;\n                    }\n                    fillColor = _rangeColorToRgb(trailFill.color);\n                    if (fillColor) {\n                      _context3.next = 7;\n                      break;\n                    }\n                    return _context3.abrupt(\"return\");\n                  case 7:\n                    _trail = options.particles.move.trail;\n                    this._trailFill = {\n                      color: Object.assign({}, fillColor),\n                      opacity: 1 / _trail.length\n                    };\n                    _context3.next = 13;\n                    break;\n                  case 11:\n                    _context3.next = 13;\n                    return new Promise(function (resolve, reject) {\n                      if (!trailFill.image) {\n                        return;\n                      }\n                      var img = document.createElement(\"img\");\n                      img.addEventListener(\"load\", function () {\n                        _this6._trailFill = {\n                          image: img,\n                          opacity: 1 / trail.length\n                        };\n                        resolve();\n                      });\n                      img.addEventListener(\"error\", function (evt) {\n                        reject(evt.error);\n                      });\n                      img.src = trailFill.image;\n                    });\n                  case 13:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }, _callee3, this);\n            }));\n            function _initTrail() {\n              return _initTrail2.apply(this, arguments);\n            }\n            return _initTrail;\n          }()\n        }, {\n          key: \"_paintBase\",\n          value: function _paintBase(baseColor) {\n            var _this7 = this;\n            this.draw(function (ctx) {\n              _paintBase2(ctx, _this7.size, baseColor);\n            });\n          }\n        }, {\n          key: \"_paintImage\",\n          value: function _paintImage(image, opacity) {\n            var _this8 = this;\n            this.draw(function (ctx) {\n              _paintImage2(ctx, _this8.size, image, opacity);\n            });\n          }\n        }, {\n          key: \"_repairStyle\",\n          value: function _repairStyle() {\n            var _a, _b;\n            var element = this.element;\n            if (!element) {\n              return;\n            }\n            (_a = this._mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n            this._initStyle();\n            this.initBackground();\n            (_b = this._mutationObserver) === null || _b === void 0 ? void 0 : _b.observe(element, {\n              attributes: true\n            });\n          }\n        }, {\n          key: \"_resetOriginalStyle\",\n          value: function _resetOriginalStyle() {\n            var element = this.element,\n              originalStyle = this._originalStyle;\n            if (!(element && originalStyle)) {\n              return;\n            }\n            element.style.position = originalStyle.position;\n            element.style.zIndex = originalStyle.zIndex;\n            element.style.top = originalStyle.top;\n            element.style.left = originalStyle.left;\n            element.style.width = originalStyle.width;\n            element.style.height = originalStyle.height;\n          }\n        }, {\n          key: \"_setFullScreenStyle\",\n          value: function _setFullScreenStyle() {\n            var element = this.element;\n            if (!element) {\n              return;\n            }\n            var priority = \"important\";\n            element.style.setProperty(\"position\", \"fixed\", priority);\n            element.style.setProperty(\"z-index\", this.container.actualOptions.fullScreen.zIndex.toString(10), priority);\n            element.style.setProperty(\"top\", \"0\", priority);\n            element.style.setProperty(\"left\", \"0\", priority);\n            element.style.setProperty(\"width\", \"100%\", priority);\n            element.style.setProperty(\"height\", \"100%\", priority);\n          }\n        }]);\n        return Canvas;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/EventListeners.js\n\n      function manageListener(element, event, handler, add, options) {\n        if (add) {\n          var addOptions = {\n            passive: true\n          };\n          if (typeof options === \"boolean\") {\n            addOptions.capture = options;\n          } else if (options !== undefined) {\n            addOptions = options;\n          }\n          element.addEventListener(event, handler, addOptions);\n        } else {\n          var removeOptions = options;\n          element.removeEventListener(event, handler, removeOptions);\n        }\n      }\n      var EventListeners = /*#__PURE__*/function () {\n        function EventListeners(container) {\n          var _this9 = this;\n          _classCallCheck(this, EventListeners);\n          this.container = container;\n          this.canPush = true;\n          this.handlers = {\n            mouseMove: function mouseMove(e) {\n              return _this9.mouseTouchMove(e);\n            },\n            touchStart: function touchStart(e) {\n              return _this9.mouseTouchMove(e);\n            },\n            touchMove: function touchMove(e) {\n              return _this9.mouseTouchMove(e);\n            },\n            touchEnd: function touchEnd() {\n              return _this9.mouseTouchFinish();\n            },\n            mouseLeave: function mouseLeave() {\n              return _this9.mouseTouchFinish();\n            },\n            touchCancel: function touchCancel() {\n              return _this9.mouseTouchFinish();\n            },\n            touchEndClick: function touchEndClick(e) {\n              return _this9.mouseTouchClick(e);\n            },\n            mouseUp: function mouseUp(e) {\n              return _this9.mouseTouchClick(e);\n            },\n            mouseDown: function mouseDown() {\n              return _this9.mouseDown();\n            },\n            visibilityChange: function visibilityChange() {\n              return _this9.handleVisibilityChange();\n            },\n            themeChange: function themeChange(e) {\n              return _this9.handleThemeChange(e);\n            },\n            oldThemeChange: function oldThemeChange(e) {\n              return _this9.handleThemeChange(e);\n            },\n            resize: function resize() {\n              return _this9.handleWindowResize();\n            }\n          };\n        }\n        _createClass(EventListeners, [{\n          key: \"addListeners\",\n          value: function addListeners() {\n            this.manageListeners(true);\n          }\n        }, {\n          key: \"removeListeners\",\n          value: function removeListeners() {\n            this.manageListeners(false);\n          }\n        }, {\n          key: \"doMouseTouchClick\",\n          value: function doMouseTouchClick(e) {\n            var _this10 = this;\n            var container = this.container,\n              options = container.actualOptions;\n            if (this.canPush) {\n              var mouseInteractivity = container.interactivity.mouse,\n                mousePos = mouseInteractivity.position;\n              if (!mousePos) {\n                return;\n              }\n              mouseInteractivity.clickPosition = Object.assign({}, mousePos);\n              mouseInteractivity.clickTime = new Date().getTime();\n              var onClick = options.interactivity.events.onClick;\n              _executeOnSingleOrMultiple(onClick.mode, function (mode) {\n                return _this10.handleClickMode(mode);\n              });\n            }\n            if (e.type === \"touchend\") {\n              setTimeout(function () {\n                return _this10.mouseTouchFinish();\n              }, 500);\n            }\n          }\n        }, {\n          key: \"handleClickMode\",\n          value: function handleClickMode(mode) {\n            this.container.handleClickMode(mode);\n          }\n        }, {\n          key: \"handleThemeChange\",\n          value: function handleThemeChange(e) {\n            var mediaEvent = e,\n              container = this.container,\n              options = container.options,\n              defaultThemes = options.defaultThemes,\n              themeName = mediaEvent.matches ? defaultThemes.dark : defaultThemes.light,\n              theme = options.themes.find(function (theme) {\n                return theme.name === themeName;\n              });\n            if (theme && theme[\"default\"].auto) {\n              container.loadTheme(themeName);\n            }\n          }\n        }, {\n          key: \"handleVisibilityChange\",\n          value: function handleVisibilityChange() {\n            var container = this.container,\n              options = container.actualOptions;\n            this.mouseTouchFinish();\n            if (!options.pauseOnBlur) {\n              return;\n            }\n            if (document === null || document === void 0 ? void 0 : document.hidden) {\n              container.pageHidden = true;\n              container.pause();\n            } else {\n              container.pageHidden = false;\n              if (container.getAnimationStatus()) {\n                container.play(true);\n              } else {\n                container.draw(true);\n              }\n            }\n          }\n        }, {\n          key: \"handleWindowResize\",\n          value: function handleWindowResize() {\n            var _this11 = this;\n            if (this.resizeTimeout) {\n              clearTimeout(this.resizeTimeout);\n              delete this.resizeTimeout;\n            }\n            this.resizeTimeout = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n              var _a;\n              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    return _context4.abrupt(\"return\", (_a = _this11.container.canvas) === null || _a === void 0 ? void 0 : _a.windowResize());\n                  case 1:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee4);\n            })), this.container.actualOptions.interactivity.events.resize.delay * 1000);\n          }\n        }, {\n          key: \"manageListeners\",\n          value: function manageListeners(add) {\n            var _this12 = this;\n            var _a;\n            var handlers = this.handlers,\n              container = this.container,\n              options = container.actualOptions,\n              detectType = options.interactivity.detectsOn;\n            var mouseLeaveTmpEvent = _mouseLeaveEvent;\n            if (detectType === \"window\") {\n              container.interactivity.element = window;\n              mouseLeaveTmpEvent = _mouseOutEvent;\n            } else if (detectType === \"parent\" && container.canvas.element) {\n              var canvasEl = container.canvas.element;\n              container.interactivity.element = (_a = canvasEl.parentElement) !== null && _a !== void 0 ? _a : canvasEl.parentNode;\n            } else {\n              container.interactivity.element = container.canvas.element;\n            }\n            var mediaMatch = _safeMatchMedia(\"(prefers-color-scheme: dark)\");\n            if (mediaMatch) {\n              if (mediaMatch.addEventListener !== undefined) {\n                manageListener(mediaMatch, \"change\", handlers.themeChange, add);\n              } else if (mediaMatch.addListener !== undefined) {\n                if (add) {\n                  mediaMatch.addListener(handlers.oldThemeChange);\n                } else {\n                  mediaMatch.removeListener(handlers.oldThemeChange);\n                }\n              }\n            }\n            var interactivityEl = container.interactivity.element;\n            if (!interactivityEl) {\n              return;\n            }\n            var html = interactivityEl;\n            if (options.interactivity.events.onHover.enable || options.interactivity.events.onClick.enable) {\n              manageListener(interactivityEl, _mouseMoveEvent, handlers.mouseMove, add);\n              manageListener(interactivityEl, _touchStartEvent, handlers.touchStart, add);\n              manageListener(interactivityEl, _touchMoveEvent, handlers.touchMove, add);\n              if (!options.interactivity.events.onClick.enable) {\n                manageListener(interactivityEl, _touchEndEvent, handlers.touchEnd, add);\n              } else {\n                manageListener(interactivityEl, _touchEndEvent, handlers.touchEndClick, add);\n                manageListener(interactivityEl, _mouseUpEvent, handlers.mouseUp, add);\n                manageListener(interactivityEl, _mouseDownEvent, handlers.mouseDown, add);\n              }\n              manageListener(interactivityEl, mouseLeaveTmpEvent, handlers.mouseLeave, add);\n              manageListener(interactivityEl, _touchCancelEvent, handlers.touchCancel, add);\n            }\n            if (container.canvas.element) {\n              container.canvas.element.style.pointerEvents = html === container.canvas.element ? \"initial\" : \"none\";\n            }\n            if (options.interactivity.events.resize) {\n              if (typeof ResizeObserver !== \"undefined\") {\n                if (this.resizeObserver && !add) {\n                  if (container.canvas.element) {\n                    this.resizeObserver.unobserve(container.canvas.element);\n                  }\n                  this.resizeObserver.disconnect();\n                  delete this.resizeObserver;\n                } else if (!this.resizeObserver && add && container.canvas.element) {\n                  this.resizeObserver = new ResizeObserver(function (entries) {\n                    var entry = entries.find(function (e) {\n                      return e.target === container.canvas.element;\n                    });\n                    if (!entry) {\n                      return;\n                    }\n                    _this12.handleWindowResize();\n                  });\n                  this.resizeObserver.observe(container.canvas.element);\n                }\n              } else {\n                manageListener(window, _resizeEvent, handlers.resize, add);\n              }\n            }\n            if (document) {\n              manageListener(document, _visibilityChangeEvent, handlers.visibilityChange, add, false);\n            }\n          }\n        }, {\n          key: \"mouseDown\",\n          value: function mouseDown() {\n            var interactivity = this.container.interactivity;\n            if (interactivity) {\n              var mouse = interactivity.mouse;\n              mouse.clicking = true;\n              mouse.downPosition = mouse.position;\n            }\n          }\n        }, {\n          key: \"mouseTouchClick\",\n          value: function mouseTouchClick(e) {\n            var container = this.container,\n              options = container.actualOptions,\n              mouse = container.interactivity.mouse;\n            mouse.inside = true;\n            var handled = false;\n            var mousePosition = mouse.position;\n            if (!mousePosition || !options.interactivity.events.onClick.enable) {\n              return;\n            }\n            var _iterator11 = _createForOfIteratorHelper(container.plugins),\n              _step11;\n            try {\n              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                var _step11$value = _slicedToArray(_step11.value, 2),\n                  plugin = _step11$value[1];\n                if (!plugin.clickPositionValid) {\n                  continue;\n                }\n                handled = plugin.clickPositionValid(mousePosition);\n                if (handled) {\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator11.e(err);\n            } finally {\n              _iterator11.f();\n            }\n            if (!handled) {\n              this.doMouseTouchClick(e);\n            }\n            mouse.clicking = false;\n          }\n        }, {\n          key: \"mouseTouchFinish\",\n          value: function mouseTouchFinish() {\n            var interactivity = this.container.interactivity;\n            if (!interactivity) {\n              return;\n            }\n            var mouse = interactivity.mouse;\n            delete mouse.position;\n            delete mouse.clickPosition;\n            delete mouse.downPosition;\n            interactivity.status = _mouseLeaveEvent;\n            mouse.inside = false;\n            mouse.clicking = false;\n          }\n        }, {\n          key: \"mouseTouchMove\",\n          value: function mouseTouchMove(e) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            var container = this.container,\n              options = container.actualOptions;\n            if (!((_a = container.interactivity) === null || _a === void 0 ? void 0 : _a.element)) {\n              return;\n            }\n            container.interactivity.mouse.inside = true;\n            var pos;\n            var canvas = container.canvas.element;\n            if (e.type.startsWith(\"pointer\")) {\n              this.canPush = true;\n              var mouseEvent = e;\n              if (container.interactivity.element === window) {\n                if (canvas) {\n                  var clientRect = canvas.getBoundingClientRect();\n                  pos = {\n                    x: mouseEvent.clientX - clientRect.left,\n                    y: mouseEvent.clientY - clientRect.top\n                  };\n                }\n              } else if (options.interactivity.detectsOn === \"parent\") {\n                var source = mouseEvent.target,\n                  target = mouseEvent.currentTarget,\n                  canvasEl = container.canvas.element;\n                if (source && target && canvasEl) {\n                  var sourceRect = source.getBoundingClientRect(),\n                    targetRect = target.getBoundingClientRect(),\n                    canvasRect = canvasEl.getBoundingClientRect();\n                  pos = {\n                    x: mouseEvent.offsetX + 2 * sourceRect.left - (targetRect.left + canvasRect.left),\n                    y: mouseEvent.offsetY + 2 * sourceRect.top - (targetRect.top + canvasRect.top)\n                  };\n                } else {\n                  pos = {\n                    x: (_b = mouseEvent.offsetX) !== null && _b !== void 0 ? _b : mouseEvent.clientX,\n                    y: (_c = mouseEvent.offsetY) !== null && _c !== void 0 ? _c : mouseEvent.clientY\n                  };\n                }\n              } else if (mouseEvent.target === container.canvas.element) {\n                pos = {\n                  x: (_d = mouseEvent.offsetX) !== null && _d !== void 0 ? _d : mouseEvent.clientX,\n                  y: (_e = mouseEvent.offsetY) !== null && _e !== void 0 ? _e : mouseEvent.clientY\n                };\n              }\n            } else {\n              this.canPush = e.type !== \"touchmove\";\n              var touchEvent = e,\n                lastTouch = touchEvent.touches[touchEvent.touches.length - 1],\n                _canvasRect = canvas === null || canvas === void 0 ? void 0 : canvas.getBoundingClientRect();\n              pos = {\n                x: lastTouch.clientX - ((_f = _canvasRect === null || _canvasRect === void 0 ? void 0 : _canvasRect.left) !== null && _f !== void 0 ? _f : 0),\n                y: lastTouch.clientY - ((_g = _canvasRect === null || _canvasRect === void 0 ? void 0 : _canvasRect.top) !== null && _g !== void 0 ? _g : 0)\n              };\n            }\n            var pxRatio = container.retina.pixelRatio;\n            if (pos) {\n              pos.x *= pxRatio;\n              pos.y *= pxRatio;\n            }\n            container.interactivity.mouse.position = pos;\n            container.interactivity.status = _mouseMoveEvent;\n          }\n        }]);\n        return EventListeners;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/FrameManager.js\n      function initDelta(value) {\n        var fpsLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n        var smooth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        return {\n          value: value,\n          factor: smooth ? 60 / fpsLimit : 60 * value / 1000\n        };\n      }\n      var FrameManager = /*#__PURE__*/function () {\n        function FrameManager(container) {\n          _classCallCheck(this, FrameManager);\n          this.container = container;\n        }\n        _createClass(FrameManager, [{\n          key: \"nextFrame\",\n          value: function () {\n            var _nextFrame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(timestamp) {\n              var _a, container, delta;\n              return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                while (1) switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.prev = 0;\n                    container = this.container;\n                    if (!(!container.smooth && container.lastFrameTime !== undefined && timestamp < container.lastFrameTime + 1000 / container.fpsLimit)) {\n                      _context5.next = 5;\n                      break;\n                    }\n                    container.draw(false);\n                    return _context5.abrupt(\"return\");\n                  case 5:\n                    (_a = container.lastFrameTime) !== null && _a !== void 0 ? _a : container.lastFrameTime = timestamp;\n                    delta = initDelta(timestamp - container.lastFrameTime, container.fpsLimit, container.smooth);\n                    container.lifeTime += delta.value;\n                    container.lastFrameTime = timestamp;\n                    if (!(delta.value > 1000)) {\n                      _context5.next = 12;\n                      break;\n                    }\n                    container.draw(false);\n                    return _context5.abrupt(\"return\");\n                  case 12:\n                    _context5.next = 14;\n                    return container.particles.draw(delta);\n                  case 14:\n                    if (!(container.duration > 0 && container.lifeTime > container.duration)) {\n                      _context5.next = 17;\n                      break;\n                    }\n                    container.destroy();\n                    return _context5.abrupt(\"return\");\n                  case 17:\n                    if (container.getAnimationStatus()) {\n                      container.draw(false);\n                    }\n                    _context5.next = 23;\n                    break;\n                  case 20:\n                    _context5.prev = 20;\n                    _context5.t0 = _context5[\"catch\"](0);\n                    console.error(\"tsParticles error in animation loop\", _context5.t0);\n                  case 23:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }, _callee5, this, [[0, 20]]);\n            }));\n            function nextFrame(_x3) {\n              return _nextFrame.apply(this, arguments);\n            }\n            return nextFrame;\n          }()\n        }]);\n        return FrameManager;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/OptionsColor.js\n      var _OptionsColor = /*#__PURE__*/function () {\n        function _OptionsColor() {\n          _classCallCheck(this, _OptionsColor);\n          this.value = \"\";\n        }\n        _createClass(_OptionsColor, [{\n          key: \"load\",\n          value: function load(data) {\n            if ((data === null || data === void 0 ? void 0 : data.value) === undefined) {\n              return;\n            }\n            this.value = data.value;\n          }\n        }], [{\n          key: \"create\",\n          value: function create(source, data) {\n            var color = new _OptionsColor();\n            color.load(source);\n            if (data !== undefined) {\n              if (typeof data === \"string\" || data instanceof Array) {\n                color.load({\n                  value: data\n                });\n              } else {\n                color.load(data);\n              }\n            }\n            return color;\n          }\n        }]);\n        return _OptionsColor;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Background/Background.js\n      var _Background = /*#__PURE__*/function () {\n        function _Background() {\n          _classCallCheck(this, _Background);\n          this.color = new _OptionsColor();\n          this.color.value = \"\";\n          this.image = \"\";\n          this.position = \"\";\n          this.repeat = \"\";\n          this.size = \"\";\n          this.opacity = 1;\n        }\n        _createClass(_Background, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.color !== undefined) {\n              this.color = _OptionsColor.create(this.color, data.color);\n            }\n            if (data.image !== undefined) {\n              this.image = data.image;\n            }\n            if (data.position !== undefined) {\n              this.position = data.position;\n            }\n            if (data.repeat !== undefined) {\n              this.repeat = data.repeat;\n            }\n            if (data.size !== undefined) {\n              this.size = data.size;\n            }\n            if (data.opacity !== undefined) {\n              this.opacity = data.opacity;\n            }\n          }\n        }]);\n        return _Background;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/BackgroundMask/BackgroundMaskCover.js\n      var _BackgroundMaskCover = /*#__PURE__*/function () {\n        function _BackgroundMaskCover() {\n          _classCallCheck(this, _BackgroundMaskCover);\n          this.color = new _OptionsColor();\n          this.color.value = \"#fff\";\n          this.opacity = 1;\n        }\n        _createClass(_BackgroundMaskCover, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.color !== undefined) {\n              this.color = _OptionsColor.create(this.color, data.color);\n            }\n            if (data.opacity !== undefined) {\n              this.opacity = data.opacity;\n            }\n          }\n        }]);\n        return _BackgroundMaskCover;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/BackgroundMask/BackgroundMask.js\n      var _BackgroundMask = /*#__PURE__*/function () {\n        function _BackgroundMask() {\n          _classCallCheck(this, _BackgroundMask);\n          this.composite = \"destination-out\";\n          this.cover = new _BackgroundMaskCover();\n          this.enable = false;\n        }\n        _createClass(_BackgroundMask, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.composite !== undefined) {\n              this.composite = data.composite;\n            }\n            if (data.cover !== undefined) {\n              var cover = data.cover;\n              var color = typeof data.cover === \"string\" ? {\n                color: data.cover\n              } : data.cover;\n              this.cover.load(cover.color !== undefined ? cover : {\n                color: color\n              });\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n          }\n        }]);\n        return _BackgroundMask;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/FullScreen/FullScreen.js\n      var _FullScreen = /*#__PURE__*/function () {\n        function _FullScreen() {\n          _classCallCheck(this, _FullScreen);\n          this.enable = true;\n          this.zIndex = 0;\n        }\n        _createClass(_FullScreen, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.zIndex !== undefined) {\n              this.zIndex = data.zIndex;\n            }\n          }\n        }]);\n        return _FullScreen;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Interactivity/Events/ClickEvent.js\n      var _ClickEvent = /*#__PURE__*/function () {\n        function _ClickEvent() {\n          _classCallCheck(this, _ClickEvent);\n          this.enable = false;\n          this.mode = [];\n        }\n        _createClass(_ClickEvent, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.mode !== undefined) {\n              this.mode = data.mode;\n            }\n          }\n        }]);\n        return _ClickEvent;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Interactivity/Events/DivEvent.js\n      var _DivEvent = /*#__PURE__*/function () {\n        function _DivEvent() {\n          _classCallCheck(this, _DivEvent);\n          this.selectors = [];\n          this.enable = false;\n          this.mode = [];\n          this.type = \"circle\";\n        }\n        _createClass(_DivEvent, [{\n          key: \"el\",\n          get: function get() {\n            return this.elementId;\n          },\n          set: function set(value) {\n            this.elementId = value;\n          }\n        }, {\n          key: \"elementId\",\n          get: function get() {\n            return this.ids;\n          },\n          set: function set(value) {\n            this.ids = value;\n          }\n        }, {\n          key: \"ids\",\n          get: function get() {\n            return _executeOnSingleOrMultiple(this.selectors, function (t) {\n              return t.replace(\"#\", \"\");\n            });\n          },\n          set: function set(value) {\n            this.selectors = _executeOnSingleOrMultiple(value, function (t) {\n              return \"#\".concat(t);\n            });\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b;\n            if (!data) {\n              return;\n            }\n            var ids = (_b = (_a = data.ids) !== null && _a !== void 0 ? _a : data.elementId) !== null && _b !== void 0 ? _b : data.el;\n            if (ids !== undefined) {\n              this.ids = ids;\n            }\n            if (data.selectors !== undefined) {\n              this.selectors = data.selectors;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.mode !== undefined) {\n              this.mode = data.mode;\n            }\n            if (data.type !== undefined) {\n              this.type = data.type;\n            }\n          }\n        }]);\n        return _DivEvent;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Interactivity/Events/Parallax.js\n      var _Parallax = /*#__PURE__*/function () {\n        function _Parallax() {\n          _classCallCheck(this, _Parallax);\n          this.enable = false;\n          this.force = 2;\n          this.smooth = 10;\n        }\n        _createClass(_Parallax, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.force !== undefined) {\n              this.force = data.force;\n            }\n            if (data.smooth !== undefined) {\n              this.smooth = data.smooth;\n            }\n          }\n        }]);\n        return _Parallax;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Interactivity/Events/HoverEvent.js\n      var _HoverEvent = /*#__PURE__*/function () {\n        function _HoverEvent() {\n          _classCallCheck(this, _HoverEvent);\n          this.enable = false;\n          this.mode = [];\n          this.parallax = new _Parallax();\n        }\n        _createClass(_HoverEvent, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.mode !== undefined) {\n              this.mode = data.mode;\n            }\n            this.parallax.load(data.parallax);\n          }\n        }]);\n        return _HoverEvent;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Interactivity/Events/ResizeEvent.js\n      var _ResizeEvent = /*#__PURE__*/function () {\n        function _ResizeEvent() {\n          _classCallCheck(this, _ResizeEvent);\n          this.delay = 0.5;\n          this.enable = true;\n        }\n        _createClass(_ResizeEvent, [{\n          key: \"load\",\n          value: function load(data) {\n            if (data === undefined) {\n              return;\n            }\n            if (data.delay !== undefined) {\n              this.delay = data.delay;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n          }\n        }]);\n        return _ResizeEvent;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Interactivity/Events/Events.js\n      var _Events = /*#__PURE__*/function () {\n        function _Events() {\n          _classCallCheck(this, _Events);\n          this.onClick = new _ClickEvent();\n          this.onDiv = new _DivEvent();\n          this.onHover = new _HoverEvent();\n          this.resize = new _ResizeEvent();\n        }\n        _createClass(_Events, [{\n          key: \"onclick\",\n          get: function get() {\n            return this.onClick;\n          },\n          set: function set(value) {\n            this.onClick = value;\n          }\n        }, {\n          key: \"ondiv\",\n          get: function get() {\n            return this.onDiv;\n          },\n          set: function set(value) {\n            this.onDiv = value;\n          }\n        }, {\n          key: \"onhover\",\n          get: function get() {\n            return this.onHover;\n          },\n          set: function set(value) {\n            this.onHover = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b, _c;\n            if (!data) {\n              return;\n            }\n            this.onClick.load((_a = data.onClick) !== null && _a !== void 0 ? _a : data.onclick);\n            var onDiv = (_b = data.onDiv) !== null && _b !== void 0 ? _b : data.ondiv;\n            if (onDiv !== undefined) {\n              this.onDiv = _executeOnSingleOrMultiple(onDiv, function (t) {\n                var tmp = new _DivEvent();\n                tmp.load(t);\n                return tmp;\n              });\n            }\n            this.onHover.load((_c = data.onHover) !== null && _c !== void 0 ? _c : data.onhover);\n            if (typeof data.resize === \"boolean\") {\n              this.resize.enable = data.resize;\n            } else {\n              this.resize.load(data.resize);\n            }\n          }\n        }]);\n        return _Events;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Interactivity/Modes/Modes.js\n      var _Modes = /*#__PURE__*/function () {\n        function _Modes(engine, container) {\n          _classCallCheck(this, _Modes);\n          this._engine = engine;\n          this._container = container;\n        }\n        _createClass(_Modes, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (this._container) {\n              var interactors = this._engine.plugins.interactors.get(this._container);\n              if (interactors) {\n                var _iterator12 = _createForOfIteratorHelper(interactors),\n                  _step12;\n                try {\n                  for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n                    var interactor = _step12.value;\n                    if (interactor.loadModeOptions) {\n                      interactor.loadModeOptions(this, data);\n                    }\n                  }\n                } catch (err) {\n                  _iterator12.e(err);\n                } finally {\n                  _iterator12.f();\n                }\n              }\n            }\n          }\n        }]);\n        return _Modes;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Interactivity/Interactivity.js\n      var _Interactivity = /*#__PURE__*/function () {\n        function _Interactivity(engine, container) {\n          _classCallCheck(this, _Interactivity);\n          this.detectsOn = \"window\";\n          this.events = new _Events();\n          this.modes = new _Modes(engine, container);\n        }\n        _createClass(_Interactivity, [{\n          key: \"detect_on\",\n          get: function get() {\n            return this.detectsOn;\n          },\n          set: function set(value) {\n            this.detectsOn = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a;\n            if (!data) {\n              return;\n            }\n            var detectsOn = (_a = data.detectsOn) !== null && _a !== void 0 ? _a : data.detect_on;\n            if (detectsOn !== undefined) {\n              this.detectsOn = detectsOn;\n            }\n            this.events.load(data.events);\n            this.modes.load(data.modes);\n          }\n        }]);\n        return _Interactivity;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/ManualParticle.js\n      var _ManualParticle = /*#__PURE__*/function () {\n        function _ManualParticle() {\n          _classCallCheck(this, _ManualParticle);\n        }\n        _createClass(_ManualParticle, [{\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b;\n            if (!data) {\n              return;\n            }\n            if (data.position !== undefined) {\n              this.position = {\n                x: (_a = data.position.x) !== null && _a !== void 0 ? _a : 50,\n                y: (_b = data.position.y) !== null && _b !== void 0 ? _b : 50\n              };\n            }\n            if (data.options !== undefined) {\n              this.options = _deepExtend({}, data.options);\n            }\n          }\n        }]);\n        return _ManualParticle;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Responsive.js\n      var _Responsive = /*#__PURE__*/function () {\n        function _Responsive() {\n          _classCallCheck(this, _Responsive);\n          this.maxWidth = Infinity;\n          this.options = {};\n          this.mode = \"canvas\";\n        }\n        _createClass(_Responsive, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.maxWidth !== undefined) {\n              this.maxWidth = data.maxWidth;\n            }\n            if (data.mode !== undefined) {\n              if (data.mode === \"screen\") {\n                this.mode = \"screen\";\n              } else {\n                this.mode = \"canvas\";\n              }\n            }\n            if (data.options !== undefined) {\n              this.options = _deepExtend({}, data.options);\n            }\n          }\n        }]);\n        return _Responsive;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Theme/ThemeDefault.js\n      var _ThemeDefault = /*#__PURE__*/function () {\n        function _ThemeDefault() {\n          _classCallCheck(this, _ThemeDefault);\n          this.auto = false;\n          this.mode = \"any\";\n          this.value = false;\n        }\n        _createClass(_ThemeDefault, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.auto !== undefined) {\n              this.auto = data.auto;\n            }\n            if (data.mode !== undefined) {\n              this.mode = data.mode;\n            }\n            if (data.value !== undefined) {\n              this.value = data.value;\n            }\n          }\n        }]);\n        return _ThemeDefault;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Theme/Theme.js\n      var _Theme = /*#__PURE__*/function () {\n        function _Theme() {\n          _classCallCheck(this, _Theme);\n          this.name = \"\";\n          this[\"default\"] = new _ThemeDefault();\n        }\n        _createClass(_Theme, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.name !== undefined) {\n              this.name = data.name;\n            }\n            this[\"default\"].load(data[\"default\"]);\n            if (data.options !== undefined) {\n              this.options = _deepExtend({}, data.options);\n            }\n          }\n        }]);\n        return _Theme;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/ColorAnimation.js\n      var _ColorAnimation = /*#__PURE__*/function () {\n        function _ColorAnimation() {\n          _classCallCheck(this, _ColorAnimation);\n          this.count = 0;\n          this.enable = false;\n          this.offset = 0;\n          this.speed = 1;\n          this.decay = 0;\n          this.sync = true;\n        }\n        _createClass(_ColorAnimation, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.count !== undefined) {\n              this.count = _setRangeValue(data.count);\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.offset !== undefined) {\n              this.offset = _setRangeValue(data.offset);\n            }\n            if (data.speed !== undefined) {\n              this.speed = _setRangeValue(data.speed);\n            }\n            if (data.decay !== undefined) {\n              this.decay = _setRangeValue(data.decay);\n            }\n            if (data.sync !== undefined) {\n              this.sync = data.sync;\n            }\n          }\n        }]);\n        return _ColorAnimation;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/HslAnimation.js\n      var _HslAnimation = /*#__PURE__*/function () {\n        function _HslAnimation() {\n          _classCallCheck(this, _HslAnimation);\n          this.h = new _ColorAnimation();\n          this.s = new _ColorAnimation();\n          this.l = new _ColorAnimation();\n        }\n        _createClass(_HslAnimation, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            this.h.load(data.h);\n            this.s.load(data.s);\n            this.l.load(data.l);\n          }\n        }]);\n        return _HslAnimation;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/AnimatableColor.js\n      var _AnimatableColor = /*#__PURE__*/function (_OptionsColor2) {\n        _inherits(_AnimatableColor, _OptionsColor2);\n        var _super2 = _createSuper(_AnimatableColor);\n        function _AnimatableColor() {\n          var _this13;\n          _classCallCheck(this, _AnimatableColor);\n          _this13 = _super2.call(this);\n          _this13.animation = new _HslAnimation();\n          return _this13;\n        }\n        _createClass(_AnimatableColor, [{\n          key: \"load\",\n          value: function load(data) {\n            _get(_getPrototypeOf(_AnimatableColor.prototype), \"load\", this).call(this, data);\n            if (!data) {\n              return;\n            }\n            var colorAnimation = data.animation;\n            if (colorAnimation !== undefined) {\n              if (colorAnimation.enable !== undefined) {\n                this.animation.h.load(colorAnimation);\n              } else {\n                this.animation.load(data.animation);\n              }\n            }\n          }\n        }], [{\n          key: \"create\",\n          value: function create(source, data) {\n            var color = new _AnimatableColor();\n            color.load(source);\n            if (data !== undefined) {\n              if (typeof data === \"string\" || data instanceof Array) {\n                color.load({\n                  value: data\n                });\n              } else {\n                color.load(data);\n              }\n            }\n            return color;\n          }\n        }]);\n        return _AnimatableColor;\n      }(_OptionsColor);\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Collisions/CollisionsAbsorb.js\n      var _CollisionsAbsorb = /*#__PURE__*/function () {\n        function _CollisionsAbsorb() {\n          _classCallCheck(this, _CollisionsAbsorb);\n          this.speed = 2;\n        }\n        _createClass(_CollisionsAbsorb, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.speed !== undefined) {\n              this.speed = data.speed;\n            }\n          }\n        }]);\n        return _CollisionsAbsorb;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Collisions/CollisionsOverlap.js\n      var _CollisionsOverlap = /*#__PURE__*/function () {\n        function _CollisionsOverlap() {\n          _classCallCheck(this, _CollisionsOverlap);\n          this.enable = true;\n          this.retries = 0;\n        }\n        _createClass(_CollisionsOverlap, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.retries !== undefined) {\n              this.retries = data.retries;\n            }\n          }\n        }]);\n        return _CollisionsOverlap;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Random.js\n      var Random = /*#__PURE__*/function () {\n        function Random() {\n          _classCallCheck(this, Random);\n          this.enable = false;\n          this.minimumValue = 0;\n        }\n        _createClass(Random, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.minimumValue !== undefined) {\n              this.minimumValue = data.minimumValue;\n            }\n          }\n        }]);\n        return Random;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/ValueWithRandom.js\n      var _ValueWithRandom = /*#__PURE__*/function () {\n        function _ValueWithRandom() {\n          _classCallCheck(this, _ValueWithRandom);\n          this.random = new Random();\n          this.value = 0;\n        }\n        _createClass(_ValueWithRandom, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (typeof data.random === \"boolean\") {\n              this.random.enable = data.random;\n            } else {\n              this.random.load(data.random);\n            }\n            if (data.value !== undefined) {\n              this.value = _setRangeValue(data.value, this.random.enable ? this.random.minimumValue : undefined);\n            }\n          }\n        }]);\n        return _ValueWithRandom;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Bounce/ParticlesBounceFactor.js\n      var _ParticlesBounceFactor = /*#__PURE__*/function (_ValueWithRandom2) {\n        _inherits(_ParticlesBounceFactor, _ValueWithRandom2);\n        var _super3 = _createSuper(_ParticlesBounceFactor);\n        function _ParticlesBounceFactor() {\n          var _this14;\n          _classCallCheck(this, _ParticlesBounceFactor);\n          _this14 = _super3.call(this);\n          _this14.random.minimumValue = 0.1;\n          _this14.value = 1;\n          return _this14;\n        }\n        return _createClass(_ParticlesBounceFactor);\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Bounce/ParticlesBounce.js\n      var _ParticlesBounce = /*#__PURE__*/function () {\n        function _ParticlesBounce() {\n          _classCallCheck(this, _ParticlesBounce);\n          this.horizontal = new _ParticlesBounceFactor();\n          this.vertical = new _ParticlesBounceFactor();\n        }\n        _createClass(_ParticlesBounce, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            this.horizontal.load(data.horizontal);\n            this.vertical.load(data.vertical);\n          }\n        }]);\n        return _ParticlesBounce;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Collisions/Collisions.js\n      var _Collisions = /*#__PURE__*/function () {\n        function _Collisions() {\n          _classCallCheck(this, _Collisions);\n          this.absorb = new _CollisionsAbsorb();\n          this.bounce = new _ParticlesBounce();\n          this.enable = false;\n          this.mode = \"bounce\";\n          this.overlap = new _CollisionsOverlap();\n        }\n        _createClass(_Collisions, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            this.absorb.load(data.absorb);\n            this.bounce.load(data.bounce);\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.mode !== undefined) {\n              this.mode = data.mode;\n            }\n            this.overlap.load(data.overlap);\n          }\n        }]);\n        return _Collisions;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Move/MoveAngle.js\n      var _MoveAngle = /*#__PURE__*/function () {\n        function _MoveAngle() {\n          _classCallCheck(this, _MoveAngle);\n          this.offset = 0;\n          this.value = 90;\n        }\n        _createClass(_MoveAngle, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.offset !== undefined) {\n              this.offset = _setRangeValue(data.offset);\n            }\n            if (data.value !== undefined) {\n              this.value = _setRangeValue(data.value);\n            }\n          }\n        }]);\n        return _MoveAngle;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Move/MoveAttract.js\n      var _MoveAttract = /*#__PURE__*/function () {\n        function _MoveAttract() {\n          _classCallCheck(this, _MoveAttract);\n          this.distance = 200;\n          this.enable = false;\n          this.rotate = {\n            x: 3000,\n            y: 3000\n          };\n        }\n        _createClass(_MoveAttract, [{\n          key: \"rotateX\",\n          get: function get() {\n            return this.rotate.x;\n          },\n          set: function set(value) {\n            this.rotate.x = value;\n          }\n        }, {\n          key: \"rotateY\",\n          get: function get() {\n            return this.rotate.y;\n          },\n          set: function set(value) {\n            this.rotate.y = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b, _c, _d;\n            if (!data) {\n              return;\n            }\n            if (data.distance !== undefined) {\n              this.distance = _setRangeValue(data.distance);\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            var rotateX = (_b = (_a = data.rotate) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : data.rotateX;\n            if (rotateX !== undefined) {\n              this.rotate.x = rotateX;\n            }\n            var rotateY = (_d = (_c = data.rotate) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : data.rotateY;\n            if (rotateY !== undefined) {\n              this.rotate.y = rotateY;\n            }\n          }\n        }]);\n        return _MoveAttract;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Move/MoveCenter.js\n      var _MoveCenter = /*#__PURE__*/function () {\n        function _MoveCenter() {\n          _classCallCheck(this, _MoveCenter);\n          this.x = 50;\n          this.y = 50;\n          this.mode = \"percent\";\n          this.radius = 0;\n        }\n        _createClass(_MoveCenter, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.x !== undefined) {\n              this.x = data.x;\n            }\n            if (data.y !== undefined) {\n              this.y = data.y;\n            }\n            if (data.mode !== undefined) {\n              this.mode = data.mode;\n            }\n            if (data.radius !== undefined) {\n              this.radius = data.radius;\n            }\n          }\n        }]);\n        return _MoveCenter;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Move/MoveGravity.js\n      var _MoveGravity = /*#__PURE__*/function () {\n        function _MoveGravity() {\n          _classCallCheck(this, _MoveGravity);\n          this.acceleration = 9.81;\n          this.enable = false;\n          this.inverse = false;\n          this.maxSpeed = 50;\n        }\n        _createClass(_MoveGravity, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.acceleration !== undefined) {\n              this.acceleration = _setRangeValue(data.acceleration);\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.inverse !== undefined) {\n              this.inverse = data.inverse;\n            }\n            if (data.maxSpeed !== undefined) {\n              this.maxSpeed = _setRangeValue(data.maxSpeed);\n            }\n          }\n        }]);\n        return _MoveGravity;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Move/Path/MovePath.js\n      var _MovePath = /*#__PURE__*/function () {\n        function _MovePath() {\n          _classCallCheck(this, _MovePath);\n          this.clamp = true;\n          this.delay = new _ValueWithRandom();\n          this.enable = false;\n          this.options = {};\n        }\n        _createClass(_MovePath, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.clamp !== undefined) {\n              this.clamp = data.clamp;\n            }\n            this.delay.load(data.delay);\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            this.generator = data.generator;\n            if (data.options) {\n              this.options = _deepExtend(this.options, data.options);\n            }\n          }\n        }]);\n        return _MovePath;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Move/MoveTrailFill.js\n      var MoveTrailFill = /*#__PURE__*/function () {\n        function MoveTrailFill() {\n          _classCallCheck(this, MoveTrailFill);\n        }\n        _createClass(MoveTrailFill, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.color !== undefined) {\n              this.color = _OptionsColor.create(this.color, data.color);\n            }\n            if (data.image !== undefined) {\n              this.image = data.image;\n            }\n          }\n        }]);\n        return MoveTrailFill;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Move/MoveTrail.js\n      var _MoveTrail = /*#__PURE__*/function () {\n        function _MoveTrail() {\n          _classCallCheck(this, _MoveTrail);\n          this.enable = false;\n          this.length = 10;\n          this.fill = new MoveTrailFill();\n        }\n        _createClass(_MoveTrail, [{\n          key: \"fillColor\",\n          get: function get() {\n            return this.fill.color;\n          },\n          set: function set(value) {\n            this.fill.load({\n              color: value\n            });\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.fill !== undefined || data.fillColor !== undefined) {\n              this.fill.load(data.fill || {\n                color: data.fillColor\n              });\n            }\n            if (data.length !== undefined) {\n              this.length = data.length;\n            }\n          }\n        }]);\n        return _MoveTrail;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Move/OutModes.js\n      var _OutModes = /*#__PURE__*/function () {\n        function _OutModes() {\n          _classCallCheck(this, _OutModes);\n          this[\"default\"] = \"out\";\n        }\n        _createClass(_OutModes, [{\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b, _c, _d;\n            if (!data) {\n              return;\n            }\n            if (data[\"default\"] !== undefined) {\n              this[\"default\"] = data[\"default\"];\n            }\n            this.bottom = (_a = data.bottom) !== null && _a !== void 0 ? _a : data[\"default\"];\n            this.left = (_b = data.left) !== null && _b !== void 0 ? _b : data[\"default\"];\n            this.right = (_c = data.right) !== null && _c !== void 0 ? _c : data[\"default\"];\n            this.top = (_d = data.top) !== null && _d !== void 0 ? _d : data[\"default\"];\n          }\n        }]);\n        return _OutModes;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Move/Spin.js\n      var _Spin = /*#__PURE__*/function () {\n        function _Spin() {\n          _classCallCheck(this, _Spin);\n          this.acceleration = 0;\n          this.enable = false;\n        }\n        _createClass(_Spin, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.acceleration !== undefined) {\n              this.acceleration = _setRangeValue(data.acceleration);\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            this.position = data.position ? _deepExtend({}, data.position) : undefined;\n          }\n        }]);\n        return _Spin;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Move/Move.js\n      var _Move = /*#__PURE__*/function () {\n        function _Move() {\n          _classCallCheck(this, _Move);\n          this.angle = new _MoveAngle();\n          this.attract = new _MoveAttract();\n          this.center = new _MoveCenter();\n          this.decay = 0;\n          this.distance = {};\n          this.direction = \"none\";\n          this.drift = 0;\n          this.enable = false;\n          this.gravity = new _MoveGravity();\n          this.path = new _MovePath();\n          this.outModes = new _OutModes();\n          this.random = false;\n          this.size = false;\n          this.speed = 2;\n          this.spin = new _Spin();\n          this.straight = false;\n          this.trail = new _MoveTrail();\n          this.vibrate = false;\n          this.warp = false;\n        }\n        _createClass(_Move, [{\n          key: \"bounce\",\n          get: function get() {\n            return this.collisions;\n          },\n          set: function set(value) {\n            this.collisions = value;\n          }\n        }, {\n          key: \"collisions\",\n          get: function get() {\n            return false;\n          },\n          set: function set(_) {}\n        }, {\n          key: \"noise\",\n          get: function get() {\n            return this.path;\n          },\n          set: function set(value) {\n            this.path = value;\n          }\n        }, {\n          key: \"outMode\",\n          get: function get() {\n            return this.outModes[\"default\"];\n          },\n          set: function set(value) {\n            this.outModes[\"default\"] = value;\n          }\n        }, {\n          key: \"out_mode\",\n          get: function get() {\n            return this.outMode;\n          },\n          set: function set(value) {\n            this.outMode = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b, _c;\n            if (!data) {\n              return;\n            }\n            this.angle.load(typeof data.angle === \"number\" ? {\n              value: data.angle\n            } : data.angle);\n            this.attract.load(data.attract);\n            this.center.load(data.center);\n            if (data.decay !== undefined) {\n              this.decay = _setRangeValue(data.decay);\n            }\n            if (data.direction !== undefined) {\n              this.direction = data.direction;\n            }\n            if (data.distance !== undefined) {\n              this.distance = typeof data.distance === \"number\" ? {\n                horizontal: data.distance,\n                vertical: data.distance\n              } : Object.assign({}, data.distance);\n            }\n            if (data.drift !== undefined) {\n              this.drift = _setRangeValue(data.drift);\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            this.gravity.load(data.gravity);\n            var outModes = (_b = (_a = data.outModes) !== null && _a !== void 0 ? _a : data.outMode) !== null && _b !== void 0 ? _b : data.out_mode;\n            if (outModes !== undefined) {\n              if (_typeof(outModes) === \"object\") {\n                this.outModes.load(outModes);\n              } else {\n                this.outModes.load({\n                  \"default\": outModes\n                });\n              }\n            }\n            this.path.load((_c = data.path) !== null && _c !== void 0 ? _c : data.noise);\n            if (data.random !== undefined) {\n              this.random = data.random;\n            }\n            if (data.size !== undefined) {\n              this.size = data.size;\n            }\n            if (data.speed !== undefined) {\n              this.speed = _setRangeValue(data.speed);\n            }\n            this.spin.load(data.spin);\n            if (data.straight !== undefined) {\n              this.straight = data.straight;\n            }\n            this.trail.load(data.trail);\n            if (data.vibrate !== undefined) {\n              this.vibrate = data.vibrate;\n            }\n            if (data.warp !== undefined) {\n              this.warp = data.warp;\n            }\n          }\n        }]);\n        return _Move;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/AnimationOptions.js\n      var _AnimationOptions = /*#__PURE__*/function () {\n        function _AnimationOptions() {\n          _classCallCheck(this, _AnimationOptions);\n          this.count = 0;\n          this.enable = false;\n          this.speed = 1;\n          this.decay = 0;\n          this.sync = false;\n        }\n        _createClass(_AnimationOptions, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.count !== undefined) {\n              this.count = _setRangeValue(data.count);\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.speed !== undefined) {\n              this.speed = _setRangeValue(data.speed);\n            }\n            if (data.decay !== undefined) {\n              this.decay = _setRangeValue(data.decay);\n            }\n            if (data.sync !== undefined) {\n              this.sync = data.sync;\n            }\n          }\n        }]);\n        return _AnimationOptions;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Opacity/OpacityAnimation.js\n      var _OpacityAnimation = /*#__PURE__*/function (_AnimationOptions2) {\n        _inherits(_OpacityAnimation, _AnimationOptions2);\n        var _super4 = _createSuper(_OpacityAnimation);\n        function _OpacityAnimation() {\n          var _this15;\n          _classCallCheck(this, _OpacityAnimation);\n          _this15 = _super4.call(this);\n          _this15.destroy = \"none\";\n          _this15.enable = false;\n          _this15.speed = 2;\n          _this15.startValue = \"random\";\n          _this15.sync = false;\n          return _this15;\n        }\n        _createClass(_OpacityAnimation, [{\n          key: \"opacity_min\",\n          get: function get() {\n            return this.minimumValue;\n          },\n          set: function set(value) {\n            this.minimumValue = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a;\n            if (!data) {\n              return;\n            }\n            _get(_getPrototypeOf(_OpacityAnimation.prototype), \"load\", this).call(this, data);\n            if (data.destroy !== undefined) {\n              this.destroy = data.destroy;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            this.minimumValue = (_a = data.minimumValue) !== null && _a !== void 0 ? _a : data.opacity_min;\n            if (data.speed !== undefined) {\n              this.speed = data.speed;\n            }\n            if (data.startValue !== undefined) {\n              this.startValue = data.startValue;\n            }\n            if (data.sync !== undefined) {\n              this.sync = data.sync;\n            }\n          }\n        }]);\n        return _OpacityAnimation;\n      }(_AnimationOptions);\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Opacity/Opacity.js\n      var _Opacity = /*#__PURE__*/function (_ValueWithRandom3) {\n        _inherits(_Opacity, _ValueWithRandom3);\n        var _super5 = _createSuper(_Opacity);\n        function _Opacity() {\n          var _this16;\n          _classCallCheck(this, _Opacity);\n          _this16 = _super5.call(this);\n          _this16.animation = new _OpacityAnimation();\n          _this16.random.minimumValue = 0.1;\n          _this16.value = 1;\n          return _this16;\n        }\n        _createClass(_Opacity, [{\n          key: \"anim\",\n          get: function get() {\n            return this.animation;\n          },\n          set: function set(value) {\n            this.animation = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a;\n            if (!data) {\n              return;\n            }\n            _get(_getPrototypeOf(_Opacity.prototype), \"load\", this).call(this, data);\n            var animation = (_a = data.animation) !== null && _a !== void 0 ? _a : data.anim;\n            if (animation !== undefined) {\n              this.animation.load(animation);\n              this.value = _setRangeValue(this.value, this.animation.enable ? this.animation.minimumValue : undefined);\n            }\n          }\n        }]);\n        return _Opacity;\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Number/ParticlesDensity.js\n      var _ParticlesDensity = /*#__PURE__*/function () {\n        function _ParticlesDensity() {\n          _classCallCheck(this, _ParticlesDensity);\n          this.enable = false;\n          this.width = 1920;\n          this.height = 1080;\n        }\n        _createClass(_ParticlesDensity, [{\n          key: \"area\",\n          get: function get() {\n            return this.width;\n          },\n          set: function set(value) {\n            this.width = value;\n          }\n        }, {\n          key: \"factor\",\n          get: function get() {\n            return this.height;\n          },\n          set: function set(value) {\n            this.height = value;\n          }\n        }, {\n          key: \"value_area\",\n          get: function get() {\n            return this.area;\n          },\n          set: function set(value) {\n            this.area = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b, _c;\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            var width = (_b = (_a = data.width) !== null && _a !== void 0 ? _a : data.area) !== null && _b !== void 0 ? _b : data.value_area;\n            if (width !== undefined) {\n              this.width = width;\n            }\n            var height = (_c = data.height) !== null && _c !== void 0 ? _c : data.factor;\n            if (height !== undefined) {\n              this.height = height;\n            }\n          }\n        }]);\n        return _ParticlesDensity;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Number/ParticlesNumber.js\n      var _ParticlesNumber = /*#__PURE__*/function () {\n        function _ParticlesNumber() {\n          _classCallCheck(this, _ParticlesNumber);\n          this.density = new _ParticlesDensity();\n          this.limit = 0;\n          this.value = 100;\n        }\n        _createClass(_ParticlesNumber, [{\n          key: \"max\",\n          get: function get() {\n            return this.limit;\n          },\n          set: function set(value) {\n            this.limit = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a;\n            if (!data) {\n              return;\n            }\n            this.density.load(data.density);\n            var limit = (_a = data.limit) !== null && _a !== void 0 ? _a : data.max;\n            if (limit !== undefined) {\n              this.limit = limit;\n            }\n            if (data.value !== undefined) {\n              this.value = data.value;\n            }\n          }\n        }]);\n        return _ParticlesNumber;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Shadow.js\n      var _Shadow = /*#__PURE__*/function () {\n        function _Shadow() {\n          _classCallCheck(this, _Shadow);\n          this.blur = 0;\n          this.color = new _OptionsColor();\n          this.enable = false;\n          this.offset = {\n            x: 0,\n            y: 0\n          };\n          this.color.value = \"#000\";\n        }\n        _createClass(_Shadow, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.blur !== undefined) {\n              this.blur = data.blur;\n            }\n            this.color = _OptionsColor.create(this.color, data.color);\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.offset === undefined) {\n              return;\n            }\n            if (data.offset.x !== undefined) {\n              this.offset.x = data.offset.x;\n            }\n            if (data.offset.y !== undefined) {\n              this.offset.y = data.offset.y;\n            }\n          }\n        }]);\n        return _Shadow;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Shape/Shape.js\n\n      var charKey = \"character\",\n        charAltKey = \"char\",\n        imageKey = \"image\",\n        imageAltKey = \"images\",\n        polygonKey = \"polygon\",\n        polygonAltKey = \"star\";\n      var _Shape = /*#__PURE__*/function () {\n        function _Shape() {\n          _classCallCheck(this, _Shape);\n          this.options = {};\n          this.type = \"circle\";\n        }\n        _createClass(_Shape, [{\n          key: \"character\",\n          get: function get() {\n            var _a;\n            return (_a = this.options[charKey]) !== null && _a !== void 0 ? _a : this.options[charAltKey];\n          },\n          set: function set(value) {\n            this.options[charAltKey] = this.options[charKey] = value;\n          }\n        }, {\n          key: \"custom\",\n          get: function get() {\n            return this.options;\n          },\n          set: function set(value) {\n            this.options = value;\n          }\n        }, {\n          key: \"image\",\n          get: function get() {\n            var _a;\n            return (_a = this.options[imageKey]) !== null && _a !== void 0 ? _a : this.options[imageAltKey];\n          },\n          set: function set(value) {\n            this.options[imageAltKey] = this.options[imageKey] = value;\n          }\n        }, {\n          key: \"images\",\n          get: function get() {\n            return this.image;\n          },\n          set: function set(value) {\n            this.image = value;\n          }\n        }, {\n          key: \"polygon\",\n          get: function get() {\n            var _a;\n            return (_a = this.options[polygonKey]) !== null && _a !== void 0 ? _a : this.options[polygonAltKey];\n          },\n          set: function set(value) {\n            this.options[polygonAltKey] = this.options[polygonKey] = value;\n          }\n        }, {\n          key: \"stroke\",\n          get: function get() {\n            return [];\n          },\n          set: function set(_value) {}\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b, _c;\n            if (!data) {\n              return;\n            }\n            var options = (_a = data.options) !== null && _a !== void 0 ? _a : data.custom;\n            if (options !== undefined) {\n              for (var shape in options) {\n                var item = options[shape];\n                if (item) {\n                  this.options[shape] = _deepExtend((_b = this.options[shape]) !== null && _b !== void 0 ? _b : {}, item);\n                }\n              }\n            }\n            this.loadShape(data.character, charKey, charAltKey, true);\n            this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n            this.loadShape((_c = data.image) !== null && _c !== void 0 ? _c : data.images, imageKey, imageAltKey, true);\n            if (data.type !== undefined) {\n              this.type = data.type;\n            }\n          }\n        }, {\n          key: \"loadShape\",\n          value: function loadShape(item, mainKey, altKey, altOverride) {\n            var _a, _b;\n            if (!item) {\n              return;\n            }\n            var isArray = item instanceof Array;\n            var emptyValue = isArray ? [] : {},\n              mainDifferentValues = isArray !== this.options[mainKey] instanceof Array,\n              altDifferentValues = isArray !== this.options[altKey] instanceof Array;\n            if (mainDifferentValues) {\n              this.options[mainKey] = emptyValue;\n            }\n            if (altDifferentValues && altOverride) {\n              this.options[altKey] = emptyValue;\n            }\n            this.options[mainKey] = _deepExtend((_a = this.options[mainKey]) !== null && _a !== void 0 ? _a : emptyValue, item);\n            if (!this.options[altKey] || altOverride) {\n              this.options[altKey] = _deepExtend((_b = this.options[altKey]) !== null && _b !== void 0 ? _b : emptyValue, item);\n            }\n          }\n        }]);\n        return _Shape;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Size/SizeAnimation.js\n      var _SizeAnimation = /*#__PURE__*/function (_AnimationOptions3) {\n        _inherits(_SizeAnimation, _AnimationOptions3);\n        var _super6 = _createSuper(_SizeAnimation);\n        function _SizeAnimation() {\n          var _this17;\n          _classCallCheck(this, _SizeAnimation);\n          _this17 = _super6.call(this);\n          _this17.destroy = \"none\";\n          _this17.enable = false;\n          _this17.speed = 5;\n          _this17.startValue = \"random\";\n          _this17.sync = false;\n          return _this17;\n        }\n        _createClass(_SizeAnimation, [{\n          key: \"size_min\",\n          get: function get() {\n            return this.minimumValue;\n          },\n          set: function set(value) {\n            this.minimumValue = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a;\n            _get(_getPrototypeOf(_SizeAnimation.prototype), \"load\", this).call(this, data);\n            if (!data) {\n              return;\n            }\n            if (data.destroy !== undefined) {\n              this.destroy = data.destroy;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            this.minimumValue = (_a = data.minimumValue) !== null && _a !== void 0 ? _a : data.size_min;\n            if (data.speed !== undefined) {\n              this.speed = data.speed;\n            }\n            if (data.startValue !== undefined) {\n              this.startValue = data.startValue;\n            }\n            if (data.sync !== undefined) {\n              this.sync = data.sync;\n            }\n          }\n        }]);\n        return _SizeAnimation;\n      }(_AnimationOptions);\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Size/Size.js\n      var _Size = /*#__PURE__*/function (_ValueWithRandom4) {\n        _inherits(_Size, _ValueWithRandom4);\n        var _super7 = _createSuper(_Size);\n        function _Size() {\n          var _this18;\n          _classCallCheck(this, _Size);\n          _this18 = _super7.call(this);\n          _this18.animation = new _SizeAnimation();\n          _this18.random.minimumValue = 1;\n          _this18.value = 3;\n          return _this18;\n        }\n        _createClass(_Size, [{\n          key: \"anim\",\n          get: function get() {\n            return this.animation;\n          },\n          set: function set(value) {\n            this.animation = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a;\n            _get(_getPrototypeOf(_Size.prototype), \"load\", this).call(this, data);\n            if (!data) {\n              return;\n            }\n            var animation = (_a = data.animation) !== null && _a !== void 0 ? _a : data.anim;\n            if (animation !== undefined) {\n              this.animation.load(animation);\n              this.value = _setRangeValue(this.value, this.animation.enable ? this.animation.minimumValue : undefined);\n            }\n          }\n        }]);\n        return _Size;\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/Stroke.js\n      var _Stroke = /*#__PURE__*/function () {\n        function _Stroke() {\n          _classCallCheck(this, _Stroke);\n          this.width = 0;\n        }\n        _createClass(_Stroke, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.color !== undefined) {\n              this.color = _AnimatableColor.create(this.color, data.color);\n            }\n            if (data.width !== undefined) {\n              this.width = _setRangeValue(data.width);\n            }\n            if (data.opacity !== undefined) {\n              this.opacity = _setRangeValue(data.opacity);\n            }\n          }\n        }]);\n        return _Stroke;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/ZIndex/ZIndex.js\n      var _ZIndex = /*#__PURE__*/function (_ValueWithRandom5) {\n        _inherits(_ZIndex, _ValueWithRandom5);\n        var _super8 = _createSuper(_ZIndex);\n        function _ZIndex() {\n          var _this19;\n          _classCallCheck(this, _ZIndex);\n          _this19 = _super8.call(this);\n          _this19.opacityRate = 1;\n          _this19.sizeRate = 1;\n          _this19.velocityRate = 1;\n          return _this19;\n        }\n        _createClass(_ZIndex, [{\n          key: \"load\",\n          value: function load(data) {\n            _get(_getPrototypeOf(_ZIndex.prototype), \"load\", this).call(this, data);\n            if (!data) {\n              return;\n            }\n            if (data.opacityRate !== undefined) {\n              this.opacityRate = data.opacityRate;\n            }\n            if (data.sizeRate !== undefined) {\n              this.sizeRate = data.sizeRate;\n            }\n            if (data.velocityRate !== undefined) {\n              this.velocityRate = data.velocityRate;\n            }\n          }\n        }]);\n        return _ZIndex;\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Particles/ParticlesOptions.js\n      var _ParticlesOptions = /*#__PURE__*/function () {\n        function _ParticlesOptions(engine, container) {\n          _classCallCheck(this, _ParticlesOptions);\n          this._engine = engine;\n          this._container = container;\n          this.bounce = new _ParticlesBounce();\n          this.collisions = new _Collisions();\n          this.color = new _AnimatableColor();\n          this.color.value = \"#fff\";\n          this.groups = {};\n          this.move = new _Move();\n          this.number = new _ParticlesNumber();\n          this.opacity = new _Opacity();\n          this.reduceDuplicates = false;\n          this.shadow = new _Shadow();\n          this.shape = new _Shape();\n          this.size = new _Size();\n          this.stroke = new _Stroke();\n          this.zIndex = new _ZIndex();\n        }\n        _createClass(_ParticlesOptions, [{\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b, _c, _d, _e, _f;\n            if (!data) {\n              return;\n            }\n            this.bounce.load(data.bounce);\n            this.color.load(_AnimatableColor.create(this.color, data.color));\n            if (data.groups !== undefined) {\n              for (var group in data.groups) {\n                var item = data.groups[group];\n                if (item !== undefined) {\n                  this.groups[group] = _deepExtend((_a = this.groups[group]) !== null && _a !== void 0 ? _a : {}, item);\n                }\n              }\n            }\n            this.move.load(data.move);\n            this.number.load(data.number);\n            this.opacity.load(data.opacity);\n            if (data.reduceDuplicates !== undefined) {\n              this.reduceDuplicates = data.reduceDuplicates;\n            }\n            this.shape.load(data.shape);\n            this.size.load(data.size);\n            this.shadow.load(data.shadow);\n            this.zIndex.load(data.zIndex);\n            var collisions = (_c = (_b = data.move) === null || _b === void 0 ? void 0 : _b.collisions) !== null && _c !== void 0 ? _c : (_d = data.move) === null || _d === void 0 ? void 0 : _d.bounce;\n            if (collisions !== undefined) {\n              this.collisions.enable = collisions;\n            }\n            this.collisions.load(data.collisions);\n            if (data.interactivity !== undefined) {\n              this.interactivity = _deepExtend({}, data.interactivity);\n            }\n            var strokeToLoad = (_e = data.stroke) !== null && _e !== void 0 ? _e : (_f = data.shape) === null || _f === void 0 ? void 0 : _f.stroke;\n            if (strokeToLoad) {\n              this.stroke = _executeOnSingleOrMultiple(strokeToLoad, function (t) {\n                var tmp = new _Stroke();\n                tmp.load(t);\n                return tmp;\n              });\n            }\n            if (this._container) {\n              var updaters = this._engine.plugins.updaters.get(this._container);\n              if (updaters) {\n                var _iterator13 = _createForOfIteratorHelper(updaters),\n                  _step13;\n                try {\n                  for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n                    var updater = _step13.value;\n                    if (updater.loadOptions) {\n                      updater.loadOptions(this, data);\n                    }\n                  }\n                } catch (err) {\n                  _iterator13.e(err);\n                } finally {\n                  _iterator13.f();\n                }\n              }\n              var interactors = this._engine.plugins.interactors.get(this._container);\n              if (interactors) {\n                var _iterator14 = _createForOfIteratorHelper(interactors),\n                  _step14;\n                try {\n                  for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n                    var interactor = _step14.value;\n                    if (interactor.loadParticlesOptions) {\n                      interactor.loadParticlesOptions(this, data);\n                    }\n                  }\n                } catch (err) {\n                  _iterator14.e(err);\n                } finally {\n                  _iterator14.f();\n                }\n              }\n            }\n          }\n        }]);\n        return _ParticlesOptions;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Utils/OptionsUtils.js\n\n      function _loadOptions(options) {\n        for (var _len2 = arguments.length, sourceOptionsArr = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          sourceOptionsArr[_key2 - 1] = arguments[_key2];\n        }\n        for (var _i2 = 0, _sourceOptionsArr = sourceOptionsArr; _i2 < _sourceOptionsArr.length; _i2++) {\n          var sourceOptions = _sourceOptionsArr[_i2];\n          options.load(sourceOptions);\n        }\n      }\n      function _loadParticlesOptions(engine, container) {\n        var options = new _ParticlesOptions(engine, container);\n        for (var _len3 = arguments.length, sourceOptionsArr = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n          sourceOptionsArr[_key3 - 2] = arguments[_key3];\n        }\n        _loadOptions.apply(void 0, [options].concat(sourceOptionsArr));\n        return options;\n      }\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Options/Classes/Options.js\n      var _Options = /*#__PURE__*/function () {\n        function _Options(engine, container) {\n          _classCallCheck(this, _Options);\n          this._engine = engine;\n          this._container = container;\n          this.autoPlay = true;\n          this.background = new _Background();\n          this.backgroundMask = new _BackgroundMask();\n          this.defaultThemes = {};\n          this.delay = 0;\n          this.fullScreen = new _FullScreen();\n          this.detectRetina = true;\n          this.duration = 0;\n          this.fpsLimit = 120;\n          this.interactivity = new _Interactivity(engine, container);\n          this.manualParticles = [];\n          this.particles = _loadParticlesOptions(this._engine, this._container);\n          this.pauseOnBlur = true;\n          this.pauseOnOutsideViewport = true;\n          this.responsive = [];\n          this.smooth = false;\n          this.style = {};\n          this.themes = [];\n          this.zLayers = 100;\n        }\n        _createClass(_Options, [{\n          key: \"backgroundMode\",\n          get: function get() {\n            return this.fullScreen;\n          },\n          set: function set(value) {\n            this.fullScreen.load(value);\n          }\n        }, {\n          key: \"fps_limit\",\n          get: function get() {\n            return this.fpsLimit;\n          },\n          set: function set(value) {\n            this.fpsLimit = value;\n          }\n        }, {\n          key: \"retina_detect\",\n          get: function get() {\n            return this.detectRetina;\n          },\n          set: function set(value) {\n            this.detectRetina = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _this20 = this;\n            var _a, _b, _c, _d, _e;\n            if (!data) {\n              return;\n            }\n            if (data.preset !== undefined) {\n              _executeOnSingleOrMultiple(data.preset, function (preset) {\n                return _this20._importPreset(preset);\n              });\n            }\n            if (data.autoPlay !== undefined) {\n              this.autoPlay = data.autoPlay;\n            }\n            if (data.delay !== undefined) {\n              this.delay = _setRangeValue(data.delay);\n            }\n            var detectRetina = (_a = data.detectRetina) !== null && _a !== void 0 ? _a : data.retina_detect;\n            if (detectRetina !== undefined) {\n              this.detectRetina = detectRetina;\n            }\n            if (data.duration !== undefined) {\n              this.duration = _setRangeValue(data.duration);\n            }\n            var fpsLimit = (_b = data.fpsLimit) !== null && _b !== void 0 ? _b : data.fps_limit;\n            if (fpsLimit !== undefined) {\n              this.fpsLimit = fpsLimit;\n            }\n            if (data.pauseOnBlur !== undefined) {\n              this.pauseOnBlur = data.pauseOnBlur;\n            }\n            if (data.pauseOnOutsideViewport !== undefined) {\n              this.pauseOnOutsideViewport = data.pauseOnOutsideViewport;\n            }\n            if (data.zLayers !== undefined) {\n              this.zLayers = data.zLayers;\n            }\n            this.background.load(data.background);\n            var fullScreen = (_c = data.fullScreen) !== null && _c !== void 0 ? _c : data.backgroundMode;\n            if (typeof fullScreen === \"boolean\") {\n              this.fullScreen.enable = fullScreen;\n            } else {\n              this.fullScreen.load(fullScreen);\n            }\n            this.backgroundMask.load(data.backgroundMask);\n            this.interactivity.load(data.interactivity);\n            if (data.manualParticles !== undefined) {\n              this.manualParticles = data.manualParticles.map(function (t) {\n                var tmp = new _ManualParticle();\n                tmp.load(t);\n                return tmp;\n              });\n            }\n            this.particles.load(data.particles);\n            this.style = _deepExtend(this.style, data.style);\n            this._engine.plugins.loadOptions(this, data);\n            if (data.smooth !== undefined) {\n              this.smooth = data.smooth;\n            }\n            var interactors = this._engine.plugins.interactors.get(this._container);\n            if (interactors) {\n              var _iterator15 = _createForOfIteratorHelper(interactors),\n                _step15;\n              try {\n                for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n                  var interactor = _step15.value;\n                  if (interactor.loadOptions) {\n                    interactor.loadOptions(this, data);\n                  }\n                }\n              } catch (err) {\n                _iterator15.e(err);\n              } finally {\n                _iterator15.f();\n              }\n            }\n            if (data.responsive !== undefined) {\n              var _iterator16 = _createForOfIteratorHelper(data.responsive),\n                _step16;\n              try {\n                for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n                  var responsive = _step16.value;\n                  var optResponsive = new _Responsive();\n                  optResponsive.load(responsive);\n                  this.responsive.push(optResponsive);\n                }\n              } catch (err) {\n                _iterator16.e(err);\n              } finally {\n                _iterator16.f();\n              }\n            }\n            this.responsive.sort(function (a, b) {\n              return a.maxWidth - b.maxWidth;\n            });\n            if (data.themes !== undefined) {\n              var _iterator17 = _createForOfIteratorHelper(data.themes),\n                _step17;\n              try {\n                var _loop2 = function _loop2() {\n                  var theme = _step17.value;\n                  var existingTheme = _this20.themes.find(function (t) {\n                    return t.name === theme.name;\n                  });\n                  if (!existingTheme) {\n                    var optTheme = new _Theme();\n                    optTheme.load(theme);\n                    _this20.themes.push(optTheme);\n                  } else {\n                    existingTheme.load(theme);\n                  }\n                };\n                for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n                  _loop2();\n                }\n              } catch (err) {\n                _iterator17.e(err);\n              } finally {\n                _iterator17.f();\n              }\n            }\n            this.defaultThemes.dark = (_d = this._findDefaultTheme(\"dark\")) === null || _d === void 0 ? void 0 : _d.name;\n            this.defaultThemes.light = (_e = this._findDefaultTheme(\"light\")) === null || _e === void 0 ? void 0 : _e.name;\n          }\n        }, {\n          key: \"setResponsive\",\n          value: function setResponsive(width, pxRatio, defaultOptions) {\n            this.load(defaultOptions);\n            var responsiveOptions = this.responsive.find(function (t) {\n              return t.mode === \"screen\" && screen ? t.maxWidth > screen.availWidth : t.maxWidth * pxRatio > width;\n            });\n            this.load(responsiveOptions === null || responsiveOptions === void 0 ? void 0 : responsiveOptions.options);\n            return responsiveOptions === null || responsiveOptions === void 0 ? void 0 : responsiveOptions.maxWidth;\n          }\n        }, {\n          key: \"setTheme\",\n          value: function setTheme(name) {\n            if (name) {\n              var chosenTheme = this.themes.find(function (theme) {\n                return theme.name === name;\n              });\n              if (chosenTheme) {\n                this.load(chosenTheme.options);\n              }\n            } else {\n              var mediaMatch = _safeMatchMedia(\"(prefers-color-scheme: dark)\"),\n                clientDarkMode = mediaMatch && mediaMatch.matches,\n                defaultTheme = this._findDefaultTheme(clientDarkMode ? \"dark\" : \"light\");\n              if (defaultTheme) {\n                this.load(defaultTheme.options);\n              }\n            }\n          }\n        }, {\n          key: \"_findDefaultTheme\",\n          value: function _findDefaultTheme(mode) {\n            var _a;\n            return (_a = this.themes.find(function (theme) {\n              return theme[\"default\"].value && theme[\"default\"].mode === mode;\n            })) !== null && _a !== void 0 ? _a : this.themes.find(function (theme) {\n              return theme[\"default\"].value && theme[\"default\"].mode === \"any\";\n            });\n          }\n        }, {\n          key: \"_importPreset\",\n          value: function _importPreset(preset) {\n            this.load(this._engine.plugins.getPreset(preset));\n          }\n        }]);\n        return _Options;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/InteractionManager.js\n      var InteractionManager = /*#__PURE__*/function () {\n        function InteractionManager(engine, container) {\n          _classCallCheck(this, InteractionManager);\n          this.container = container;\n          this._engine = engine;\n          this._interactors = this._engine.plugins.getInteractors(this.container, true);\n          this._externalInteractors = [];\n          this._particleInteractors = [];\n        }\n        _createClass(InteractionManager, [{\n          key: \"externalInteract\",\n          value: function () {\n            var _externalInteract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(delta) {\n              var _iterator18, _step18, interactor;\n              return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                while (1) switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _iterator18 = _createForOfIteratorHelper(this._externalInteractors);\n                    _context6.prev = 1;\n                    _iterator18.s();\n                  case 3:\n                    if ((_step18 = _iterator18.n()).done) {\n                      _context6.next = 10;\n                      break;\n                    }\n                    interactor = _step18.value;\n                    if (!interactor.isEnabled()) {\n                      _context6.next = 8;\n                      break;\n                    }\n                    _context6.next = 8;\n                    return interactor.interact(delta);\n                  case 8:\n                    _context6.next = 3;\n                    break;\n                  case 10:\n                    _context6.next = 15;\n                    break;\n                  case 12:\n                    _context6.prev = 12;\n                    _context6.t0 = _context6[\"catch\"](1);\n                    _iterator18.e(_context6.t0);\n                  case 15:\n                    _context6.prev = 15;\n                    _iterator18.f();\n                    return _context6.finish(15);\n                  case 18:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }, _callee6, this, [[1, 12, 15, 18]]);\n            }));\n            function externalInteract(_x4) {\n              return _externalInteract.apply(this, arguments);\n            }\n            return externalInteract;\n          }()\n        }, {\n          key: \"handleClickMode\",\n          value: function handleClickMode(mode) {\n            var _iterator19 = _createForOfIteratorHelper(this._externalInteractors),\n              _step19;\n            try {\n              for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n                var interactor = _step19.value;\n                if (interactor.handleClickMode) {\n                  interactor.handleClickMode(mode);\n                }\n              }\n            } catch (err) {\n              _iterator19.e(err);\n            } finally {\n              _iterator19.f();\n            }\n          }\n        }, {\n          key: \"init\",\n          value: function init() {\n            this._externalInteractors = [];\n            this._particleInteractors = [];\n            var _iterator20 = _createForOfIteratorHelper(this._interactors),\n              _step20;\n            try {\n              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n                var interactor = _step20.value;\n                switch (interactor.type) {\n                  case \"external\":\n                    this._externalInteractors.push(interactor);\n                    break;\n                  case \"particles\":\n                    this._particleInteractors.push(interactor);\n                    break;\n                }\n                interactor.init();\n              }\n            } catch (err) {\n              _iterator20.e(err);\n            } finally {\n              _iterator20.f();\n            }\n          }\n        }, {\n          key: \"particlesInteract\",\n          value: function () {\n            var _particlesInteract = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(particle, delta) {\n              var _iterator21, _step21, interactor, _iterator22, _step22, _interactor;\n              return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n                while (1) switch (_context7.prev = _context7.next) {\n                  case 0:\n                    _iterator21 = _createForOfIteratorHelper(this._externalInteractors);\n                    try {\n                      for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n                        interactor = _step21.value;\n                        interactor.clear(particle, delta);\n                      }\n                    } catch (err) {\n                      _iterator21.e(err);\n                    } finally {\n                      _iterator21.f();\n                    }\n                    _iterator22 = _createForOfIteratorHelper(this._particleInteractors);\n                    _context7.prev = 3;\n                    _iterator22.s();\n                  case 5:\n                    if ((_step22 = _iterator22.n()).done) {\n                      _context7.next = 12;\n                      break;\n                    }\n                    _interactor = _step22.value;\n                    if (!_interactor.isEnabled(particle)) {\n                      _context7.next = 10;\n                      break;\n                    }\n                    _context7.next = 10;\n                    return _interactor.interact(particle, delta);\n                  case 10:\n                    _context7.next = 5;\n                    break;\n                  case 12:\n                    _context7.next = 17;\n                    break;\n                  case 14:\n                    _context7.prev = 14;\n                    _context7.t0 = _context7[\"catch\"](3);\n                    _iterator22.e(_context7.t0);\n                  case 17:\n                    _context7.prev = 17;\n                    _iterator22.f();\n                    return _context7.finish(17);\n                  case 20:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }, _callee7, this, [[3, 14, 17, 20]]);\n            }));\n            function particlesInteract(_x5, _x6) {\n              return _particlesInteract.apply(this, arguments);\n            }\n            return particlesInteract;\n          }()\n        }, {\n          key: \"reset\",\n          value: function () {\n            var _reset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(particle) {\n              var _iterator23, _step23, interactor, _iterator24, _step24, _interactor2;\n              return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n                while (1) switch (_context8.prev = _context8.next) {\n                  case 0:\n                    _iterator23 = _createForOfIteratorHelper(this._externalInteractors);\n                    _context8.prev = 1;\n                    _iterator23.s();\n                  case 3:\n                    if ((_step23 = _iterator23.n()).done) {\n                      _context8.next = 10;\n                      break;\n                    }\n                    interactor = _step23.value;\n                    if (!interactor.isEnabled()) {\n                      _context8.next = 8;\n                      break;\n                    }\n                    _context8.next = 8;\n                    return interactor.reset(particle);\n                  case 8:\n                    _context8.next = 3;\n                    break;\n                  case 10:\n                    _context8.next = 15;\n                    break;\n                  case 12:\n                    _context8.prev = 12;\n                    _context8.t0 = _context8[\"catch\"](1);\n                    _iterator23.e(_context8.t0);\n                  case 15:\n                    _context8.prev = 15;\n                    _iterator23.f();\n                    return _context8.finish(15);\n                  case 18:\n                    _iterator24 = _createForOfIteratorHelper(this._particleInteractors);\n                    _context8.prev = 19;\n                    _iterator24.s();\n                  case 21:\n                    if ((_step24 = _iterator24.n()).done) {\n                      _context8.next = 28;\n                      break;\n                    }\n                    _interactor2 = _step24.value;\n                    if (!_interactor2.isEnabled(particle)) {\n                      _context8.next = 26;\n                      break;\n                    }\n                    _context8.next = 26;\n                    return _interactor2.reset(particle);\n                  case 26:\n                    _context8.next = 21;\n                    break;\n                  case 28:\n                    _context8.next = 33;\n                    break;\n                  case 30:\n                    _context8.prev = 30;\n                    _context8.t1 = _context8[\"catch\"](19);\n                    _iterator24.e(_context8.t1);\n                  case 33:\n                    _context8.prev = 33;\n                    _iterator24.f();\n                    return _context8.finish(33);\n                  case 36:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }, _callee8, this, [[1, 12, 15, 18], [19, 30, 33, 36]]);\n            }));\n            function reset(_x7) {\n              return _reset.apply(this, arguments);\n            }\n            return reset;\n          }()\n        }]);\n        return InteractionManager;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Particle.js\n\n      var fixOutMode = function fixOutMode(data) {\n        if (!_isInArray(data.outMode, data.checkModes)) {\n          return;\n        }\n        if (data.coord > data.maxCoord - data.radius * 2) {\n          data.setCb(-data.radius);\n        } else if (data.coord < data.radius * 2) {\n          data.setCb(data.radius);\n        }\n      };\n      var Particle = /*#__PURE__*/function () {\n        function Particle(engine, id, container, position, overrideOptions, group) {\n          _classCallCheck(this, Particle);\n          this.container = container;\n          this._engine = engine;\n          this.init(id, position, overrideOptions, group);\n        }\n        _createClass(Particle, [{\n          key: \"destroy\",\n          value: function destroy(override) {\n            var _a;\n            if (this.unbreakable || this.destroyed) {\n              return;\n            }\n            this.destroyed = true;\n            this.bubble.inRange = false;\n            this.slow.inRange = false;\n            var _iterator25 = _createForOfIteratorHelper(this.container.plugins),\n              _step25;\n            try {\n              for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n                var _step25$value = _slicedToArray(_step25.value, 2),\n                  plugin = _step25$value[1];\n                if (plugin.particleDestroyed) {\n                  plugin.particleDestroyed(this, override);\n                }\n              }\n            } catch (err) {\n              _iterator25.e(err);\n            } finally {\n              _iterator25.f();\n            }\n            var _iterator26 = _createForOfIteratorHelper(this.container.particles.updaters),\n              _step26;\n            try {\n              for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n                var updater = _step26.value;\n                if (updater.particleDestroyed) {\n                  updater.particleDestroyed(this, override);\n                }\n              }\n            } catch (err) {\n              _iterator26.e(err);\n            } finally {\n              _iterator26.f();\n            }\n            (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n          }\n        }, {\n          key: \"draw\",\n          value: function draw(delta) {\n            var container = this.container;\n            var _iterator27 = _createForOfIteratorHelper(container.plugins),\n              _step27;\n            try {\n              for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n                var _step27$value = _slicedToArray(_step27.value, 2),\n                  plugin = _step27$value[1];\n                container.canvas.drawParticlePlugin(plugin, this, delta);\n              }\n            } catch (err) {\n              _iterator27.e(err);\n            } finally {\n              _iterator27.f();\n            }\n            container.canvas.drawParticle(this, delta);\n          }\n        }, {\n          key: \"getFillColor\",\n          value: function getFillColor() {\n            var _a;\n            return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : _getHslFromAnimation(this.color));\n          }\n        }, {\n          key: \"getMass\",\n          value: function getMass() {\n            return Math.pow(this.getRadius(), 2) * Math.PI / 2;\n          }\n        }, {\n          key: \"getPosition\",\n          value: function getPosition() {\n            return {\n              x: this.position.x + this.offset.x,\n              y: this.position.y + this.offset.y,\n              z: this.position.z\n            };\n          }\n        }, {\n          key: \"getRadius\",\n          value: function getRadius() {\n            var _a;\n            return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n          }\n        }, {\n          key: \"getStrokeColor\",\n          value: function getStrokeColor() {\n            var _a;\n            return this._getRollColor((_a = this.bubble.color) !== null && _a !== void 0 ? _a : _getHslFromAnimation(this.strokeColor));\n          }\n        }, {\n          key: \"init\",\n          value: function init(id, position, overrideOptions, group) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n            var container = this.container,\n              engine = this._engine;\n            this.id = id;\n            this.group = group;\n            this.fill = true;\n            this.pathRotation = false;\n            this.close = true;\n            this.lastPathTime = 0;\n            this.destroyed = false;\n            this.unbreakable = false;\n            this.rotation = 0;\n            this.misplaced = false;\n            this.retina = {\n              maxDistance: {}\n            };\n            this.outType = \"normal\";\n            this.ignoresResizeRatio = true;\n            var pxRatio = container.retina.pixelRatio,\n              mainOptions = container.actualOptions,\n              particlesOptions = _loadParticlesOptions(this._engine, container, mainOptions.particles),\n              shapeType = particlesOptions.shape.type,\n              reduceDuplicates = particlesOptions.reduceDuplicates;\n            this.shape = _itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n            var shapeOptions = particlesOptions.shape;\n            if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n              var overrideShapeType = overrideOptions.shape.type,\n                shape = _itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n              if (shape) {\n                this.shape = shape;\n                shapeOptions.load(overrideOptions.shape);\n              }\n            }\n            this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n            particlesOptions.load(overrideOptions);\n            particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n            this.interactivity = new _Interactivity(engine, container);\n            this.interactivity.load(container.actualOptions.interactivity);\n            this.interactivity.load(particlesOptions.interactivity);\n            this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n            this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n            this.options = particlesOptions;\n            var pathOptions = this.options.move.path;\n            this.pathDelay = _getValue(pathOptions.delay) * 1000;\n            if (pathOptions.generator) {\n              this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n              if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n              }\n            }\n            var zIndexValue = _getRangeValue(this.options.zIndex.value);\n            container.retina.initParticle(this);\n            var sizeOptions = this.options.size,\n              sizeRange = sizeOptions.value,\n              sizeAnimation = sizeOptions.animation;\n            this.size = {\n              enable: sizeOptions.animation.enable,\n              value: _getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n              max: _getRangeMax(sizeRange) * pxRatio,\n              min: _getRangeMin(sizeRange) * pxRatio,\n              loops: 0,\n              maxLoops: _getRangeValue(sizeOptions.animation.count)\n            };\n            if (sizeAnimation.enable) {\n              this.size.status = \"increasing\";\n              this.size.decay = 1 - _getRangeValue(sizeAnimation.decay);\n              switch (sizeAnimation.startValue) {\n                case \"min\":\n                  this.size.value = this.size.min;\n                  this.size.status = \"increasing\";\n                  break;\n                case \"random\":\n                  this.size.value = _randomInRange(this.size);\n                  this.size.status = _getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n                  break;\n                case \"max\":\n                default:\n                  this.size.value = this.size.max;\n                  this.size.status = \"decreasing\";\n                  break;\n              }\n            }\n            this.size.initialValue = this.size.value;\n            this.bubble = {\n              inRange: false\n            };\n            this.slow = {\n              inRange: false,\n              factor: 1\n            };\n            this.position = this._calcPosition(container, position, _clamp(zIndexValue, 0, container.zLayers));\n            this.initialPosition = this.position.copy();\n            var canvasSize = container.canvas.size,\n              moveCenter = Object.assign({}, this.options.move.center),\n              isCenterPercent = moveCenter.mode === \"percent\";\n            this.moveCenter = {\n              x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n              y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n              radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n              mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\"\n            };\n            this.direction = _getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n            switch (this.options.move.direction) {\n              case \"inside\":\n                this.outType = \"inside\";\n                break;\n              case \"outside\":\n                this.outType = \"outside\";\n                break;\n            }\n            this.initialVelocity = this._calculateVelocity();\n            this.velocity = this.initialVelocity.copy();\n            this.moveDecay = 1 - _getRangeValue(this.options.move.decay);\n            this.offset = _Vector.origin;\n            var particles = container.particles;\n            particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n            particles.lastZIndex = this.position.z;\n            this.zIndexFactor = this.position.z / container.zLayers;\n            this.sides = 24;\n            var drawer = container.drawers.get(this.shape);\n            if (!drawer) {\n              drawer = this._engine.plugins.getShapeDrawer(this.shape);\n              if (drawer) {\n                container.drawers.set(this.shape, drawer);\n              }\n            }\n            if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n              drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n            }\n            var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n            if (sideCountFunc) {\n              this.sides = sideCountFunc(this);\n            }\n            this.spawning = false;\n            this.shadowColor = _rangeColorToRgb(this.options.shadow.color);\n            var _iterator28 = _createForOfIteratorHelper(container.particles.updaters),\n              _step28;\n            try {\n              for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n                var updater = _step28.value;\n                updater.init(this);\n              }\n            } catch (err) {\n              _iterator28.e(err);\n            } finally {\n              _iterator28.f();\n            }\n            var _iterator29 = _createForOfIteratorHelper(container.particles.movers),\n              _step29;\n            try {\n              for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {\n                var mover = _step29.value;\n                (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n              }\n            } catch (err) {\n              _iterator29.e(err);\n            } finally {\n              _iterator29.f();\n            }\n            if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n              drawer.particleInit(container, this);\n            }\n            var _iterator30 = _createForOfIteratorHelper(container.plugins),\n              _step30;\n            try {\n              for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {\n                var _step30$value = _slicedToArray(_step30.value, 2),\n                  plugin = _step30$value[1];\n                (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n              }\n            } catch (err) {\n              _iterator30.e(err);\n            } finally {\n              _iterator30.f();\n            }\n          }\n        }, {\n          key: \"isInsideCanvas\",\n          value: function isInsideCanvas() {\n            var radius = this.getRadius(),\n              canvasSize = this.container.canvas.size;\n            return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n          }\n        }, {\n          key: \"isVisible\",\n          value: function isVisible() {\n            return !this.destroyed && !this.spawning && this.isInsideCanvas();\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {\n            var _a;\n            var _iterator31 = _createForOfIteratorHelper(this.container.particles.updaters),\n              _step31;\n            try {\n              for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {\n                var updater = _step31.value;\n                (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n              }\n            } catch (err) {\n              _iterator31.e(err);\n            } finally {\n              _iterator31.f();\n            }\n          }\n        }, {\n          key: \"_calcPosition\",\n          value: function _calcPosition(container, position, zIndex) {\n            var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n            var _a, _b, _c, _d;\n            var _iterator32 = _createForOfIteratorHelper(container.plugins),\n              _step32;\n            try {\n              for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {\n                var _step32$value = _slicedToArray(_step32.value, 2),\n                  plugin = _step32$value[1];\n                var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n                if (pluginPos !== undefined) {\n                  return _Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n                }\n              }\n            } catch (err) {\n              _iterator32.e(err);\n            } finally {\n              _iterator32.f();\n            }\n            var canvasSize = container.canvas.size,\n              exactPosition = _calcExactPositionOrRandomFromSize({\n                size: canvasSize,\n                position: position\n              }),\n              pos = _Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n              radius = this.getRadius(),\n              outModes = this.options.move.outModes,\n              fixHorizontal = function fixHorizontal(outMode) {\n                fixOutMode({\n                  outMode: outMode,\n                  checkModes: [\"bounce\", \"bounce-horizontal\"],\n                  coord: pos.x,\n                  maxCoord: container.canvas.size.width,\n                  setCb: function setCb(value) {\n                    return pos.x += value;\n                  },\n                  radius: radius\n                });\n              },\n              fixVertical = function fixVertical(outMode) {\n                fixOutMode({\n                  outMode: outMode,\n                  checkModes: [\"bounce\", \"bounce-vertical\"],\n                  coord: pos.y,\n                  maxCoord: container.canvas.size.height,\n                  setCb: function setCb(value) {\n                    return pos.y += value;\n                  },\n                  radius: radius\n                });\n              };\n            fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes[\"default\"]);\n            fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes[\"default\"]);\n            fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes[\"default\"]);\n            fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes[\"default\"]);\n            if (this._checkOverlap(pos, tryCount)) {\n              return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n            }\n            return pos;\n          }\n        }, {\n          key: \"_calculateVelocity\",\n          value: function _calculateVelocity() {\n            var baseVelocity = _getParticleBaseVelocity(this.direction),\n              res = baseVelocity.copy(),\n              moveOptions = this.options.move;\n            if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n              return res;\n            }\n            var rad = Math.PI / 180 * _getRangeValue(moveOptions.angle.value),\n              radOffset = Math.PI / 180 * _getRangeValue(moveOptions.angle.offset),\n              range = {\n                left: radOffset - rad / 2,\n                right: radOffset + rad / 2\n              };\n            if (!moveOptions.straight) {\n              res.angle += _randomInRange(_setRangeValue(range.left, range.right));\n            }\n            if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n              res.length *= _getRandom();\n            }\n            return res;\n          }\n        }, {\n          key: \"_checkOverlap\",\n          value: function _checkOverlap(pos) {\n            var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n            var collisionsOptions = this.options.collisions,\n              radius = this.getRadius();\n            if (!collisionsOptions.enable) {\n              return false;\n            }\n            var overlapOptions = collisionsOptions.overlap;\n            if (overlapOptions.enable) {\n              return false;\n            }\n            var retries = overlapOptions.retries;\n            if (retries >= 0 && tryCount > retries) {\n              throw new Error(\"Particle is overlapping and can't be placed\");\n            }\n            var overlaps = false;\n            var _iterator33 = _createForOfIteratorHelper(this.container.particles.array),\n              _step33;\n            try {\n              for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {\n                var particle = _step33.value;\n                if (_getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                  overlaps = true;\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator33.e(err);\n            } finally {\n              _iterator33.f();\n            }\n            return overlaps;\n          }\n        }, {\n          key: \"_getRollColor\",\n          value: function _getRollColor(color) {\n            var _a;\n            if (!color || !this.roll || !this.backColor && !this.roll.alter) {\n              return color;\n            }\n            var backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n              backSum = this.roll.horizontal ? Math.PI / 2 : 0,\n              rolled = Math.floor((((_a = this.roll.angle) !== null && _a !== void 0 ? _a : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (!rolled) {\n              return color;\n            }\n            if (this.backColor) {\n              return this.backColor;\n            }\n            if (this.roll.alter) {\n              return _alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n            }\n            return color;\n          }\n        }, {\n          key: \"_loadShapeData\",\n          value: function _loadShapeData(shapeOptions, reduceDuplicates) {\n            var shapeData = shapeOptions.options[this.shape];\n            if (shapeData) {\n              return _deepExtend({}, _itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n            }\n          }\n        }]);\n        return Particle;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/Point.js\n      var _Point = /*#__PURE__*/_createClass(function _Point(position, particle) {\n        _classCallCheck(this, _Point);\n        this.position = position;\n        this.particle = particle;\n      });\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/Range.js\n      var _Range = /*#__PURE__*/_createClass(function _Range(x, y) {\n        _classCallCheck(this, _Range);\n        this.position = {\n          x: x,\n          y: y\n        };\n      });\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/Circle.js\n      var _Circle = /*#__PURE__*/function (_Range2) {\n        _inherits(_Circle, _Range2);\n        var _super9 = _createSuper(_Circle);\n        function _Circle(x, y, radius) {\n          var _this21;\n          _classCallCheck(this, _Circle);\n          _this21 = _super9.call(this, x, y);\n          _this21.radius = radius;\n          return _this21;\n        }\n        _createClass(_Circle, [{\n          key: \"contains\",\n          value: function contains(point) {\n            return _getDistance(point, this.position) <= this.radius;\n          }\n        }, {\n          key: \"intersects\",\n          value: function intersects(range) {\n            var rect = range,\n              circle = range,\n              pos1 = this.position,\n              pos2 = range.position,\n              distPos = {\n                x: Math.abs(pos2.x - pos1.x),\n                y: Math.abs(pos2.y - pos1.y)\n              },\n              r = this.radius;\n            if (circle.radius !== undefined) {\n              var rSum = r + circle.radius,\n                dist = Math.sqrt(Math.pow(distPos.x, 2) + Math.pow(distPos.y, 2));\n              return rSum > dist;\n            } else if (rect.size !== undefined) {\n              var w = rect.size.width,\n                h = rect.size.height,\n                edges = Math.pow(distPos.x - w, 2) + Math.pow(distPos.y - h, 2);\n              return edges <= Math.pow(r, 2) || distPos.x <= r + w && distPos.y <= r + h || distPos.x <= w || distPos.y <= h;\n            }\n            return false;\n          }\n        }]);\n        return _Circle;\n      }(_Range);\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/Rectangle.js\n      var _Rectangle = /*#__PURE__*/function (_Range3) {\n        _inherits(_Rectangle, _Range3);\n        var _super10 = _createSuper(_Rectangle);\n        function _Rectangle(x, y, width, height) {\n          var _this22;\n          _classCallCheck(this, _Rectangle);\n          _this22 = _super10.call(this, x, y);\n          _this22.size = {\n            height: height,\n            width: width\n          };\n          return _this22;\n        }\n        _createClass(_Rectangle, [{\n          key: \"contains\",\n          value: function contains(point) {\n            var w = this.size.width,\n              h = this.size.height,\n              pos = this.position;\n            return point.x >= pos.x && point.x <= pos.x + w && point.y >= pos.y && point.y <= pos.y + h;\n          }\n        }, {\n          key: \"intersects\",\n          value: function intersects(range) {\n            if (range instanceof _Circle) {\n              range.intersects(this);\n            }\n            var w = this.size.width,\n              h = this.size.height,\n              pos1 = this.position,\n              pos2 = range.position,\n              size2 = range instanceof _Rectangle ? range.size : {\n                width: 0,\n                height: 0\n              },\n              w2 = size2.width,\n              h2 = size2.height;\n            return pos2.x < pos1.x + w && pos2.x + w2 > pos1.x && pos2.y < pos1.y + h && pos2.y + h2 > pos1.y;\n          }\n        }]);\n        return _Rectangle;\n      }(_Range);\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/QuadTree.js\n      var QuadTree = /*#__PURE__*/function () {\n        function QuadTree(rectangle, capacity) {\n          _classCallCheck(this, QuadTree);\n          this.rectangle = rectangle;\n          this.capacity = capacity;\n          this._points = [];\n          this._divided = false;\n        }\n        _createClass(QuadTree, [{\n          key: \"insert\",\n          value: function insert(point) {\n            var _a, _b, _c, _d, _e;\n            if (!this.rectangle.contains(point.position)) {\n              return false;\n            }\n            if (this._points.length < this.capacity) {\n              this._points.push(point);\n              return true;\n            }\n            if (!this._divided) {\n              this.subdivide();\n            }\n            return (_e = ((_a = this._NE) === null || _a === void 0 ? void 0 : _a.insert(point)) || ((_b = this._NW) === null || _b === void 0 ? void 0 : _b.insert(point)) || ((_c = this._SE) === null || _c === void 0 ? void 0 : _c.insert(point)) || ((_d = this._SW) === null || _d === void 0 ? void 0 : _d.insert(point))) !== null && _e !== void 0 ? _e : false;\n          }\n        }, {\n          key: \"query\",\n          value: function query(range, check, found) {\n            var _a, _b, _c, _d;\n            var res = found !== null && found !== void 0 ? found : [];\n            if (!range.intersects(this.rectangle)) {\n              return [];\n            }\n            var _iterator34 = _createForOfIteratorHelper(this._points),\n              _step34;\n            try {\n              for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {\n                var p = _step34.value;\n                if (!range.contains(p.position) && _getDistance(range.position, p.position) > p.particle.getRadius() && (!check || check(p.particle))) {\n                  continue;\n                }\n                res.push(p.particle);\n              }\n            } catch (err) {\n              _iterator34.e(err);\n            } finally {\n              _iterator34.f();\n            }\n            if (this._divided) {\n              (_a = this._NE) === null || _a === void 0 ? void 0 : _a.query(range, check, res);\n              (_b = this._NW) === null || _b === void 0 ? void 0 : _b.query(range, check, res);\n              (_c = this._SE) === null || _c === void 0 ? void 0 : _c.query(range, check, res);\n              (_d = this._SW) === null || _d === void 0 ? void 0 : _d.query(range, check, res);\n            }\n            return res;\n          }\n        }, {\n          key: \"queryCircle\",\n          value: function queryCircle(position, radius, check) {\n            return this.query(new _Circle(position.x, position.y, radius), check);\n          }\n        }, {\n          key: \"queryRectangle\",\n          value: function queryRectangle(position, size, check) {\n            return this.query(new _Rectangle(position.x, position.y, size.width, size.height), check);\n          }\n        }, {\n          key: \"subdivide\",\n          value: function subdivide() {\n            var x = this.rectangle.position.x,\n              y = this.rectangle.position.y,\n              w = this.rectangle.size.width,\n              h = this.rectangle.size.height,\n              capacity = this.capacity;\n            this._NE = new QuadTree(new _Rectangle(x, y, w / 2, h / 2), capacity);\n            this._NW = new QuadTree(new _Rectangle(x + w / 2, y, w / 2, h / 2), capacity);\n            this._SE = new QuadTree(new _Rectangle(x, y + h / 2, w / 2, h / 2), capacity);\n            this._SW = new QuadTree(new _Rectangle(x + w / 2, y + h / 2, w / 2, h / 2), capacity);\n            this._divided = true;\n          }\n        }]);\n        return QuadTree;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Particles.js\n      var Particles = /*#__PURE__*/function () {\n        function Particles(engine, container) {\n          _classCallCheck(this, Particles);\n          this.container = container;\n          this._engine = engine;\n          this.nextId = 0;\n          this.array = [];\n          this.zArray = [];\n          this.pool = [];\n          this.limit = 0;\n          this.needsSort = false;\n          this.lastZIndex = 0;\n          this.interactionManager = new InteractionManager(this._engine, container);\n          var canvasSize = this.container.canvas.size;\n          this.quadTree = new QuadTree(new _Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n          this.movers = this._engine.plugins.getMovers(container, true);\n          this.updaters = this._engine.plugins.getUpdaters(container, true);\n        }\n        _createClass(Particles, [{\n          key: \"count\",\n          get: function get() {\n            return this.array.length;\n          }\n        }, {\n          key: \"addManualParticles\",\n          value: function addManualParticles() {\n            var container = this.container,\n              options = container.actualOptions;\n            var _iterator35 = _createForOfIteratorHelper(options.manualParticles),\n              _step35;\n            try {\n              for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {\n                var particle = _step35.value;\n                this.addParticle(_calcPositionFromSize({\n                  size: container.canvas.size,\n                  position: particle.position\n                }), particle.options);\n              }\n            } catch (err) {\n              _iterator35.e(err);\n            } finally {\n              _iterator35.f();\n            }\n          }\n        }, {\n          key: \"addParticle\",\n          value: function addParticle(position, overrideOptions, group, initializer) {\n            var container = this.container,\n              options = container.actualOptions,\n              limit = options.particles.number.limit;\n            if (limit > 0) {\n              var countToRemove = this.count + 1 - limit;\n              if (countToRemove > 0) {\n                this.removeQuantity(countToRemove);\n              }\n            }\n            return this._pushParticle(position, overrideOptions, group, initializer);\n          }\n        }, {\n          key: \"clear\",\n          value: function clear() {\n            this.array = [];\n            this.zArray = [];\n          }\n        }, {\n          key: \"destroy\",\n          value: function destroy() {\n            this.array = [];\n            this.zArray = [];\n            this.movers = [];\n            this.updaters = [];\n          }\n        }, {\n          key: \"draw\",\n          value: function () {\n            var _draw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(delta) {\n              var container, canvasSize, _iterator36, _step36, _step36$value, plugin, _iterator37, _step37, p;\n              return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n                while (1) switch (_context9.prev = _context9.next) {\n                  case 0:\n                    container = this.container, canvasSize = this.container.canvas.size;\n                    this.quadTree = new QuadTree(new _Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n                    container.canvas.clear();\n                    _context9.next = 5;\n                    return this.update(delta);\n                  case 5:\n                    if (this.needsSort) {\n                      this.zArray.sort(function (a, b) {\n                        return b.position.z - a.position.z || a.id - b.id;\n                      });\n                      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n                      this.needsSort = false;\n                    }\n                    _iterator36 = _createForOfIteratorHelper(container.plugins);\n                    try {\n                      for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {\n                        _step36$value = _slicedToArray(_step36.value, 2), plugin = _step36$value[1];\n                        container.canvas.drawPlugin(plugin, delta);\n                      }\n                    } catch (err) {\n                      _iterator36.e(err);\n                    } finally {\n                      _iterator36.f();\n                    }\n                    _iterator37 = _createForOfIteratorHelper(this.zArray);\n                    try {\n                      for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {\n                        p = _step37.value;\n                        p.draw(delta);\n                      }\n                    } catch (err) {\n                      _iterator37.e(err);\n                    } finally {\n                      _iterator37.f();\n                    }\n                  case 10:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }, _callee9, this);\n            }));\n            function draw(_x8) {\n              return _draw.apply(this, arguments);\n            }\n            return draw;\n          }()\n        }, {\n          key: \"handleClickMode\",\n          value: function handleClickMode(mode) {\n            this.interactionManager.handleClickMode(mode);\n          }\n        }, {\n          key: \"init\",\n          value: function init() {\n            var _a;\n            var container = this.container,\n              options = container.actualOptions;\n            this.lastZIndex = 0;\n            this.needsSort = false;\n            var handled = false;\n            this.updaters = this._engine.plugins.getUpdaters(container, true);\n            this.interactionManager.init();\n            var _iterator38 = _createForOfIteratorHelper(container.plugins),\n              _step38;\n            try {\n              for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {\n                var _step38$value = _slicedToArray(_step38.value, 2),\n                  plugin = _step38$value[1];\n                if (plugin.particlesInitialization !== undefined) {\n                  handled = plugin.particlesInitialization();\n                }\n                if (handled) {\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator38.e(err);\n            } finally {\n              _iterator38.f();\n            }\n            this.interactionManager.init();\n            var _iterator39 = _createForOfIteratorHelper(container.pathGenerators),\n              _step39;\n            try {\n              for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {\n                var _step39$value = _slicedToArray(_step39.value, 2),\n                  pathGenerator = _step39$value[1];\n                pathGenerator.init(container);\n              }\n            } catch (err) {\n              _iterator39.e(err);\n            } finally {\n              _iterator39.f();\n            }\n            this.addManualParticles();\n            if (!handled) {\n              for (var group in options.particles.groups) {\n                var groupOptions = options.particles.groups[group];\n                for (var i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n                  this.addParticle(undefined, groupOptions, group);\n                }\n              }\n              for (var _i3 = this.count; _i3 < options.particles.number.value; _i3++) {\n                this.addParticle();\n              }\n            }\n          }\n        }, {\n          key: \"push\",\n          value: function push(nb, mouse, overrideOptions, group) {\n            this.pushing = true;\n            for (var i = 0; i < nb; i++) {\n              this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n            }\n            this.pushing = false;\n          }\n        }, {\n          key: \"redraw\",\n          value: function () {\n            var _redraw = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n              return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n                while (1) switch (_context10.prev = _context10.next) {\n                  case 0:\n                    this.clear();\n                    this.init();\n                    _context10.next = 4;\n                    return this.draw({\n                      value: 0,\n                      factor: 0\n                    });\n                  case 4:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }, _callee10, this);\n            }));\n            function redraw() {\n              return _redraw.apply(this, arguments);\n            }\n            return redraw;\n          }()\n        }, {\n          key: \"remove\",\n          value: function remove(particle, group, override) {\n            this.removeAt(this.array.indexOf(particle), undefined, group, override);\n          }\n        }, {\n          key: \"removeAt\",\n          value: function removeAt(index) {\n            var quantity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n            var group = arguments.length > 2 ? arguments[2] : undefined;\n            var override = arguments.length > 3 ? arguments[3] : undefined;\n            if (index < 0 || index > this.count) {\n              return;\n            }\n            var deleted = 0;\n            for (var i = index; deleted < quantity && i < this.count; i++) {\n              var particle = this.array[i];\n              if (!particle || particle.group !== group) {\n                continue;\n              }\n              particle.destroy(override);\n              this.array.splice(i--, 1);\n              var zIdx = this.zArray.indexOf(particle);\n              this.zArray.splice(zIdx, 1);\n              this.pool.push(particle);\n              deleted++;\n              this._engine.dispatchEvent(\"particleRemoved\", {\n                container: this.container,\n                data: {\n                  particle: particle\n                }\n              });\n            }\n          }\n        }, {\n          key: \"removeQuantity\",\n          value: function removeQuantity(quantity, group) {\n            this.removeAt(0, quantity, group);\n          }\n        }, {\n          key: \"setDensity\",\n          value: function setDensity() {\n            var options = this.container.actualOptions;\n            for (var group in options.particles.groups) {\n              this._applyDensity(options.particles.groups[group], 0, group);\n            }\n            this._applyDensity(options.particles, options.manualParticles.length);\n          }\n        }, {\n          key: \"update\",\n          value: function () {\n            var _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(delta) {\n              var _a, _b, container, particlesToDelete, _iterator40, _step40, _step40$value, pathGenerator, _iterator41, _step41, _step41$value, plugin, _iterator42, _step42, _particle, resizeFactor, _iterator44, _step44, _step44$value, _plugin, _iterator45, _step45, mover, _i4, _particlesToDelete, particle, _iterator43, _step43, _particle2, _iterator46, _step46, updater;\n              return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n                while (1) switch (_context11.prev = _context11.next) {\n                  case 0:\n                    container = this.container, particlesToDelete = [];\n                    _iterator40 = _createForOfIteratorHelper(container.pathGenerators);\n                    try {\n                      for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {\n                        _step40$value = _slicedToArray(_step40.value, 2), pathGenerator = _step40$value[1];\n                        pathGenerator.update();\n                      }\n                    } catch (err) {\n                      _iterator40.e(err);\n                    } finally {\n                      _iterator40.f();\n                    }\n                    _iterator41 = _createForOfIteratorHelper(container.plugins);\n                    try {\n                      for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {\n                        _step41$value = _slicedToArray(_step41.value, 2), plugin = _step41$value[1];\n                        (_a = plugin.update) === null || _a === void 0 ? void 0 : _a.call(plugin, delta);\n                      }\n                    } catch (err) {\n                      _iterator41.e(err);\n                    } finally {\n                      _iterator41.f();\n                    }\n                    _iterator42 = _createForOfIteratorHelper(this.array);\n                    _context11.prev = 6;\n                    _iterator42.s();\n                  case 8:\n                    if ((_step42 = _iterator42.n()).done) {\n                      _context11.next = 41;\n                      break;\n                    }\n                    _particle = _step42.value;\n                    resizeFactor = container.canvas.resizeFactor;\n                    if (resizeFactor && !_particle.ignoresResizeRatio) {\n                      _particle.position.x *= resizeFactor.width;\n                      _particle.position.y *= resizeFactor.height;\n                      _particle.initialPosition.x *= resizeFactor.width;\n                      _particle.initialPosition.y *= resizeFactor.height;\n                    }\n                    _particle.ignoresResizeRatio = false;\n                    _context11.next = 15;\n                    return this.interactionManager.reset(_particle);\n                  case 15:\n                    _iterator44 = _createForOfIteratorHelper(this.container.plugins);\n                    _context11.prev = 16;\n                    _iterator44.s();\n                  case 18:\n                    if ((_step44 = _iterator44.n()).done) {\n                      _context11.next = 25;\n                      break;\n                    }\n                    _step44$value = _slicedToArray(_step44.value, 2), _plugin = _step44$value[1];\n                    if (!_particle.destroyed) {\n                      _context11.next = 22;\n                      break;\n                    }\n                    return _context11.abrupt(\"break\", 25);\n                  case 22:\n                    (_b = _plugin.particleUpdate) === null || _b === void 0 ? void 0 : _b.call(_plugin, _particle, delta);\n                  case 23:\n                    _context11.next = 18;\n                    break;\n                  case 25:\n                    _context11.next = 30;\n                    break;\n                  case 27:\n                    _context11.prev = 27;\n                    _context11.t0 = _context11[\"catch\"](16);\n                    _iterator44.e(_context11.t0);\n                  case 30:\n                    _context11.prev = 30;\n                    _iterator44.f();\n                    return _context11.finish(30);\n                  case 33:\n                    _iterator45 = _createForOfIteratorHelper(this.movers);\n                    try {\n                      for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {\n                        mover = _step45.value;\n                        if (mover.isEnabled(_particle)) {\n                          mover.move(_particle, delta);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator45.e(err);\n                    } finally {\n                      _iterator45.f();\n                    }\n                    if (!_particle.destroyed) {\n                      _context11.next = 38;\n                      break;\n                    }\n                    particlesToDelete.push(_particle);\n                    return _context11.abrupt(\"continue\", 39);\n                  case 38:\n                    this.quadTree.insert(new _Point(_particle.getPosition(), _particle));\n                  case 39:\n                    _context11.next = 8;\n                    break;\n                  case 41:\n                    _context11.next = 46;\n                    break;\n                  case 43:\n                    _context11.prev = 43;\n                    _context11.t1 = _context11[\"catch\"](6);\n                    _iterator42.e(_context11.t1);\n                  case 46:\n                    _context11.prev = 46;\n                    _iterator42.f();\n                    return _context11.finish(46);\n                  case 49:\n                    for (_i4 = 0, _particlesToDelete = particlesToDelete; _i4 < _particlesToDelete.length; _i4++) {\n                      particle = _particlesToDelete[_i4];\n                      this.remove(particle);\n                    }\n                    _context11.next = 52;\n                    return this.interactionManager.externalInteract(delta);\n                  case 52:\n                    _iterator43 = _createForOfIteratorHelper(this.array);\n                    _context11.prev = 53;\n                    _iterator43.s();\n                  case 55:\n                    if ((_step43 = _iterator43.n()).done) {\n                      _context11.next = 64;\n                      break;\n                    }\n                    _particle2 = _step43.value;\n                    _iterator46 = _createForOfIteratorHelper(this.updaters);\n                    try {\n                      for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {\n                        updater = _step46.value;\n                        updater.update(_particle2, delta);\n                      }\n                    } catch (err) {\n                      _iterator46.e(err);\n                    } finally {\n                      _iterator46.f();\n                    }\n                    if (!(!_particle2.destroyed && !_particle2.spawning)) {\n                      _context11.next = 62;\n                      break;\n                    }\n                    _context11.next = 62;\n                    return this.interactionManager.particlesInteract(_particle2, delta);\n                  case 62:\n                    _context11.next = 55;\n                    break;\n                  case 64:\n                    _context11.next = 69;\n                    break;\n                  case 66:\n                    _context11.prev = 66;\n                    _context11.t2 = _context11[\"catch\"](53);\n                    _iterator43.e(_context11.t2);\n                  case 69:\n                    _context11.prev = 69;\n                    _iterator43.f();\n                    return _context11.finish(69);\n                  case 72:\n                    delete container.canvas.resizeFactor;\n                  case 73:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }, _callee11, this, [[6, 43, 46, 49], [16, 27, 30, 33], [53, 66, 69, 72]]);\n            }));\n            function update(_x9) {\n              return _update.apply(this, arguments);\n            }\n            return update;\n          }()\n        }, {\n          key: \"_applyDensity\",\n          value: function _applyDensity(options, manualCount, group) {\n            var _a;\n            if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n              return;\n            }\n            var numberOptions = options.number,\n              densityFactor = this._initDensityFactor(numberOptions.density),\n              optParticlesNumber = numberOptions.value,\n              optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber,\n              particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount,\n              particlesCount = Math.min(this.count, this.array.filter(function (t) {\n                return t.group === group;\n              }).length);\n            this.limit = numberOptions.limit * densityFactor;\n            if (particlesCount < particlesNumber) {\n              this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n            } else if (particlesCount > particlesNumber) {\n              this.removeQuantity(particlesCount - particlesNumber, group);\n            }\n          }\n        }, {\n          key: \"_initDensityFactor\",\n          value: function _initDensityFactor(densityOptions) {\n            var container = this.container;\n            if (!container.canvas.element || !densityOptions.enable) {\n              return 1;\n            }\n            var canvas = container.canvas.element,\n              pxRatio = container.retina.pixelRatio;\n            return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n          }\n        }, {\n          key: \"_pushParticle\",\n          value: function _pushParticle(position, overrideOptions, group, initializer) {\n            try {\n              var particle = this.pool.pop();\n              if (particle) {\n                particle.init(this.nextId, position, overrideOptions, group);\n              } else {\n                particle = new Particle(this._engine, this.nextId, this.container, position, overrideOptions, group);\n              }\n              var canAdd = true;\n              if (initializer) {\n                canAdd = initializer(particle);\n              }\n              if (!canAdd) {\n                return;\n              }\n              this.array.push(particle);\n              this.zArray.push(particle);\n              this.nextId++;\n              this._engine.dispatchEvent(\"particleAdded\", {\n                container: this.container,\n                data: {\n                  particle: particle\n                }\n              });\n              return particle;\n            } catch (e) {\n              console.warn(\"error adding particle: \".concat(e));\n              return;\n            }\n          }\n        }]);\n        return Particles;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Retina.js\n      var Retina = /*#__PURE__*/function () {\n        function Retina(container) {\n          _classCallCheck(this, Retina);\n          this.container = container;\n        }\n        _createClass(Retina, [{\n          key: \"init\",\n          value: function init() {\n            var container = this.container,\n              options = container.actualOptions;\n            this.pixelRatio = !options.detectRetina || _isSsr() ? 1 : window.devicePixelRatio;\n            this.reduceFactor = 1;\n            var ratio = this.pixelRatio;\n            if (container.canvas.element) {\n              var element = container.canvas.element;\n              container.canvas.size.width = element.offsetWidth * ratio;\n              container.canvas.size.height = element.offsetHeight * ratio;\n            }\n            var particles = options.particles;\n            this.attractDistance = _getRangeValue(particles.move.attract.distance) * ratio;\n            this.sizeAnimationSpeed = _getRangeValue(particles.size.animation.speed) * ratio;\n            this.maxSpeed = _getRangeValue(particles.move.gravity.maxSpeed) * ratio;\n          }\n        }, {\n          key: \"initParticle\",\n          value: function initParticle(particle) {\n            var options = particle.options,\n              ratio = this.pixelRatio,\n              moveDistance = options.move.distance,\n              props = particle.retina;\n            props.attractDistance = _getRangeValue(options.move.attract.distance) * ratio;\n            props.moveDrift = _getRangeValue(options.move.drift) * ratio;\n            props.moveSpeed = _getRangeValue(options.move.speed) * ratio;\n            props.sizeAnimationSpeed = _getRangeValue(options.size.animation.speed) * ratio;\n            var maxDistance = props.maxDistance;\n            maxDistance.horizontal = moveDistance.horizontal !== undefined ? moveDistance.horizontal * ratio : undefined;\n            maxDistance.vertical = moveDistance.vertical !== undefined ? moveDistance.vertical * ratio : undefined;\n            props.maxSpeed = _getRangeValue(options.move.gravity.maxSpeed) * ratio;\n          }\n        }]);\n        return Retina;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Container.js\n\n      function guardCheck(container) {\n        return container && !container.destroyed;\n      }\n      function loadContainerOptions(engine, container) {\n        var options = new _Options(engine, container);\n        for (var _len4 = arguments.length, sourceOptionsArr = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n          sourceOptionsArr[_key4 - 2] = arguments[_key4];\n        }\n        _loadOptions.apply(void 0, [options].concat(sourceOptionsArr));\n        return options;\n      }\n      var defaultPathGeneratorKey = \"default\",\n        defaultPathGenerator = {\n          generate: function generate(p) {\n            var v = p.velocity.copy();\n            v.angle += v.length * Math.PI / 180;\n            return v;\n          },\n          init: function init() {},\n          update: function update() {},\n          reset: function reset() {}\n        };\n      var Container = /*#__PURE__*/function () {\n        function Container(engine, id, sourceOptions) {\n          var _this23 = this;\n          _classCallCheck(this, Container);\n          this.id = id;\n          this._engine = engine;\n          this.fpsLimit = 120;\n          this.smooth = false;\n          this._delay = 0;\n          this.duration = 0;\n          this.lifeTime = 0;\n          this._firstStart = true;\n          this.started = false;\n          this.destroyed = false;\n          this._paused = true;\n          this.lastFrameTime = 0;\n          this.zLayers = 100;\n          this.pageHidden = false;\n          this._sourceOptions = sourceOptions;\n          this._initialSourceOptions = sourceOptions;\n          this.retina = new Retina(this);\n          this.canvas = new Canvas(this);\n          this.particles = new Particles(this._engine, this);\n          this.frameManager = new FrameManager(this);\n          this.pathGenerators = new Map();\n          this.interactivity = {\n            mouse: {\n              clicking: false,\n              inside: false\n            }\n          };\n          this.plugins = new Map();\n          this.drawers = new Map();\n          this._options = loadContainerOptions(this._engine, this);\n          this.actualOptions = loadContainerOptions(this._engine, this);\n          this._eventListeners = new EventListeners(this);\n          if (typeof IntersectionObserver !== \"undefined\" && IntersectionObserver) {\n            this._intersectionObserver = new IntersectionObserver(function (entries) {\n              return _this23._intersectionManager(entries);\n            });\n          }\n          this._engine.dispatchEvent(\"containerBuilt\", {\n            container: this\n          });\n        }\n        _createClass(Container, [{\n          key: \"options\",\n          get: function get() {\n            return this._options;\n          }\n        }, {\n          key: \"sourceOptions\",\n          get: function get() {\n            return this._sourceOptions;\n          }\n        }, {\n          key: \"addClickHandler\",\n          value: function addClickHandler(callback) {\n            var _this24 = this;\n            if (!guardCheck(this)) {\n              return;\n            }\n            var el = this.interactivity.element;\n            if (!el) {\n              return;\n            }\n            var clickOrTouchHandler = function clickOrTouchHandler(e, pos, radius) {\n              if (!guardCheck(_this24)) {\n                return;\n              }\n              var pxRatio = _this24.retina.pixelRatio,\n                posRetina = {\n                  x: pos.x * pxRatio,\n                  y: pos.y * pxRatio\n                },\n                particles = _this24.particles.quadTree.queryCircle(posRetina, radius * pxRatio);\n              callback(e, particles);\n            };\n            var clickHandler = function clickHandler(e) {\n              if (!guardCheck(_this24)) {\n                return;\n              }\n              var mouseEvent = e,\n                pos = {\n                  x: mouseEvent.offsetX || mouseEvent.clientX,\n                  y: mouseEvent.offsetY || mouseEvent.clientY\n                };\n              clickOrTouchHandler(e, pos, 1);\n            };\n            var touchStartHandler = function touchStartHandler() {\n              if (!guardCheck(_this24)) {\n                return;\n              }\n              touched = true;\n              touchMoved = false;\n            };\n            var touchMoveHandler = function touchMoveHandler() {\n              if (!guardCheck(_this24)) {\n                return;\n              }\n              touchMoved = true;\n            };\n            var touchEndHandler = function touchEndHandler(e) {\n              if (!guardCheck(_this24)) {\n                return;\n              }\n              if (touched && !touchMoved) {\n                var touchEvent = e;\n                var lastTouch = touchEvent.touches[touchEvent.touches.length - 1];\n                if (!lastTouch) {\n                  lastTouch = touchEvent.changedTouches[touchEvent.changedTouches.length - 1];\n                  if (!lastTouch) {\n                    return;\n                  }\n                }\n                var element = _this24.canvas.element,\n                  canvasRect = element ? element.getBoundingClientRect() : undefined,\n                  pos = {\n                    x: lastTouch.clientX - (canvasRect ? canvasRect.left : 0),\n                    y: lastTouch.clientY - (canvasRect ? canvasRect.top : 0)\n                  };\n                clickOrTouchHandler(e, pos, Math.max(lastTouch.radiusX, lastTouch.radiusY));\n              }\n              touched = false;\n              touchMoved = false;\n            };\n            var touchCancelHandler = function touchCancelHandler() {\n              if (!guardCheck(_this24)) {\n                return;\n              }\n              touched = false;\n              touchMoved = false;\n            };\n            var touched = false,\n              touchMoved = false;\n            el.addEventListener(\"click\", clickHandler);\n            el.addEventListener(\"touchstart\", touchStartHandler);\n            el.addEventListener(\"touchmove\", touchMoveHandler);\n            el.addEventListener(\"touchend\", touchEndHandler);\n            el.addEventListener(\"touchcancel\", touchCancelHandler);\n          }\n        }, {\n          key: \"addPath\",\n          value: function addPath(key, generator) {\n            var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            if (!guardCheck(this) || !override && this.pathGenerators.has(key)) {\n              return false;\n            }\n            this.pathGenerators.set(key, generator !== null && generator !== void 0 ? generator : defaultPathGenerator);\n            return true;\n          }\n        }, {\n          key: \"destroy\",\n          value: function destroy() {\n            var _this25 = this;\n            if (!guardCheck(this)) {\n              return;\n            }\n            this.stop();\n            this.particles.destroy();\n            this.canvas.destroy();\n            var _iterator47 = _createForOfIteratorHelper(this.drawers),\n              _step47;\n            try {\n              for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {\n                var _step47$value = _slicedToArray(_step47.value, 2),\n                  drawer = _step47$value[1];\n                if (drawer.destroy) {\n                  drawer.destroy(this);\n                }\n              }\n            } catch (err) {\n              _iterator47.e(err);\n            } finally {\n              _iterator47.f();\n            }\n            var _iterator48 = _createForOfIteratorHelper(this.drawers.keys()),\n              _step48;\n            try {\n              for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {\n                var key = _step48.value;\n                this.drawers[\"delete\"](key);\n              }\n            } catch (err) {\n              _iterator48.e(err);\n            } finally {\n              _iterator48.f();\n            }\n            this._engine.plugins.destroy(this);\n            this.destroyed = true;\n            var mainArr = this._engine.dom(),\n              idx = mainArr.findIndex(function (t) {\n                return t === _this25;\n              });\n            if (idx >= 0) {\n              mainArr.splice(idx, 1);\n            }\n            this._engine.dispatchEvent(\"containerDestroyed\", {\n              container: this\n            });\n          }\n        }, {\n          key: \"draw\",\n          value: function draw(force) {\n            var _this26 = this;\n            if (!guardCheck(this)) {\n              return;\n            }\n            var refreshTime = force;\n            this._drawAnimationFrame = _animate()( /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(timestamp) {\n                return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n                  while (1) switch (_context12.prev = _context12.next) {\n                    case 0:\n                      if (refreshTime) {\n                        _this26.lastFrameTime = undefined;\n                        refreshTime = false;\n                      }\n                      _context12.next = 3;\n                      return _this26.frameManager.nextFrame(timestamp);\n                    case 3:\n                    case \"end\":\n                      return _context12.stop();\n                  }\n                }, _callee12);\n              }));\n              return function (_x10) {\n                return _ref4.apply(this, arguments);\n              };\n            }());\n          }\n        }, {\n          key: \"exportConfiguration\",\n          value: function exportConfiguration() {\n            return JSON.stringify(this.actualOptions, function (key, value) {\n              if (key === \"_engine\" || key === \"_container\") {\n                return;\n              }\n              return value;\n            }, 2);\n          }\n        }, {\n          key: \"exportImage\",\n          value: function exportImage(callback, type, quality) {\n            var element = this.canvas.element;\n            if (element) {\n              element.toBlob(callback, type !== null && type !== void 0 ? type : \"image/png\", quality);\n            }\n          }\n        }, {\n          key: \"exportImg\",\n          value: function exportImg(callback) {\n            this.exportImage(callback);\n          }\n        }, {\n          key: \"getAnimationStatus\",\n          value: function getAnimationStatus() {\n            return !this._paused && !this.pageHidden && guardCheck(this);\n          }\n        }, {\n          key: \"handleClickMode\",\n          value: function handleClickMode(mode) {\n            if (!guardCheck(this)) {\n              return;\n            }\n            this.particles.handleClickMode(mode);\n            var _iterator49 = _createForOfIteratorHelper(this.plugins),\n              _step49;\n            try {\n              for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {\n                var _step49$value = _slicedToArray(_step49.value, 2),\n                  plugin = _step49$value[1];\n                if (plugin.handleClickMode) {\n                  plugin.handleClickMode(mode);\n                }\n              }\n            } catch (err) {\n              _iterator49.e(err);\n            } finally {\n              _iterator49.f();\n            }\n          }\n        }, {\n          key: \"init\",\n          value: function () {\n            var _init2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n              var shapes, _iterator50, _step50, type, drawer, availablePlugins, _iterator51, _step51, _step51$value, id, plugin, _iterator52, _step52, _step52$value, _drawer, _iterator53, _step53, _step53$value, _plugin2, _iterator54, _step54, _step54$value, _plugin3;\n              return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n                while (1) switch (_context13.prev = _context13.next) {\n                  case 0:\n                    if (guardCheck(this)) {\n                      _context13.next = 2;\n                      break;\n                    }\n                    return _context13.abrupt(\"return\");\n                  case 2:\n                    shapes = this._engine.plugins.getSupportedShapes();\n                    _iterator50 = _createForOfIteratorHelper(shapes);\n                    try {\n                      for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {\n                        type = _step50.value;\n                        drawer = this._engine.plugins.getShapeDrawer(type);\n                        if (drawer) {\n                          this.drawers.set(type, drawer);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator50.e(err);\n                    } finally {\n                      _iterator50.f();\n                    }\n                    this._options = loadContainerOptions(this._engine, this, this._initialSourceOptions, this.sourceOptions);\n                    this.actualOptions = loadContainerOptions(this._engine, this, this._options);\n                    availablePlugins = this._engine.plugins.getAvailablePlugins(this);\n                    _iterator51 = _createForOfIteratorHelper(availablePlugins);\n                    try {\n                      for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {\n                        _step51$value = _slicedToArray(_step51.value, 2), id = _step51$value[0], plugin = _step51$value[1];\n                        this.plugins.set(id, plugin);\n                      }\n                    } catch (err) {\n                      _iterator51.e(err);\n                    } finally {\n                      _iterator51.f();\n                    }\n                    this.retina.init();\n                    _context13.next = 13;\n                    return this.canvas.init();\n                  case 13:\n                    this.updateActualOptions();\n                    this.canvas.initBackground();\n                    this.canvas.resize();\n                    this.zLayers = this.actualOptions.zLayers;\n                    this.duration = _getRangeValue(this.actualOptions.duration) * 1000;\n                    this._delay = _getRangeValue(this.actualOptions.delay) * 1000;\n                    this.lifeTime = 0;\n                    this.fpsLimit = this.actualOptions.fpsLimit > 0 ? this.actualOptions.fpsLimit : 120;\n                    this.smooth = this.actualOptions.smooth;\n                    _iterator52 = _createForOfIteratorHelper(this.drawers);\n                    _context13.prev = 23;\n                    _iterator52.s();\n                  case 25:\n                    if ((_step52 = _iterator52.n()).done) {\n                      _context13.next = 32;\n                      break;\n                    }\n                    _step52$value = _slicedToArray(_step52.value, 2), _drawer = _step52$value[1];\n                    if (!_drawer.init) {\n                      _context13.next = 30;\n                      break;\n                    }\n                    _context13.next = 30;\n                    return _drawer.init(this);\n                  case 30:\n                    _context13.next = 25;\n                    break;\n                  case 32:\n                    _context13.next = 37;\n                    break;\n                  case 34:\n                    _context13.prev = 34;\n                    _context13.t0 = _context13[\"catch\"](23);\n                    _iterator52.e(_context13.t0);\n                  case 37:\n                    _context13.prev = 37;\n                    _iterator52.f();\n                    return _context13.finish(37);\n                  case 40:\n                    _iterator53 = _createForOfIteratorHelper(this.plugins);\n                    _context13.prev = 41;\n                    _iterator53.s();\n                  case 43:\n                    if ((_step53 = _iterator53.n()).done) {\n                      _context13.next = 50;\n                      break;\n                    }\n                    _step53$value = _slicedToArray(_step53.value, 2), _plugin2 = _step53$value[1];\n                    if (!_plugin2.init) {\n                      _context13.next = 48;\n                      break;\n                    }\n                    _context13.next = 48;\n                    return _plugin2.init();\n                  case 48:\n                    _context13.next = 43;\n                    break;\n                  case 50:\n                    _context13.next = 55;\n                    break;\n                  case 52:\n                    _context13.prev = 52;\n                    _context13.t1 = _context13[\"catch\"](41);\n                    _iterator53.e(_context13.t1);\n                  case 55:\n                    _context13.prev = 55;\n                    _iterator53.f();\n                    return _context13.finish(55);\n                  case 58:\n                    this._engine.dispatchEvent(\"containerInit\", {\n                      container: this\n                    });\n                    this.particles.init();\n                    this.particles.setDensity();\n                    _iterator54 = _createForOfIteratorHelper(this.plugins);\n                    try {\n                      for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {\n                        _step54$value = _slicedToArray(_step54.value, 2), _plugin3 = _step54$value[1];\n                        if (_plugin3.particlesSetup) {\n                          _plugin3.particlesSetup();\n                        }\n                      }\n                    } catch (err) {\n                      _iterator54.e(err);\n                    } finally {\n                      _iterator54.f();\n                    }\n                    this._engine.dispatchEvent(\"particlesSetup\", {\n                      container: this\n                    });\n                  case 64:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }, _callee13, this, [[23, 34, 37, 40], [41, 52, 55, 58]]);\n            }));\n            function init() {\n              return _init2.apply(this, arguments);\n            }\n            return init;\n          }()\n        }, {\n          key: \"loadTheme\",\n          value: function () {\n            var _loadTheme = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(name) {\n              return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n                while (1) switch (_context14.prev = _context14.next) {\n                  case 0:\n                    if (guardCheck(this)) {\n                      _context14.next = 2;\n                      break;\n                    }\n                    return _context14.abrupt(\"return\");\n                  case 2:\n                    this._currentTheme = name;\n                    _context14.next = 5;\n                    return this.refresh();\n                  case 5:\n                  case \"end\":\n                    return _context14.stop();\n                }\n              }, _callee14, this);\n            }));\n            function loadTheme(_x11) {\n              return _loadTheme.apply(this, arguments);\n            }\n            return loadTheme;\n          }()\n        }, {\n          key: \"pause\",\n          value: function pause() {\n            if (!guardCheck(this)) {\n              return;\n            }\n            if (this._drawAnimationFrame !== undefined) {\n              _cancelAnimation()(this._drawAnimationFrame);\n              delete this._drawAnimationFrame;\n            }\n            if (this._paused) {\n              return;\n            }\n            var _iterator55 = _createForOfIteratorHelper(this.plugins),\n              _step55;\n            try {\n              for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {\n                var _step55$value = _slicedToArray(_step55.value, 2),\n                  plugin = _step55$value[1];\n                if (plugin.pause) {\n                  plugin.pause();\n                }\n              }\n            } catch (err) {\n              _iterator55.e(err);\n            } finally {\n              _iterator55.f();\n            }\n            if (!this.pageHidden) {\n              this._paused = true;\n            }\n            this._engine.dispatchEvent(\"containerPaused\", {\n              container: this\n            });\n          }\n        }, {\n          key: \"play\",\n          value: function play(force) {\n            if (!guardCheck(this)) {\n              return;\n            }\n            var needsUpdate = this._paused || force;\n            if (this._firstStart && !this.actualOptions.autoPlay) {\n              this._firstStart = false;\n              return;\n            }\n            if (this._paused) {\n              this._paused = false;\n            }\n            if (needsUpdate) {\n              var _iterator56 = _createForOfIteratorHelper(this.plugins),\n                _step56;\n              try {\n                for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {\n                  var _step56$value = _slicedToArray(_step56.value, 2),\n                    plugin = _step56$value[1];\n                  if (plugin.play) {\n                    plugin.play();\n                  }\n                }\n              } catch (err) {\n                _iterator56.e(err);\n              } finally {\n                _iterator56.f();\n              }\n            }\n            this._engine.dispatchEvent(\"containerPlay\", {\n              container: this\n            });\n            this.draw(needsUpdate || false);\n          }\n        }, {\n          key: \"refresh\",\n          value: function () {\n            var _refresh = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n              return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n                while (1) switch (_context15.prev = _context15.next) {\n                  case 0:\n                    if (guardCheck(this)) {\n                      _context15.next = 2;\n                      break;\n                    }\n                    return _context15.abrupt(\"return\");\n                  case 2:\n                    this.stop();\n                    return _context15.abrupt(\"return\", this.start());\n                  case 4:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }, _callee15, this);\n            }));\n            function refresh() {\n              return _refresh.apply(this, arguments);\n            }\n            return refresh;\n          }()\n        }, {\n          key: \"reset\",\n          value: function () {\n            var _reset2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n              return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n                while (1) switch (_context16.prev = _context16.next) {\n                  case 0:\n                    if (guardCheck(this)) {\n                      _context16.next = 2;\n                      break;\n                    }\n                    return _context16.abrupt(\"return\");\n                  case 2:\n                    this._options = loadContainerOptions(this._engine, this);\n                    return _context16.abrupt(\"return\", this.refresh());\n                  case 4:\n                  case \"end\":\n                    return _context16.stop();\n                }\n              }, _callee16, this);\n            }));\n            function reset() {\n              return _reset2.apply(this, arguments);\n            }\n            return reset;\n          }()\n        }, {\n          key: \"setNoise\",\n          value: function setNoise(noiseOrGenerator, init, update) {\n            if (!guardCheck(this)) {\n              return;\n            }\n            this.setPath(noiseOrGenerator, init, update);\n          }\n        }, {\n          key: \"setPath\",\n          value: function setPath(pathOrGenerator, init, update) {\n            if (!pathOrGenerator || !guardCheck(this)) {\n              return;\n            }\n            var pathGenerator = Object.assign({}, defaultPathGenerator);\n            if (typeof pathOrGenerator === \"function\") {\n              pathGenerator.generate = pathOrGenerator;\n              if (init) {\n                pathGenerator.init = init;\n              }\n              if (update) {\n                pathGenerator.update = update;\n              }\n            } else {\n              var oldGenerator = pathGenerator;\n              pathGenerator.generate = pathOrGenerator.generate || oldGenerator.generate;\n              pathGenerator.init = pathOrGenerator.init || oldGenerator.init;\n              pathGenerator.update = pathOrGenerator.update || oldGenerator.update;\n            }\n            this.addPath(defaultPathGeneratorKey, pathGenerator, true);\n          }\n        }, {\n          key: \"start\",\n          value: function () {\n            var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n              var _this27 = this;\n              return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n                while (1) switch (_context18.prev = _context18.next) {\n                  case 0:\n                    if (!(!guardCheck(this) || this.started)) {\n                      _context18.next = 2;\n                      break;\n                    }\n                    return _context18.abrupt(\"return\");\n                  case 2:\n                    _context18.next = 4;\n                    return this.init();\n                  case 4:\n                    this.started = true;\n                    _context18.next = 7;\n                    return new Promise(function (resolve) {\n                      _this27._delayTimeout = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n                        var _iterator57, _step57, _step57$value, plugin;\n                        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n                          while (1) switch (_context17.prev = _context17.next) {\n                            case 0:\n                              _this27._eventListeners.addListeners();\n                              if (_this27.interactivity.element instanceof HTMLElement && _this27._intersectionObserver) {\n                                _this27._intersectionObserver.observe(_this27.interactivity.element);\n                              }\n                              _iterator57 = _createForOfIteratorHelper(_this27.plugins);\n                              _context17.prev = 3;\n                              _iterator57.s();\n                            case 5:\n                              if ((_step57 = _iterator57.n()).done) {\n                                _context17.next = 12;\n                                break;\n                              }\n                              _step57$value = _slicedToArray(_step57.value, 2), plugin = _step57$value[1];\n                              if (!plugin.start) {\n                                _context17.next = 10;\n                                break;\n                              }\n                              _context17.next = 10;\n                              return plugin.start();\n                            case 10:\n                              _context17.next = 5;\n                              break;\n                            case 12:\n                              _context17.next = 17;\n                              break;\n                            case 14:\n                              _context17.prev = 14;\n                              _context17.t0 = _context17[\"catch\"](3);\n                              _iterator57.e(_context17.t0);\n                            case 17:\n                              _context17.prev = 17;\n                              _iterator57.f();\n                              return _context17.finish(17);\n                            case 20:\n                              _this27._engine.dispatchEvent(\"containerStarted\", {\n                                container: _this27\n                              });\n                              _this27.play();\n                              resolve();\n                            case 23:\n                            case \"end\":\n                              return _context17.stop();\n                          }\n                        }, _callee17, null, [[3, 14, 17, 20]]);\n                      })), _this27._delay);\n                    });\n                  case 7:\n                  case \"end\":\n                    return _context18.stop();\n                }\n              }, _callee18, this);\n            }));\n            function start() {\n              return _start.apply(this, arguments);\n            }\n            return start;\n          }()\n        }, {\n          key: \"stop\",\n          value: function stop() {\n            if (!guardCheck(this) || !this.started) {\n              return;\n            }\n            if (this._delayTimeout) {\n              clearTimeout(this._delayTimeout);\n              delete this._delayTimeout;\n            }\n            this._firstStart = true;\n            this.started = false;\n            this._eventListeners.removeListeners();\n            this.pause();\n            this.particles.clear();\n            this.canvas.clear();\n            if (this.interactivity.element instanceof HTMLElement && this._intersectionObserver) {\n              this._intersectionObserver.unobserve(this.interactivity.element);\n            }\n            var _iterator58 = _createForOfIteratorHelper(this.plugins),\n              _step58;\n            try {\n              for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {\n                var _step58$value = _slicedToArray(_step58.value, 2),\n                  plugin = _step58$value[1];\n                if (plugin.stop) {\n                  plugin.stop();\n                }\n              }\n            } catch (err) {\n              _iterator58.e(err);\n            } finally {\n              _iterator58.f();\n            }\n            var _iterator59 = _createForOfIteratorHelper(this.plugins.keys()),\n              _step59;\n            try {\n              for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {\n                var key = _step59.value;\n                this.plugins[\"delete\"](key);\n              }\n            } catch (err) {\n              _iterator59.e(err);\n            } finally {\n              _iterator59.f();\n            }\n            this._sourceOptions = this._options;\n            this._engine.dispatchEvent(\"containerStopped\", {\n              container: this\n            });\n          }\n        }, {\n          key: \"updateActualOptions\",\n          value: function updateActualOptions() {\n            this.actualOptions.responsive = [];\n            var newMaxWidth = this.actualOptions.setResponsive(this.canvas.size.width, this.retina.pixelRatio, this._options);\n            this.actualOptions.setTheme(this._currentTheme);\n            if (this.responsiveMaxWidth === newMaxWidth) {\n              return false;\n            }\n            this.responsiveMaxWidth = newMaxWidth;\n            return true;\n          }\n        }, {\n          key: \"_intersectionManager\",\n          value: function _intersectionManager(entries) {\n            if (!guardCheck(this) || !this.actualOptions.pauseOnOutsideViewport) {\n              return;\n            }\n            var _iterator60 = _createForOfIteratorHelper(entries),\n              _step60;\n            try {\n              for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {\n                var entry = _step60.value;\n                if (entry.target !== this.interactivity.element) {\n                  continue;\n                }\n                (entry.isIntersecting ? this.play : this.pause)();\n              }\n            } catch (err) {\n              _iterator60.e(err);\n            } finally {\n              _iterator60.f();\n            }\n          }\n        }]);\n        return Container;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Loader.js\n      function getDataFromUrl(_x12, _x13) {\n        return _getDataFromUrl.apply(this, arguments);\n      }\n      function _getDataFromUrl() {\n        _getDataFromUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee59(jsonUrl, index) {\n          var url, response;\n          return _regeneratorRuntime().wrap(function _callee59$(_context59) {\n            while (1) switch (_context59.prev = _context59.next) {\n              case 0:\n                url = _itemFromSingleOrMultiple(jsonUrl, index);\n                if (url) {\n                  _context59.next = 3;\n                  break;\n                }\n                return _context59.abrupt(\"return\");\n              case 3:\n                _context59.next = 5;\n                return fetch(url);\n              case 5:\n                response = _context59.sent;\n                if (!response.ok) {\n                  _context59.next = 8;\n                  break;\n                }\n                return _context59.abrupt(\"return\", response.json());\n              case 8:\n                console.error(\"tsParticles - Error \".concat(response.status, \" while retrieving config file\"));\n              case 9:\n              case \"end\":\n                return _context59.stop();\n            }\n          }, _callee59);\n        }));\n        return _getDataFromUrl.apply(this, arguments);\n      }\n      var Loader = /*#__PURE__*/function () {\n        function Loader(engine) {\n          _classCallCheck(this, Loader);\n          this._engine = engine;\n        }\n        _createClass(Loader, [{\n          key: \"load\",\n          value: function load(tagId, options, index) {\n            var params = {\n              index: index,\n              remote: false\n            };\n            if (typeof tagId === \"string\") {\n              params.tagId = tagId;\n            } else {\n              params.options = tagId;\n            }\n            if (typeof options === \"number\") {\n              params.index = options;\n            } else {\n              params.options = options !== null && options !== void 0 ? options : params.options;\n            }\n            return this.loadOptions(params);\n          }\n        }, {\n          key: \"loadJSON\",\n          value: function () {\n            var _loadJSON = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(tagId, jsonUrl, index) {\n              var url, id;\n              return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n                while (1) switch (_context19.prev = _context19.next) {\n                  case 0:\n                    if (typeof jsonUrl === \"number\" || jsonUrl === undefined) {\n                      url = tagId;\n                    } else {\n                      id = tagId;\n                      url = jsonUrl;\n                    }\n                    return _context19.abrupt(\"return\", this.loadRemoteOptions({\n                      tagId: id,\n                      url: url,\n                      index: index,\n                      remote: true\n                    }));\n                  case 2:\n                  case \"end\":\n                    return _context19.stop();\n                }\n              }, _callee19, this);\n            }));\n            function loadJSON(_x14, _x15, _x16) {\n              return _loadJSON.apply(this, arguments);\n            }\n            return loadJSON;\n          }()\n        }, {\n          key: \"loadOptions\",\n          value: function () {\n            var _loadOptions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(params) {\n              var _a, _b, _c, tagId, index, jsonUrl, remote, options, domContainer, currentOptions, dom, oldIndex, old, canvasEl, existingCanvases, newItem;\n              return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n                while (1) switch (_context20.prev = _context20.next) {\n                  case 0:\n                    tagId = (_a = params.tagId) !== null && _a !== void 0 ? _a : \"tsparticles\".concat(Math.floor(_getRandom() * 10000));\n                    index = params.index;\n                    jsonUrl = params.url;\n                    remote = params.remote;\n                    if (!remote) {\n                      _context20.next = 10;\n                      break;\n                    }\n                    _context20.next = 7;\n                    return getDataFromUrl(jsonUrl, index);\n                  case 7:\n                    _context20.t0 = _context20.sent;\n                    _context20.next = 11;\n                    break;\n                  case 10:\n                    _context20.t0 = params.options;\n                  case 11:\n                    options = _context20.t0;\n                    domContainer = (_b = params.element) !== null && _b !== void 0 ? _b : document.getElementById(tagId);\n                    if (!domContainer) {\n                      domContainer = document.createElement(\"div\");\n                      domContainer.id = tagId;\n                      (_c = document.querySelector(\"body\")) === null || _c === void 0 ? void 0 : _c.append(domContainer);\n                    }\n                    currentOptions = _itemFromSingleOrMultiple(options, index), dom = this._engine.dom(), oldIndex = dom.findIndex(function (v) {\n                      return v.id === tagId;\n                    });\n                    if (oldIndex >= 0) {\n                      old = this._engine.domItem(oldIndex);\n                      if (old && !old.destroyed) {\n                        old.destroy();\n                        dom.splice(oldIndex, 1);\n                      }\n                    }\n                    if (domContainer.tagName.toLowerCase() === \"canvas\") {\n                      canvasEl = domContainer;\n                      canvasEl.dataset[_generatedAttribute] = \"false\";\n                    } else {\n                      existingCanvases = domContainer.getElementsByTagName(\"canvas\");\n                      if (existingCanvases.length) {\n                        canvasEl = existingCanvases[0];\n                        canvasEl.dataset[_generatedAttribute] = \"false\";\n                      } else {\n                        canvasEl = document.createElement(\"canvas\");\n                        canvasEl.dataset[_generatedAttribute] = \"true\";\n                        domContainer.appendChild(canvasEl);\n                      }\n                    }\n                    if (!canvasEl.style.width) {\n                      canvasEl.style.width = \"100%\";\n                    }\n                    if (!canvasEl.style.height) {\n                      canvasEl.style.height = \"100%\";\n                    }\n                    newItem = new Container(this._engine, tagId, currentOptions);\n                    if (oldIndex >= 0) {\n                      dom.splice(oldIndex, 0, newItem);\n                    } else {\n                      dom.push(newItem);\n                    }\n                    newItem.canvas.loadCanvas(canvasEl);\n                    _context20.next = 24;\n                    return newItem.start();\n                  case 24:\n                    return _context20.abrupt(\"return\", newItem);\n                  case 25:\n                  case \"end\":\n                    return _context20.stop();\n                }\n              }, _callee20, this);\n            }));\n            function loadOptions(_x17) {\n              return _loadOptions2.apply(this, arguments);\n            }\n            return loadOptions;\n          }()\n        }, {\n          key: \"loadRemoteOptions\",\n          value: function () {\n            var _loadRemoteOptions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(params) {\n              return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n                while (1) switch (_context21.prev = _context21.next) {\n                  case 0:\n                    return _context21.abrupt(\"return\", this.loadOptions(params));\n                  case 1:\n                  case \"end\":\n                    return _context21.stop();\n                }\n              }, _callee21, this);\n            }));\n            function loadRemoteOptions(_x18) {\n              return _loadRemoteOptions.apply(this, arguments);\n            }\n            return loadRemoteOptions;\n          }()\n        }, {\n          key: \"set\",\n          value: function () {\n            var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(id, domContainer, options, index) {\n              var params;\n              return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n                while (1) switch (_context22.prev = _context22.next) {\n                  case 0:\n                    params = {\n                      index: index,\n                      remote: false\n                    };\n                    if (typeof id === \"string\") {\n                      params.tagId = id;\n                    } else {\n                      params.element = id;\n                    }\n                    if (domContainer instanceof HTMLElement) {\n                      params.element = domContainer;\n                    } else {\n                      params.options = domContainer;\n                    }\n                    if (typeof options === \"number\") {\n                      params.index = options;\n                    } else {\n                      params.options = options !== null && options !== void 0 ? options : params.options;\n                    }\n                    return _context22.abrupt(\"return\", this.loadOptions(params));\n                  case 5:\n                  case \"end\":\n                    return _context22.stop();\n                }\n              }, _callee22, this);\n            }));\n            function set(_x19, _x20, _x21, _x22) {\n              return _set.apply(this, arguments);\n            }\n            return set;\n          }()\n        }, {\n          key: \"setJSON\",\n          value: function () {\n            var _setJSON = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(id, domContainer, jsonUrl, index) {\n              var url, newId, newIndex, element;\n              return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n                while (1) switch (_context23.prev = _context23.next) {\n                  case 0:\n                    if (id instanceof HTMLElement) {\n                      element = id;\n                      url = domContainer;\n                      newIndex = jsonUrl;\n                    } else {\n                      newId = id;\n                      element = domContainer;\n                      url = jsonUrl;\n                      newIndex = index;\n                    }\n                    return _context23.abrupt(\"return\", this.loadRemoteOptions({\n                      tagId: newId,\n                      url: url,\n                      index: newIndex,\n                      element: element,\n                      remote: true\n                    }));\n                  case 2:\n                  case \"end\":\n                    return _context23.stop();\n                }\n              }, _callee23, this);\n            }));\n            function setJSON(_x23, _x24, _x25, _x26) {\n              return _setJSON.apply(this, arguments);\n            }\n            return setJSON;\n          }()\n        }]);\n        return Loader;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/Plugins.js\n\n      function getItemsFromInitializer(container, map, initializers) {\n        var force = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n        var res = map.get(container);\n        if (!res || force) {\n          res = _toConsumableArray(initializers.values()).map(function (t) {\n            return t(container);\n          });\n          map.set(container, res);\n        }\n        return res;\n      }\n      var Plugins = /*#__PURE__*/function () {\n        function Plugins(engine) {\n          _classCallCheck(this, Plugins);\n          this._engine = engine;\n          this.plugins = [];\n          this._initializers = {\n            interactors: new Map(),\n            movers: new Map(),\n            updaters: new Map()\n          };\n          this.interactors = new Map();\n          this.movers = new Map();\n          this.updaters = new Map();\n          this.presets = new Map();\n          this.drawers = new Map();\n          this.pathGenerators = new Map();\n        }\n        _createClass(Plugins, [{\n          key: \"addInteractor\",\n          value: function addInteractor(name, initInteractor) {\n            this._initializers.interactors.set(name, initInteractor);\n          }\n        }, {\n          key: \"addParticleMover\",\n          value: function addParticleMover(name, initMover) {\n            this._initializers.movers.set(name, initMover);\n          }\n        }, {\n          key: \"addParticleUpdater\",\n          value: function addParticleUpdater(name, initUpdater) {\n            this._initializers.updaters.set(name, initUpdater);\n          }\n        }, {\n          key: \"addPathGenerator\",\n          value: function addPathGenerator(type, pathGenerator) {\n            if (!this.getPathGenerator(type)) {\n              this.pathGenerators.set(type, pathGenerator);\n            }\n          }\n        }, {\n          key: \"addPlugin\",\n          value: function addPlugin(plugin) {\n            if (!this.getPlugin(plugin.id)) {\n              this.plugins.push(plugin);\n            }\n          }\n        }, {\n          key: \"addPreset\",\n          value: function addPreset(presetKey, options) {\n            var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n            if (override || !this.getPreset(presetKey)) {\n              this.presets.set(presetKey, options);\n            }\n          }\n        }, {\n          key: \"addShapeDrawer\",\n          value: function addShapeDrawer(types, drawer) {\n            var _this28 = this;\n            _executeOnSingleOrMultiple(types, function (type) {\n              if (!_this28.getShapeDrawer(type)) {\n                _this28.drawers.set(type, drawer);\n              }\n            });\n          }\n        }, {\n          key: \"destroy\",\n          value: function destroy(container) {\n            this.updaters[\"delete\"](container);\n            this.movers[\"delete\"](container);\n            this.interactors[\"delete\"](container);\n          }\n        }, {\n          key: \"getAvailablePlugins\",\n          value: function getAvailablePlugins(container) {\n            var res = new Map();\n            var _iterator61 = _createForOfIteratorHelper(this.plugins),\n              _step61;\n            try {\n              for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {\n                var plugin = _step61.value;\n                if (!plugin.needsPlugin(container.actualOptions)) {\n                  continue;\n                }\n                res.set(plugin.id, plugin.getPlugin(container));\n              }\n            } catch (err) {\n              _iterator61.e(err);\n            } finally {\n              _iterator61.f();\n            }\n            return res;\n          }\n        }, {\n          key: \"getInteractors\",\n          value: function getInteractors(container) {\n            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            return getItemsFromInitializer(container, this.interactors, this._initializers.interactors, force);\n          }\n        }, {\n          key: \"getMovers\",\n          value: function getMovers(container) {\n            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            return getItemsFromInitializer(container, this.movers, this._initializers.movers, force);\n          }\n        }, {\n          key: \"getPathGenerator\",\n          value: function getPathGenerator(type) {\n            return this.pathGenerators.get(type);\n          }\n        }, {\n          key: \"getPlugin\",\n          value: function getPlugin(plugin) {\n            return this.plugins.find(function (t) {\n              return t.id === plugin;\n            });\n          }\n        }, {\n          key: \"getPreset\",\n          value: function getPreset(preset) {\n            return this.presets.get(preset);\n          }\n        }, {\n          key: \"getShapeDrawer\",\n          value: function getShapeDrawer(type) {\n            return this.drawers.get(type);\n          }\n        }, {\n          key: \"getSupportedShapes\",\n          value: function getSupportedShapes() {\n            return this.drawers.keys();\n          }\n        }, {\n          key: \"getUpdaters\",\n          value: function getUpdaters(container) {\n            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            return getItemsFromInitializer(container, this.updaters, this._initializers.updaters, force);\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions(options, sourceOptions) {\n            var _iterator62 = _createForOfIteratorHelper(this.plugins),\n              _step62;\n            try {\n              for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {\n                var plugin = _step62.value;\n                plugin.loadOptions(options, sourceOptions);\n              }\n            } catch (err) {\n              _iterator62.e(err);\n            } finally {\n              _iterator62.f();\n            }\n          }\n        }, {\n          key: \"loadParticlesOptions\",\n          value: function loadParticlesOptions(container, options) {\n            var updaters = this.updaters.get(container);\n            if (!updaters) {\n              return;\n            }\n            for (var _len5 = arguments.length, sourceOptions = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {\n              sourceOptions[_key5 - 2] = arguments[_key5];\n            }\n            var _iterator63 = _createForOfIteratorHelper(updaters),\n              _step63;\n            try {\n              for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {\n                var updater = _step63.value;\n                if (updater.loadOptions) {\n                  updater.loadOptions.apply(updater, [options].concat(sourceOptions));\n                }\n              }\n            } catch (err) {\n              _iterator63.e(err);\n            } finally {\n              _iterator63.f();\n            }\n          }\n        }]);\n        return Plugins;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/engine.js\n      var Engine = /*#__PURE__*/function () {\n        function Engine() {\n          _classCallCheck(this, Engine);\n          this._domArray = [];\n          this._eventDispatcher = new EventDispatcher();\n          this._initialized = false;\n          this._loader = new Loader(this);\n          this.plugins = new Plugins(this);\n        }\n        _createClass(Engine, [{\n          key: \"addEventListener\",\n          value: function addEventListener(type, listener) {\n            this._eventDispatcher.addEventListener(type, listener);\n          }\n        }, {\n          key: \"addInteractor\",\n          value: function () {\n            var _addInteractor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24(name, interactorInitializer) {\n              return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n                while (1) switch (_context24.prev = _context24.next) {\n                  case 0:\n                    this.plugins.addInteractor(name, interactorInitializer);\n                    _context24.next = 3;\n                    return this.refresh();\n                  case 3:\n                  case \"end\":\n                    return _context24.stop();\n                }\n              }, _callee24, this);\n            }));\n            function addInteractor(_x27, _x28) {\n              return _addInteractor.apply(this, arguments);\n            }\n            return addInteractor;\n          }()\n        }, {\n          key: \"addMover\",\n          value: function () {\n            var _addMover = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(name, moverInitializer) {\n              return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n                while (1) switch (_context25.prev = _context25.next) {\n                  case 0:\n                    this.plugins.addParticleMover(name, moverInitializer);\n                    _context25.next = 3;\n                    return this.refresh();\n                  case 3:\n                  case \"end\":\n                    return _context25.stop();\n                }\n              }, _callee25, this);\n            }));\n            function addMover(_x29, _x30) {\n              return _addMover.apply(this, arguments);\n            }\n            return addMover;\n          }()\n        }, {\n          key: \"addParticleUpdater\",\n          value: function () {\n            var _addParticleUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(name, updaterInitializer) {\n              return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n                while (1) switch (_context26.prev = _context26.next) {\n                  case 0:\n                    this.plugins.addParticleUpdater(name, updaterInitializer);\n                    _context26.next = 3;\n                    return this.refresh();\n                  case 3:\n                  case \"end\":\n                    return _context26.stop();\n                }\n              }, _callee26, this);\n            }));\n            function addParticleUpdater(_x31, _x32) {\n              return _addParticleUpdater.apply(this, arguments);\n            }\n            return addParticleUpdater;\n          }()\n        }, {\n          key: \"addPathGenerator\",\n          value: function () {\n            var _addPathGenerator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(name, generator) {\n              return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n                while (1) switch (_context27.prev = _context27.next) {\n                  case 0:\n                    this.plugins.addPathGenerator(name, generator);\n                    _context27.next = 3;\n                    return this.refresh();\n                  case 3:\n                  case \"end\":\n                    return _context27.stop();\n                }\n              }, _callee27, this);\n            }));\n            function addPathGenerator(_x33, _x34) {\n              return _addPathGenerator.apply(this, arguments);\n            }\n            return addPathGenerator;\n          }()\n        }, {\n          key: \"addPlugin\",\n          value: function () {\n            var _addPlugin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(plugin) {\n              return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n                while (1) switch (_context28.prev = _context28.next) {\n                  case 0:\n                    this.plugins.addPlugin(plugin);\n                    _context28.next = 3;\n                    return this.refresh();\n                  case 3:\n                  case \"end\":\n                    return _context28.stop();\n                }\n              }, _callee28, this);\n            }));\n            function addPlugin(_x35) {\n              return _addPlugin.apply(this, arguments);\n            }\n            return addPlugin;\n          }()\n        }, {\n          key: \"addPreset\",\n          value: function () {\n            var _addPreset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(preset, options) {\n              var override,\n                _args29 = arguments;\n              return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n                while (1) switch (_context29.prev = _context29.next) {\n                  case 0:\n                    override = _args29.length > 2 && _args29[2] !== undefined ? _args29[2] : false;\n                    this.plugins.addPreset(preset, options, override);\n                    _context29.next = 4;\n                    return this.refresh();\n                  case 4:\n                  case \"end\":\n                    return _context29.stop();\n                }\n              }, _callee29, this);\n            }));\n            function addPreset(_x36, _x37) {\n              return _addPreset.apply(this, arguments);\n            }\n            return addPreset;\n          }()\n        }, {\n          key: \"addShape\",\n          value: function () {\n            var _addShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee30(shape, drawer, init, afterEffect, destroy) {\n              var customDrawer;\n              return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n                while (1) switch (_context30.prev = _context30.next) {\n                  case 0:\n                    if (typeof drawer === \"function\") {\n                      customDrawer = {\n                        afterEffect: afterEffect,\n                        destroy: destroy,\n                        draw: drawer,\n                        init: init\n                      };\n                    } else {\n                      customDrawer = drawer;\n                    }\n                    this.plugins.addShapeDrawer(shape, customDrawer);\n                    _context30.next = 4;\n                    return this.refresh();\n                  case 4:\n                  case \"end\":\n                    return _context30.stop();\n                }\n              }, _callee30, this);\n            }));\n            function addShape(_x38, _x39, _x40, _x41, _x42) {\n              return _addShape.apply(this, arguments);\n            }\n            return addShape;\n          }()\n        }, {\n          key: \"dispatchEvent\",\n          value: function dispatchEvent(type, args) {\n            this._eventDispatcher.dispatchEvent(type, args);\n          }\n        }, {\n          key: \"dom\",\n          value: function dom() {\n            return this._domArray;\n          }\n        }, {\n          key: \"domItem\",\n          value: function domItem(index) {\n            var dom = this.dom(),\n              item = dom[index];\n            if (item && !item.destroyed) {\n              return item;\n            }\n            dom.splice(index, 1);\n          }\n        }, {\n          key: \"init\",\n          value: function init() {\n            if (!this._initialized) {\n              this._initialized = true;\n            }\n          }\n        }, {\n          key: \"load\",\n          value: function () {\n            var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee31(tagId, options) {\n              return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n                while (1) switch (_context31.prev = _context31.next) {\n                  case 0:\n                    return _context31.abrupt(\"return\", this._loader.load(tagId, options));\n                  case 1:\n                  case \"end\":\n                    return _context31.stop();\n                }\n              }, _callee31, this);\n            }));\n            function load(_x43, _x44) {\n              return _load.apply(this, arguments);\n            }\n            return load;\n          }()\n        }, {\n          key: \"loadFromArray\",\n          value: function () {\n            var _loadFromArray = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee32(tagId, options, index) {\n              return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n                while (1) switch (_context32.prev = _context32.next) {\n                  case 0:\n                    return _context32.abrupt(\"return\", this._loader.load(tagId, options, index));\n                  case 1:\n                  case \"end\":\n                    return _context32.stop();\n                }\n              }, _callee32, this);\n            }));\n            function loadFromArray(_x45, _x46, _x47) {\n              return _loadFromArray.apply(this, arguments);\n            }\n            return loadFromArray;\n          }()\n        }, {\n          key: \"loadJSON\",\n          value: function () {\n            var _loadJSON2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee33(tagId, pathConfigJson, index) {\n              return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n                while (1) switch (_context33.prev = _context33.next) {\n                  case 0:\n                    return _context33.abrupt(\"return\", this._loader.loadJSON(tagId, pathConfigJson, index));\n                  case 1:\n                  case \"end\":\n                    return _context33.stop();\n                }\n              }, _callee33, this);\n            }));\n            function loadJSON(_x48, _x49, _x50) {\n              return _loadJSON2.apply(this, arguments);\n            }\n            return loadJSON;\n          }()\n        }, {\n          key: \"refresh\",\n          value: function () {\n            var _refresh2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n              var _iterator64, _step64, instance;\n              return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n                while (1) switch (_context34.prev = _context34.next) {\n                  case 0:\n                    _iterator64 = _createForOfIteratorHelper(this.dom());\n                    _context34.prev = 1;\n                    _iterator64.s();\n                  case 3:\n                    if ((_step64 = _iterator64.n()).done) {\n                      _context34.next = 9;\n                      break;\n                    }\n                    instance = _step64.value;\n                    _context34.next = 7;\n                    return instance.refresh();\n                  case 7:\n                    _context34.next = 3;\n                    break;\n                  case 9:\n                    _context34.next = 14;\n                    break;\n                  case 11:\n                    _context34.prev = 11;\n                    _context34.t0 = _context34[\"catch\"](1);\n                    _iterator64.e(_context34.t0);\n                  case 14:\n                    _context34.prev = 14;\n                    _iterator64.f();\n                    return _context34.finish(14);\n                  case 17:\n                  case \"end\":\n                    return _context34.stop();\n                }\n              }, _callee34, this, [[1, 11, 14, 17]]);\n            }));\n            function refresh() {\n              return _refresh2.apply(this, arguments);\n            }\n            return refresh;\n          }()\n        }, {\n          key: \"removeEventListener\",\n          value: function removeEventListener(type, listener) {\n            this._eventDispatcher.removeEventListener(type, listener);\n          }\n        }, {\n          key: \"set\",\n          value: function () {\n            var _set2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee35(id, element, options) {\n              return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n                while (1) switch (_context35.prev = _context35.next) {\n                  case 0:\n                    return _context35.abrupt(\"return\", this._loader.set(id, element, options));\n                  case 1:\n                  case \"end\":\n                    return _context35.stop();\n                }\n              }, _callee35, this);\n            }));\n            function set(_x51, _x52, _x53) {\n              return _set2.apply(this, arguments);\n            }\n            return set;\n          }()\n        }, {\n          key: \"setJSON\",\n          value: function () {\n            var _setJSON2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee36(id, element, pathConfigJson, index) {\n              return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n                while (1) switch (_context36.prev = _context36.next) {\n                  case 0:\n                    return _context36.abrupt(\"return\", this._loader.setJSON(id, element, pathConfigJson, index));\n                  case 1:\n                  case \"end\":\n                    return _context36.stop();\n                }\n              }, _callee36, this);\n            }));\n            function setJSON(_x54, _x55, _x56, _x57) {\n              return _setJSON2.apply(this, arguments);\n            }\n            return setJSON;\n          }()\n        }, {\n          key: \"setOnClickHandler\",\n          value: function setOnClickHandler(callback) {\n            var dom = this.dom();\n            if (!dom.length) {\n              throw new Error(\"Can only set click handlers after calling tsParticles.load() or tsParticles.loadJSON()\");\n            }\n            var _iterator65 = _createForOfIteratorHelper(dom),\n              _step65;\n            try {\n              for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {\n                var domItem = _step65.value;\n                domItem.addClickHandler(callback);\n              }\n            } catch (err) {\n              _iterator65.e(err);\n            } finally {\n              _iterator65.f();\n            }\n          }\n        }]);\n        return Engine;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Utils/HslColorManager.js\n      var _HslColorManager = /*#__PURE__*/function () {\n        function _HslColorManager() {\n          _classCallCheck(this, _HslColorManager);\n          this.key = \"hsl\";\n          this.stringPrefix = \"hsl\";\n        }\n        _createClass(_HslColorManager, [{\n          key: \"handleColor\",\n          value: function handleColor(color) {\n            var _a;\n            var colorValue = color.value,\n              hslColor = (_a = colorValue.hsl) !== null && _a !== void 0 ? _a : color.value;\n            if (hslColor.h !== undefined && hslColor.s !== undefined && hslColor.l !== undefined) {\n              return _hslToRgb(hslColor);\n            }\n          }\n        }, {\n          key: \"handleRangeColor\",\n          value: function handleRangeColor(color) {\n            var _a;\n            var colorValue = color.value,\n              hslColor = (_a = colorValue.hsl) !== null && _a !== void 0 ? _a : color.value;\n            if (hslColor.h !== undefined && hslColor.l !== undefined) {\n              return _hslToRgb({\n                h: _getRangeValue(hslColor.h),\n                l: _getRangeValue(hslColor.l),\n                s: _getRangeValue(hslColor.s)\n              });\n            }\n          }\n        }, {\n          key: \"parseString\",\n          value: function parseString(input) {\n            if (!input.startsWith(\"hsl\")) {\n              return;\n            }\n            var regex = /hsla?\\(\\s*(\\d+)\\s*,\\s*(\\d+)%\\s*,\\s*(\\d+)%\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i,\n              result = regex.exec(input);\n            return result ? _hslaToRgba({\n              a: result.length > 4 ? _parseAlpha(result[5]) : 1,\n              h: parseInt(result[1], 10),\n              l: parseInt(result[3], 10),\n              s: parseInt(result[2], 10)\n            }) : undefined;\n          }\n        }]);\n        return _HslColorManager;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Utils/RgbColorManager.js\n      var _RgbColorManager = /*#__PURE__*/function () {\n        function _RgbColorManager() {\n          _classCallCheck(this, _RgbColorManager);\n          this.key = \"rgb\";\n          this.stringPrefix = \"rgb\";\n        }\n        _createClass(_RgbColorManager, [{\n          key: \"handleColor\",\n          value: function handleColor(color) {\n            var _a;\n            var colorValue = color.value,\n              rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n            if (rgbColor.r !== undefined) {\n              return rgbColor;\n            }\n          }\n        }, {\n          key: \"handleRangeColor\",\n          value: function handleRangeColor(color) {\n            var _a;\n            var colorValue = color.value,\n              rgbColor = (_a = colorValue.rgb) !== null && _a !== void 0 ? _a : color.value;\n            if (rgbColor.r !== undefined) {\n              return {\n                r: _getRangeValue(rgbColor.r),\n                g: _getRangeValue(rgbColor.g),\n                b: _getRangeValue(rgbColor.b)\n              };\n            }\n          }\n        }, {\n          key: \"parseString\",\n          value: function parseString(input) {\n            if (!input.startsWith(this.stringPrefix)) {\n              return;\n            }\n            var regex = /rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([\\d.%]+)\\s*)?\\)/i,\n              result = regex.exec(input);\n            return result ? {\n              a: result.length > 4 ? _parseAlpha(result[5]) : 1,\n              b: parseInt(result[3], 10),\n              g: parseInt(result[2], 10),\n              r: parseInt(result[1], 10)\n            } : undefined;\n          }\n        }]);\n        return _RgbColorManager;\n      }();\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/ExternalInteractorBase.js\n      var _ExternalInteractorBase = /*#__PURE__*/_createClass(function _ExternalInteractorBase(container) {\n        _classCallCheck(this, _ExternalInteractorBase);\n        this.container = container;\n        this.type = \"external\";\n      });\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/Core/Utils/ParticlesInteractorBase.js\n      var _ParticlesInteractorBase = /*#__PURE__*/_createClass(function _ParticlesInteractorBase(container) {\n        _classCallCheck(this, _ParticlesInteractorBase);\n        this.container = container;\n        this.type = \"particles\";\n      });\n      ; // CONCATENATED MODULE: ../../engine/dist/esm/index.js\n\n      var rgbColorManager = new _RgbColorManager(),\n        hslColorManager = new _HslColorManager();\n      _addColorManager(rgbColorManager);\n      _addColorManager(hslColorManager);\n      var _tsParticles = new Engine();\n      _tsParticles.init();\n      ; // CONCATENATED MODULE: ../../plugins/absorbers/dist/esm/Options/Classes/AbsorberSizeLimit.js\n      var AbsorberSizeLimit = /*#__PURE__*/function () {\n        function AbsorberSizeLimit() {\n          _classCallCheck(this, AbsorberSizeLimit);\n          this.radius = 0;\n          this.mass = 0;\n        }\n        _createClass(AbsorberSizeLimit, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.mass !== undefined) {\n              this.mass = data.mass;\n            }\n            if (data.radius !== undefined) {\n              this.radius = data.radius;\n            }\n          }\n        }]);\n        return AbsorberSizeLimit;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/absorbers/dist/esm/Options/Classes/AbsorberSize.js\n      var AbsorberSize = /*#__PURE__*/function (_ValueWithRandom6) {\n        _inherits(AbsorberSize, _ValueWithRandom6);\n        var _super11 = _createSuper(AbsorberSize);\n        function AbsorberSize() {\n          var _this29;\n          _classCallCheck(this, AbsorberSize);\n          _this29 = _super11.call(this);\n          _this29.density = 5;\n          _this29.value = 50;\n          _this29.limit = new AbsorberSizeLimit();\n          return _this29;\n        }\n        _createClass(AbsorberSize, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            _get(_getPrototypeOf(AbsorberSize.prototype), \"load\", this).call(this, data);\n            if (data.density !== undefined) {\n              this.density = data.density;\n            }\n            if (typeof data.limit === \"number\") {\n              this.limit.radius = data.limit;\n            } else {\n              this.limit.load(data.limit);\n            }\n          }\n        }]);\n        return AbsorberSize;\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../plugins/absorbers/dist/esm/Options/Classes/Absorber.js\n      var Absorber = /*#__PURE__*/function () {\n        function Absorber() {\n          _classCallCheck(this, Absorber);\n          this.color = new _OptionsColor();\n          this.color.value = \"#000000\";\n          this.draggable = false;\n          this.opacity = 1;\n          this.destroy = true;\n          this.orbits = false;\n          this.size = new AbsorberSize();\n        }\n        _createClass(Absorber, [{\n          key: \"load\",\n          value: function load(data) {\n            if (data === undefined) {\n              return;\n            }\n            if (data.color !== undefined) {\n              this.color = _OptionsColor.create(this.color, data.color);\n            }\n            if (data.draggable !== undefined) {\n              this.draggable = data.draggable;\n            }\n            this.name = data.name;\n            if (data.opacity !== undefined) {\n              this.opacity = data.opacity;\n            }\n            if (data.position !== undefined) {\n              this.position = {};\n              if (data.position.x !== undefined) {\n                this.position.x = _setRangeValue(data.position.x);\n              }\n              if (data.position.y !== undefined) {\n                this.position.y = _setRangeValue(data.position.y);\n              }\n            }\n            if (data.size !== undefined) {\n              this.size.load(data.size);\n            }\n            if (data.destroy !== undefined) {\n              this.destroy = data.destroy;\n            }\n            if (data.orbits !== undefined) {\n              this.orbits = data.orbits;\n            }\n          }\n        }]);\n        return Absorber;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/absorbers/dist/esm/AbsorberInstance.js\n      var AbsorberInstance = /*#__PURE__*/function () {\n        function AbsorberInstance(absorbers, container, options, position) {\n          _classCallCheck(this, AbsorberInstance);\n          var _a, _b, _c;\n          this.absorbers = absorbers;\n          this.container = container;\n          this.initialPosition = position ? _Vector.create(position.x, position.y) : undefined;\n          if (options instanceof Absorber) {\n            this.options = options;\n          } else {\n            this.options = new Absorber();\n            this.options.load(options);\n          }\n          this.dragging = false;\n          this.name = this.options.name;\n          this.opacity = this.options.opacity;\n          this.size = _getRangeValue(this.options.size.value) * container.retina.pixelRatio;\n          this.mass = this.size * this.options.size.density * container.retina.reduceFactor;\n          var limit = this.options.size.limit;\n          this.limit = {\n            radius: limit.radius * container.retina.pixelRatio * container.retina.reduceFactor,\n            mass: limit.mass\n          };\n          this.color = (_a = _rangeColorToRgb(this.options.color)) !== null && _a !== void 0 ? _a : {\n            b: 0,\n            g: 0,\n            r: 0\n          };\n          this.position = (_c = (_b = this.initialPosition) === null || _b === void 0 ? void 0 : _b.copy()) !== null && _c !== void 0 ? _c : this.calcPosition();\n        }\n        _createClass(AbsorberInstance, [{\n          key: \"attract\",\n          value: function attract(particle) {\n            var container = this.container,\n              options = this.options;\n            if (options.draggable) {\n              var mouse = container.interactivity.mouse;\n              if (mouse.clicking && mouse.downPosition) {\n                var mouseDist = _getDistance(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                  this.dragging = true;\n                }\n              } else {\n                this.dragging = false;\n              }\n              if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n              }\n            }\n            var pos = particle.getPosition(),\n              _getDistances3 = _getDistances(this.position, pos),\n              dx = _getDistances3.dx,\n              dy = _getDistances3.dy,\n              distance = _getDistances3.distance,\n              v = _Vector.create(dx, dy);\n            v.length = this.mass / Math.pow(distance, 2) * container.retina.reduceFactor;\n            if (distance < this.size + particle.getRadius()) {\n              var sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n              if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0) {\n                if (options.destroy) {\n                  particle.destroy();\n                } else {\n                  particle.needsNewPosition = true;\n                  this.updateParticlePosition(particle, v);\n                }\n              } else {\n                if (options.destroy) {\n                  particle.size.value -= sizeFactor;\n                }\n                this.updateParticlePosition(particle, v);\n              }\n              if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n              }\n              if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n              }\n            } else {\n              this.updateParticlePosition(particle, v);\n            }\n          }\n        }, {\n          key: \"draw\",\n          value: function draw(context) {\n            context.translate(this.position.x, this.position.y);\n            context.beginPath();\n            context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n            context.closePath();\n            context.fillStyle = _getStyleFromRgb(this.color, this.opacity);\n            context.fill();\n          }\n        }, {\n          key: \"resize\",\n          value: function resize() {\n            var initialPosition = this.initialPosition;\n            this.position = initialPosition && _isPointInside(initialPosition, this.container.canvas.size, _Vector.origin) ? initialPosition : this.calcPosition();\n          }\n        }, {\n          key: \"calcPosition\",\n          value: function calcPosition() {\n            var exactPosition = _calcPositionOrRandomFromSizeRanged({\n              size: this.container.canvas.size,\n              position: this.options.position\n            });\n            return _Vector.create(exactPosition.x, exactPosition.y);\n          }\n        }, {\n          key: \"updateParticlePosition\",\n          value: function updateParticlePosition(particle, v) {\n            var _a;\n            if (particle.destroyed) {\n              return;\n            }\n            var container = this.container,\n              canvasSize = container.canvas.size;\n            if (particle.needsNewPosition) {\n              var newPosition = _calcPositionOrRandomFromSize({\n                size: canvasSize\n              });\n              particle.position.setTo(newPosition);\n              particle.velocity.setTo(particle.initialVelocity);\n              particle.absorberOrbit = undefined;\n              particle.needsNewPosition = false;\n            }\n            if (this.options.orbits) {\n              if (particle.absorberOrbit === undefined) {\n                particle.absorberOrbit = _Vector.create(0, 0);\n                particle.absorberOrbit.length = _getDistance(particle.getPosition(), this.position);\n                particle.absorberOrbit.angle = _getRandom() * Math.PI * 2;\n              }\n              if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                var minSize = Math.min(canvasSize.width, canvasSize.height);\n                particle.absorberOrbit.length = minSize * (1 + (_getRandom() * 0.2 - 0.1));\n              }\n              if (particle.absorberOrbitDirection === undefined) {\n                particle.absorberOrbitDirection = particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\";\n              }\n              var orbitRadius = particle.absorberOrbit.length,\n                orbitAngle = particle.absorberOrbit.angle,\n                orbitDirection = particle.absorberOrbitDirection;\n              particle.velocity.setTo(_Vector.origin);\n              var updateFunc = {\n                x: orbitDirection === \"clockwise\" ? Math.cos : Math.sin,\n                y: orbitDirection === \"clockwise\" ? Math.sin : Math.cos\n              };\n              particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n              particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n              particle.absorberOrbit.length -= v.length;\n              particle.absorberOrbit.angle += ((_a = particle.retina.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio / 100 * container.retina.reduceFactor;\n            } else {\n              var addV = _Vector.origin;\n              addV.length = v.length;\n              addV.angle = v.angle;\n              particle.velocity.addTo(addV);\n            }\n          }\n        }]);\n        return AbsorberInstance;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/absorbers/dist/esm/Absorbers.js\n      var Absorbers = /*#__PURE__*/function () {\n        function Absorbers(container) {\n          var _this30 = this;\n          _classCallCheck(this, Absorbers);\n          this.container = container;\n          this.array = [];\n          this.absorbers = [];\n          this.interactivityAbsorbers = [];\n          container.getAbsorber = function (idxOrName) {\n            return idxOrName === undefined || typeof idxOrName === \"number\" ? _this30.array[idxOrName || 0] : _this30.array.find(function (t) {\n              return t.name === idxOrName;\n            });\n          };\n          container.addAbsorber = function (options, position) {\n            return _this30.addAbsorber(options, position);\n          };\n        }\n        _createClass(Absorbers, [{\n          key: \"addAbsorber\",\n          value: function addAbsorber(options, position) {\n            var absorber = new AbsorberInstance(this, this.container, options, position);\n            this.array.push(absorber);\n            return absorber;\n          }\n        }, {\n          key: \"draw\",\n          value: function draw(context) {\n            var _iterator66 = _createForOfIteratorHelper(this.array),\n              _step66;\n            try {\n              for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {\n                var absorber = _step66.value;\n                absorber.draw(context);\n              }\n            } catch (err) {\n              _iterator66.e(err);\n            } finally {\n              _iterator66.f();\n            }\n          }\n        }, {\n          key: \"handleClickMode\",\n          value: function handleClickMode(mode) {\n            var absorberOptions = this.absorbers,\n              modeAbsorbers = this.interactivityAbsorbers;\n            if (mode === \"absorber\") {\n              var absorbersModeOptions = _itemFromSingleOrMultiple(modeAbsorbers),\n                absorbersOptions = absorbersModeOptions !== null && absorbersModeOptions !== void 0 ? absorbersModeOptions : _itemFromSingleOrMultiple(absorberOptions),\n                aPosition = this.container.interactivity.mouse.clickPosition;\n              this.addAbsorber(absorbersOptions, aPosition);\n            }\n          }\n        }, {\n          key: \"init\",\n          value: function () {\n            var _init3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n              var _this31 = this;\n              return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n                while (1) switch (_context37.prev = _context37.next) {\n                  case 0:\n                    this.absorbers = this.container.actualOptions.absorbers;\n                    this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n                    _executeOnSingleOrMultiple(this.absorbers, function (absorber) {\n                      _this31.addAbsorber(absorber);\n                    });\n                  case 3:\n                  case \"end\":\n                    return _context37.stop();\n                }\n              }, _callee37, this);\n            }));\n            function init() {\n              return _init3.apply(this, arguments);\n            }\n            return init;\n          }()\n        }, {\n          key: \"particleUpdate\",\n          value: function particleUpdate(particle) {\n            var _iterator67 = _createForOfIteratorHelper(this.array),\n              _step67;\n            try {\n              for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {\n                var absorber = _step67.value;\n                absorber.attract(particle);\n                if (particle.destroyed) {\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator67.e(err);\n            } finally {\n              _iterator67.f();\n            }\n          }\n        }, {\n          key: \"removeAbsorber\",\n          value: function removeAbsorber(absorber) {\n            var index = this.array.indexOf(absorber);\n            if (index >= 0) {\n              this.array.splice(index, 1);\n            }\n          }\n        }, {\n          key: \"resize\",\n          value: function resize() {\n            var _iterator68 = _createForOfIteratorHelper(this.array),\n              _step68;\n            try {\n              for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {\n                var absorber = _step68.value;\n                absorber.resize();\n              }\n            } catch (err) {\n              _iterator68.e(err);\n            } finally {\n              _iterator68.f();\n            }\n          }\n        }, {\n          key: \"stop\",\n          value: function stop() {\n            this.array = [];\n          }\n        }]);\n        return Absorbers;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/absorbers/dist/esm/index.js\n      var AbsorbersPlugin = /*#__PURE__*/function () {\n        function AbsorbersPlugin() {\n          _classCallCheck(this, AbsorbersPlugin);\n          this.id = \"absorbers\";\n        }\n        _createClass(AbsorbersPlugin, [{\n          key: \"getPlugin\",\n          value: function getPlugin(container) {\n            return new Absorbers(container);\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions(options, source) {\n            var _a, _b;\n            if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n              return;\n            }\n            if (source === null || source === void 0 ? void 0 : source.absorbers) {\n              options.absorbers = _executeOnSingleOrMultiple(source.absorbers, function (absorber) {\n                var tmp = new Absorber();\n                tmp.load(absorber);\n                return tmp;\n              });\n            }\n            options.interactivity.modes.absorbers = _executeOnSingleOrMultiple((_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.absorbers, function (absorber) {\n              var tmp = new Absorber();\n              tmp.load(absorber);\n              return tmp;\n            });\n          }\n        }, {\n          key: \"needsPlugin\",\n          value: function needsPlugin(options) {\n            var _a, _b, _c;\n            if (!options) {\n              return false;\n            }\n            var absorbers = options.absorbers;\n            if (absorbers instanceof Array) {\n              return !!absorbers.length;\n            } else if (absorbers) {\n              return true;\n            } else if (((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) && _isInArray(\"absorber\", options.interactivity.events.onClick.mode)) {\n              return true;\n            }\n            return false;\n          }\n        }]);\n        return AbsorbersPlugin;\n      }();\n      function loadAbsorbersPlugin(_x58) {\n        return _loadAbsorbersPlugin.apply(this, arguments);\n      }\n      function _loadAbsorbersPlugin() {\n        _loadAbsorbersPlugin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee60(engine) {\n          var plugin;\n          return _regeneratorRuntime().wrap(function _callee60$(_context60) {\n            while (1) switch (_context60.prev = _context60.next) {\n              case 0:\n                plugin = new AbsorbersPlugin();\n                _context60.next = 3;\n                return engine.addPlugin(plugin);\n              case 3:\n              case \"end\":\n                return _context60.stop();\n            }\n          }, _callee60);\n        }));\n        return _loadAbsorbersPlugin.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/destroy/dist/esm/Options/Classes/DestroyBounds.js\n      var DestroyBounds = /*#__PURE__*/function () {\n        function DestroyBounds() {\n          _classCallCheck(this, DestroyBounds);\n        }\n        _createClass(DestroyBounds, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.bottom !== undefined) {\n              this.bottom = _setRangeValue(data.bottom);\n            }\n            if (data.left !== undefined) {\n              this.left = _setRangeValue(data.left);\n            }\n            if (data.right !== undefined) {\n              this.right = _setRangeValue(data.right);\n            }\n            if (data.top !== undefined) {\n              this.top = _setRangeValue(data.top);\n            }\n          }\n        }]);\n        return DestroyBounds;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/destroy/dist/esm/Options/Classes/SplitFactor.js\n      var SplitFactor = /*#__PURE__*/function (_ValueWithRandom7) {\n        _inherits(SplitFactor, _ValueWithRandom7);\n        var _super12 = _createSuper(SplitFactor);\n        function SplitFactor() {\n          var _this32;\n          _classCallCheck(this, SplitFactor);\n          _this32 = _super12.call(this);\n          _this32.value = 3;\n          return _this32;\n        }\n        return _createClass(SplitFactor);\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../updaters/destroy/dist/esm/Options/Classes/SplitRate.js\n      var SplitRate = /*#__PURE__*/function (_ValueWithRandom8) {\n        _inherits(SplitRate, _ValueWithRandom8);\n        var _super13 = _createSuper(SplitRate);\n        function SplitRate() {\n          var _this33;\n          _classCallCheck(this, SplitRate);\n          _this33 = _super13.call(this);\n          _this33.value = {\n            min: 4,\n            max: 9\n          };\n          return _this33;\n        }\n        return _createClass(SplitRate);\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../updaters/destroy/dist/esm/Options/Classes/Split.js\n      var Split = /*#__PURE__*/function () {\n        function Split() {\n          _classCallCheck(this, Split);\n          this.count = 1;\n          this.factor = new SplitFactor();\n          this.rate = new SplitRate();\n          this.sizeOffset = true;\n        }\n        _createClass(Split, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.count !== undefined) {\n              this.count = data.count;\n            }\n            this.factor.load(data.factor);\n            this.rate.load(data.rate);\n            this.particles = _executeOnSingleOrMultiple(data.particles, function (particles) {\n              return _deepExtend({}, particles);\n            });\n            if (data.sizeOffset !== undefined) {\n              this.sizeOffset = data.sizeOffset;\n            }\n          }\n        }]);\n        return Split;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/destroy/dist/esm/Options/Classes/Destroy.js\n      var Destroy = /*#__PURE__*/function () {\n        function Destroy() {\n          _classCallCheck(this, Destroy);\n          this.bounds = new DestroyBounds();\n          this.mode = \"none\";\n          this.split = new Split();\n        }\n        _createClass(Destroy, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.mode) {\n              this.mode = data.mode;\n            }\n            if (data.bounds) {\n              this.bounds.load(data.bounds);\n            }\n            this.split.load(data.split);\n          }\n        }]);\n        return Destroy;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/destroy/dist/esm/DestroyUpdater.js\n      var DestroyUpdater = /*#__PURE__*/function () {\n        function DestroyUpdater(engine, container) {\n          _classCallCheck(this, DestroyUpdater);\n          this.engine = engine;\n          this.container = container;\n        }\n        _createClass(DestroyUpdater, [{\n          key: \"init\",\n          value: function init(particle) {\n            var container = this.container,\n              particlesOptions = particle.options,\n              destroyOptions = particlesOptions.destroy;\n            if (!destroyOptions) {\n              return;\n            }\n            particle.splitCount = 0;\n            var destroyBounds = destroyOptions.bounds;\n            if (!particle.destroyBounds) {\n              particle.destroyBounds = {};\n            }\n            if (destroyBounds.bottom) {\n              particle.destroyBounds.bottom = _getRangeValue(destroyBounds.bottom) * container.canvas.size.height / 100;\n            }\n            if (destroyBounds.left) {\n              particle.destroyBounds.left = _getRangeValue(destroyBounds.left) * container.canvas.size.width / 100;\n            }\n            if (destroyBounds.right) {\n              particle.destroyBounds.right = _getRangeValue(destroyBounds.right) * container.canvas.size.width / 100;\n            }\n            if (destroyBounds.top) {\n              particle.destroyBounds.top = _getRangeValue(destroyBounds.top) * container.canvas.size.height / 100;\n            }\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            return !particle.destroyed;\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions(options) {\n            if (!options.destroy) {\n              options.destroy = new Destroy();\n            }\n            for (var _len6 = arguments.length, sources = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n              sources[_key6 - 1] = arguments[_key6];\n            }\n            for (var _i5 = 0, _sources2 = sources; _i5 < _sources2.length; _i5++) {\n              var source = _sources2[_i5];\n              options.destroy.load(source === null || source === void 0 ? void 0 : source.destroy);\n            }\n          }\n        }, {\n          key: \"particleDestroyed\",\n          value: function particleDestroyed(particle, override) {\n            if (override) {\n              return;\n            }\n            var destroyOptions = particle.options.destroy;\n            if (destroyOptions && destroyOptions.mode === \"split\") {\n              this.split(particle);\n            }\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle) {\n            if (!this.isEnabled(particle)) {\n              return;\n            }\n            var position = particle.getPosition(),\n              bounds = particle.destroyBounds;\n            if (!bounds) {\n              return;\n            }\n            if (bounds.bottom !== undefined && position.y >= bounds.bottom || bounds.left !== undefined && position.x <= bounds.left || bounds.right !== undefined && position.x >= bounds.right || bounds.top !== undefined && position.y <= bounds.top) {\n              particle.destroy();\n            }\n          }\n        }, {\n          key: \"addSplitParticle\",\n          value: function addSplitParticle(parent, splitParticlesOptions) {\n            var destroyOptions = parent.options.destroy;\n            if (!destroyOptions) {\n              return;\n            }\n            var splitOptions = destroyOptions.split,\n              options = _loadParticlesOptions(this.engine, this.container, parent.options),\n              factor = _getValue(splitOptions.factor);\n            options.color.load({\n              value: {\n                hsl: parent.getFillColor()\n              }\n            });\n            options.move.load({\n              center: {\n                x: parent.position.x,\n                y: parent.position.y,\n                mode: \"precise\"\n              }\n            });\n            if (typeof options.size.value === \"number\") {\n              options.size.value /= factor;\n            } else {\n              options.size.value.min /= factor;\n              options.size.value.max /= factor;\n            }\n            options.load(splitParticlesOptions);\n            var offset = splitOptions.sizeOffset ? _setRangeValue(-parent.size.value, parent.size.value) : 0,\n              position = {\n                x: parent.position.x + _randomInRange(offset),\n                y: parent.position.y + _randomInRange(offset)\n              };\n            return this.container.particles.addParticle(position, options, parent.group, function (particle) {\n              var _a;\n              if (particle.size.value < 0.5) {\n                return false;\n              }\n              particle.velocity.length = _randomInRange(_setRangeValue(parent.velocity.length, particle.velocity.length));\n              particle.splitCount = ((_a = parent.splitCount) !== null && _a !== void 0 ? _a : 0) + 1;\n              particle.unbreakable = true;\n              setTimeout(function () {\n                particle.unbreakable = false;\n              }, 500);\n              return true;\n            });\n          }\n        }, {\n          key: \"split\",\n          value: function split(particle) {\n            var destroyOptions = particle.options.destroy;\n            if (!destroyOptions) {\n              return;\n            }\n            var splitOptions = destroyOptions.split;\n            if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n              return;\n            }\n            var rate = _getValue(splitOptions.rate),\n              particlesSplitOptions = _itemFromSingleOrMultiple(splitOptions.particles);\n            for (var i = 0; i < rate; i++) {\n              this.addSplitParticle(particle, particlesSplitOptions);\n            }\n          }\n        }]);\n        return DestroyUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/destroy/dist/esm/index.js\n      function loadDestroyUpdater(_x59) {\n        return _loadDestroyUpdater.apply(this, arguments);\n      }\n      function _loadDestroyUpdater() {\n        _loadDestroyUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee61(engine) {\n          return _regeneratorRuntime().wrap(function _callee61$(_context61) {\n            while (1) switch (_context61.prev = _context61.next) {\n              case 0:\n                _context61.next = 2;\n                return engine.addParticleUpdater(\"destroy\", function (container) {\n                  return new DestroyUpdater(engine, container);\n                });\n              case 2:\n              case \"end\":\n                return _context61.stop();\n            }\n          }, _callee61);\n        }));\n        return _loadDestroyUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../plugins/emitters/dist/esm/Shapes/Circle/CircleShape.js\n      var CircleShape = /*#__PURE__*/function () {\n        function CircleShape() {\n          _classCallCheck(this, CircleShape);\n        }\n        _createClass(CircleShape, [{\n          key: \"randomPosition\",\n          value: function randomPosition(position, size, fill) {\n            var generateTheta = function generateTheta(x, y) {\n                var u = _getRandom() / 4.0,\n                  theta = Math.atan(y / x * Math.tan(2 * Math.PI * u)),\n                  v = _getRandom();\n                if (v < 0.25) {\n                  return theta;\n                } else if (v < 0.5) {\n                  return Math.PI - theta;\n                } else if (v < 0.75) {\n                  return Math.PI + theta;\n                } else {\n                  return -theta;\n                }\n              },\n              radius = function radius(x, y, theta) {\n                return x * y / Math.sqrt(Math.pow(y * Math.cos(theta), 2) + Math.pow(x * Math.sin(theta), 2));\n              },\n              a = size.width / 2,\n              b = size.height / 2,\n              randomTheta = generateTheta(a, b),\n              maxRadius = radius(a, b, randomTheta),\n              randomRadius = fill ? maxRadius * Math.sqrt(_getRandom()) : maxRadius;\n            return {\n              x: position.x + randomRadius * Math.cos(randomTheta),\n              y: position.y + randomRadius * Math.sin(randomTheta)\n            };\n          }\n        }]);\n        return CircleShape;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/emitters/dist/esm/Options/Classes/EmitterLife.js\n      var EmitterLife = /*#__PURE__*/function () {\n        function EmitterLife() {\n          _classCallCheck(this, EmitterLife);\n          this.wait = false;\n        }\n        _createClass(EmitterLife, [{\n          key: \"load\",\n          value: function load(data) {\n            if (data === undefined) {\n              return;\n            }\n            if (data.count !== undefined) {\n              this.count = data.count;\n            }\n            if (data.delay !== undefined) {\n              this.delay = data.delay;\n            }\n            if (data.duration !== undefined) {\n              this.duration = data.duration;\n            }\n            if (data.wait !== undefined) {\n              this.wait = data.wait;\n            }\n          }\n        }]);\n        return EmitterLife;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/emitters/dist/esm/Options/Classes/EmitterRate.js\n      var EmitterRate = /*#__PURE__*/function () {\n        function EmitterRate() {\n          _classCallCheck(this, EmitterRate);\n          this.quantity = 1;\n          this.delay = 0.1;\n        }\n        _createClass(EmitterRate, [{\n          key: \"load\",\n          value: function load(data) {\n            if (data === undefined) {\n              return;\n            }\n            if (data.quantity !== undefined) {\n              this.quantity = _setRangeValue(data.quantity);\n            }\n            if (data.delay !== undefined) {\n              this.delay = _setRangeValue(data.delay);\n            }\n          }\n        }]);\n        return EmitterRate;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/emitters/dist/esm/Options/Classes/EmitterSize.js\n      var EmitterSize = /*#__PURE__*/function () {\n        function EmitterSize() {\n          _classCallCheck(this, EmitterSize);\n          this.mode = \"percent\";\n          this.height = 0;\n          this.width = 0;\n        }\n        _createClass(EmitterSize, [{\n          key: \"load\",\n          value: function load(data) {\n            if (data === undefined) {\n              return;\n            }\n            if (data.mode !== undefined) {\n              this.mode = data.mode;\n            }\n            if (data.height !== undefined) {\n              this.height = data.height;\n            }\n            if (data.width !== undefined) {\n              this.width = data.width;\n            }\n          }\n        }]);\n        return EmitterSize;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/emitters/dist/esm/Options/Classes/Emitter.js\n      var Emitter = /*#__PURE__*/function () {\n        function Emitter() {\n          _classCallCheck(this, Emitter);\n          this.autoPlay = true;\n          this.fill = true;\n          this.life = new EmitterLife();\n          this.rate = new EmitterRate();\n          this.shape = \"square\";\n          this.startCount = 0;\n        }\n        _createClass(Emitter, [{\n          key: \"load\",\n          value: function load(data) {\n            if (data === undefined) {\n              return;\n            }\n            if (data.autoPlay !== undefined) {\n              this.autoPlay = data.autoPlay;\n            }\n            if (data.size !== undefined) {\n              if (this.size === undefined) {\n                this.size = new EmitterSize();\n              }\n              this.size.load(data.size);\n            }\n            if (data.direction !== undefined) {\n              this.direction = data.direction;\n            }\n            this.domId = data.domId;\n            if (data.fill !== undefined) {\n              this.fill = data.fill;\n            }\n            this.life.load(data.life);\n            this.name = data.name;\n            this.particles = _executeOnSingleOrMultiple(data.particles, function (particles) {\n              return _deepExtend({}, particles);\n            });\n            this.rate.load(data.rate);\n            if (data.shape !== undefined) {\n              this.shape = data.shape;\n            }\n            if (data.position !== undefined) {\n              this.position = {};\n              if (data.position.x !== undefined) {\n                this.position.x = _setRangeValue(data.position.x);\n              }\n              if (data.position.y !== undefined) {\n                this.position.y = _setRangeValue(data.position.y);\n              }\n            }\n            if (data.spawnColor !== undefined) {\n              if (this.spawnColor === undefined) {\n                this.spawnColor = new _AnimatableColor();\n              }\n              this.spawnColor.load(data.spawnColor);\n            }\n            if (data.startCount !== undefined) {\n              this.startCount = data.startCount;\n            }\n          }\n        }]);\n        return Emitter;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/emitters/dist/esm/EmitterInstance.js\n      var EmitterInstance = /*#__PURE__*/function () {\n        function EmitterInstance(engine, emitters, container, options, position) {\n          _classCallCheck(this, EmitterInstance);\n          var _a, _b, _c, _d, _e, _f, _g;\n          var _h;\n          this.emitters = emitters;\n          this.container = container;\n          this._engine = engine;\n          this._currentDuration = 0;\n          this._currentEmitDelay = 0;\n          this._currentSpawnDelay = 0;\n          this._initialPosition = position;\n          if (options instanceof Emitter) {\n            this.options = options;\n          } else {\n            this.options = new Emitter();\n            this.options.load(options);\n          }\n          this._spawnDelay = ((_a = this.options.life.delay) !== null && _a !== void 0 ? _a : 0) * 1000 / this.container.retina.reduceFactor;\n          this.position = (_b = this._initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n          this.name = this.options.name;\n          this._shape = (_c = this._engine.emitterShapeManager) === null || _c === void 0 ? void 0 : _c.getShape(this.options.shape);\n          this.fill = this.options.fill;\n          this._firstSpawn = !this.options.life.wait;\n          this._startParticlesAdded = false;\n          var particlesOptions = _deepExtend({}, this.options.particles);\n          particlesOptions !== null && particlesOptions !== void 0 ? particlesOptions : particlesOptions = {};\n          (_d = particlesOptions.move) !== null && _d !== void 0 ? _d : particlesOptions.move = {};\n          (_e = (_h = particlesOptions.move).direction) !== null && _e !== void 0 ? _e : _h.direction = this.options.direction;\n          if (this.options.spawnColor) {\n            this.spawnColor = _rangeColorToHsl(this.options.spawnColor);\n          }\n          this._paused = !this.options.autoPlay;\n          this._particlesOptions = particlesOptions;\n          this.size = (_f = this.options.size) !== null && _f !== void 0 ? _f : function () {\n            var size = new EmitterSize();\n            size.load({\n              height: 0,\n              mode: \"percent\",\n              width: 0\n            });\n            return size;\n          }();\n          this._lifeCount = (_g = this.options.life.count) !== null && _g !== void 0 ? _g : -1;\n          this._immortal = this._lifeCount <= 0;\n          this._engine.dispatchEvent(\"emitterCreated\", {\n            container: container,\n            data: {\n              emitter: this\n            }\n          });\n          this.play();\n        }\n        _createClass(EmitterInstance, [{\n          key: \"externalPause\",\n          value: function externalPause() {\n            this._paused = true;\n            this.pause();\n          }\n        }, {\n          key: \"externalPlay\",\n          value: function externalPlay() {\n            this._paused = false;\n            this.play();\n          }\n        }, {\n          key: \"getPosition\",\n          value: function getPosition() {\n            if (this.options.domId) {\n              var container = this.container,\n                element = document.getElementById(this.options.domId);\n              if (element) {\n                var elRect = element.getBoundingClientRect();\n                return {\n                  x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                  y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio\n                };\n              }\n            }\n            return this.position;\n          }\n        }, {\n          key: \"getSize\",\n          value: function getSize() {\n            var container = this.container;\n            if (this.options.domId) {\n              var element = document.getElementById(this.options.domId);\n              if (element) {\n                var elRect = element.getBoundingClientRect();\n                return {\n                  width: elRect.width * container.retina.pixelRatio,\n                  height: elRect.height * container.retina.pixelRatio\n                };\n              }\n            }\n            return {\n              width: this.size.mode === \"percent\" ? container.canvas.size.width * this.size.width / 100 : this.size.width,\n              height: this.size.mode === \"percent\" ? container.canvas.size.height * this.size.height / 100 : this.size.height\n            };\n          }\n        }, {\n          key: \"pause\",\n          value: function pause() {\n            if (this._paused) {\n              return;\n            }\n            delete this._emitDelay;\n          }\n        }, {\n          key: \"play\",\n          value: function play() {\n            var _a;\n            if (this._paused) {\n              return;\n            }\n            if (!(this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal || !this.options.life.count) && (this._firstSpawn || this._currentSpawnDelay >= ((_a = this._spawnDelay) !== null && _a !== void 0 ? _a : 0)))) {\n              return;\n            }\n            if (this._emitDelay === undefined) {\n              var delay = _getRangeValue(this.options.rate.delay);\n              this._emitDelay = 1000 * delay / this.container.retina.reduceFactor;\n            }\n            if (this._lifeCount > 0 || this._immortal) {\n              this.prepareToDie();\n            }\n          }\n        }, {\n          key: \"resize\",\n          value: function resize() {\n            var initialPosition = this._initialPosition;\n            this.position = initialPosition && _isPointInside(initialPosition, this.container.canvas.size, _Vector.origin) ? initialPosition : this.calcPosition();\n          }\n        }, {\n          key: \"update\",\n          value: function update(delta) {\n            var _a, _b, _c;\n            if (this._paused) {\n              return;\n            }\n            if (this._firstSpawn) {\n              this._firstSpawn = false;\n              this._currentSpawnDelay = (_a = this._spawnDelay) !== null && _a !== void 0 ? _a : 0;\n              this._currentEmitDelay = (_b = this._emitDelay) !== null && _b !== void 0 ? _b : 0;\n            }\n            if (!this._startParticlesAdded) {\n              this._startParticlesAdded = true;\n              this.emitParticles(this.options.startCount);\n            }\n            if (this._duration !== undefined) {\n              this._currentDuration += delta.value;\n              if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                  delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                  this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                  this.position = this.calcPosition();\n                  this._spawnDelay = ((_c = this.options.life.delay) !== null && _c !== void 0 ? _c : 0) * 1000 / this.container.retina.reduceFactor;\n                } else {\n                  this.destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n              }\n            }\n            if (this._spawnDelay !== undefined) {\n              this._currentSpawnDelay += delta.value;\n              if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                  container: this.container\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n              }\n            }\n            if (this._emitDelay !== undefined) {\n              this._currentEmitDelay += delta.value;\n              if (this._currentEmitDelay >= this._emitDelay) {\n                this.emit();\n                this._currentEmitDelay -= this._emitDelay;\n              }\n            }\n          }\n        }, {\n          key: \"calcPosition\",\n          value: function calcPosition() {\n            return _calcPositionOrRandomFromSizeRanged({\n              size: this.container.canvas.size,\n              position: this.options.position\n            });\n          }\n        }, {\n          key: \"destroy\",\n          value: function destroy() {\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n              container: this.container,\n              data: {\n                emitter: this\n              }\n            });\n          }\n        }, {\n          key: \"emit\",\n          value: function emit() {\n            if (this._paused) {\n              return;\n            }\n            var quantity = _getRangeValue(this.options.rate.quantity);\n            this.emitParticles(quantity);\n          }\n        }, {\n          key: \"emitParticles\",\n          value: function emitParticles(quantity) {\n            var _a, _b, _c;\n            var position = this.getPosition(),\n              size = this.getSize(),\n              singleParticlesOptions = _itemFromSingleOrMultiple(this._particlesOptions);\n            for (var i = 0; i < quantity; i++) {\n              var particlesOptions = _deepExtend({}, singleParticlesOptions);\n              if (this.spawnColor) {\n                var hslAnimation = (_a = this.options.spawnColor) === null || _a === void 0 ? void 0 : _a.animation;\n                if (hslAnimation) {\n                  this.spawnColor.h = this.setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                  this.spawnColor.s = this.setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                  this.spawnColor.l = this.setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                }\n                if (!particlesOptions.color) {\n                  particlesOptions.color = {\n                    value: this.spawnColor\n                  };\n                } else {\n                  particlesOptions.color.value = this.spawnColor;\n                }\n              }\n              if (!position) {\n                return;\n              }\n              var pPosition = (_c = (_b = this._shape) === null || _b === void 0 ? void 0 : _b.randomPosition(position, size, this.fill)) !== null && _c !== void 0 ? _c : position;\n              this.container.particles.addParticle(pPosition, particlesOptions);\n            }\n          }\n        }, {\n          key: \"prepareToDie\",\n          value: function prepareToDie() {\n            var _a;\n            if (this._paused) {\n              return;\n            }\n            var duration = (_a = this.options.life) === null || _a === void 0 ? void 0 : _a.duration;\n            if (this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal) && duration !== undefined && duration > 0) {\n              this._duration = duration * 1000;\n            }\n          }\n        }, {\n          key: \"setColorAnimation\",\n          value: function setColorAnimation(animation, initValue, maxValue) {\n            var _a;\n            var container = this.container;\n            if (!animation.enable) {\n              return initValue;\n            }\n            var colorOffset = _randomInRange(animation.offset),\n              delay = _getRangeValue(this.options.rate.delay),\n              emitFactor = 1000 * delay / container.retina.reduceFactor,\n              colorSpeed = _getRangeValue((_a = animation.speed) !== null && _a !== void 0 ? _a : 0);\n            return (initValue + colorSpeed * container.fpsLimit / emitFactor + colorOffset * 3.6) % maxValue;\n          }\n        }]);\n        return EmitterInstance;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/emitters/dist/esm/Emitters.js\n      var Emitters = /*#__PURE__*/function () {\n        function Emitters(engine, container) {\n          var _this34 = this;\n          _classCallCheck(this, Emitters);\n          this.container = container;\n          this._engine = engine;\n          this.array = [];\n          this.emitters = [];\n          this.interactivityEmitters = {\n            random: {\n              count: 1,\n              enable: false\n            },\n            value: []\n          };\n          container.getEmitter = function (idxOrName) {\n            return idxOrName === undefined || typeof idxOrName === \"number\" ? _this34.array[idxOrName || 0] : _this34.array.find(function (t) {\n              return t.name === idxOrName;\n            });\n          };\n          container.addEmitter = function (options, position) {\n            return _this34.addEmitter(options, position);\n          };\n          container.removeEmitter = function (idxOrName) {\n            var emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n              _this34.removeEmitter(emitter);\n            }\n          };\n          container.playEmitter = function (idxOrName) {\n            var emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n              emitter.externalPlay();\n            }\n          };\n          container.pauseEmitter = function (idxOrName) {\n            var emitter = container.getEmitter(idxOrName);\n            if (emitter) {\n              emitter.externalPause();\n            }\n          };\n        }\n        _createClass(Emitters, [{\n          key: \"addEmitter\",\n          value: function addEmitter(options, position) {\n            var emitterOptions = new Emitter();\n            emitterOptions.load(options);\n            var emitter = new EmitterInstance(this._engine, this, this.container, emitterOptions, position);\n            this.array.push(emitter);\n            return emitter;\n          }\n        }, {\n          key: \"handleClickMode\",\n          value: function handleClickMode(mode) {\n            var _this35 = this;\n            var emitterOptions = this.emitters,\n              modeEmitters = this.interactivityEmitters;\n            if (mode === \"emitter\") {\n              var emittersModeOptions;\n              if (modeEmitters && modeEmitters.value instanceof Array) {\n                if (modeEmitters.value.length > 0 && modeEmitters.random.enable) {\n                  emittersModeOptions = [];\n                  var usedIndexes = [];\n                  for (var i = 0; i < modeEmitters.random.count; i++) {\n                    var idx = _arrayRandomIndex(modeEmitters.value);\n                    if (usedIndexes.includes(idx) && usedIndexes.length < modeEmitters.value.length) {\n                      i--;\n                      continue;\n                    }\n                    usedIndexes.push(idx);\n                    emittersModeOptions.push(_itemFromArray(modeEmitters.value, idx));\n                  }\n                } else {\n                  emittersModeOptions = modeEmitters.value;\n                }\n              } else {\n                emittersModeOptions = modeEmitters === null || modeEmitters === void 0 ? void 0 : modeEmitters.value;\n              }\n              var emittersOptions = emittersModeOptions !== null && emittersModeOptions !== void 0 ? emittersModeOptions : emitterOptions,\n                ePosition = this.container.interactivity.mouse.clickPosition;\n              _executeOnSingleOrMultiple(emittersOptions, function (emitter) {\n                _this35.addEmitter(emitter, ePosition);\n              });\n            }\n          }\n        }, {\n          key: \"init\",\n          value: function () {\n            var _init4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n              var _iterator69, _step69, emitterOptions;\n              return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n                while (1) switch (_context38.prev = _context38.next) {\n                  case 0:\n                    this.emitters = this.container.actualOptions.emitters;\n                    this.interactivityEmitters = this.container.actualOptions.interactivity.modes.emitters;\n                    if (this.emitters instanceof Array) {\n                      _iterator69 = _createForOfIteratorHelper(this.emitters);\n                      try {\n                        for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {\n                          emitterOptions = _step69.value;\n                          this.addEmitter(emitterOptions);\n                        }\n                      } catch (err) {\n                        _iterator69.e(err);\n                      } finally {\n                        _iterator69.f();\n                      }\n                    } else {\n                      this.addEmitter(this.emitters);\n                    }\n                  case 3:\n                  case \"end\":\n                    return _context38.stop();\n                }\n              }, _callee38, this);\n            }));\n            function init() {\n              return _init4.apply(this, arguments);\n            }\n            return init;\n          }()\n        }, {\n          key: \"pause\",\n          value: function pause() {\n            var _iterator70 = _createForOfIteratorHelper(this.array),\n              _step70;\n            try {\n              for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {\n                var emitter = _step70.value;\n                emitter.pause();\n              }\n            } catch (err) {\n              _iterator70.e(err);\n            } finally {\n              _iterator70.f();\n            }\n          }\n        }, {\n          key: \"play\",\n          value: function play() {\n            var _iterator71 = _createForOfIteratorHelper(this.array),\n              _step71;\n            try {\n              for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {\n                var emitter = _step71.value;\n                emitter.play();\n              }\n            } catch (err) {\n              _iterator71.e(err);\n            } finally {\n              _iterator71.f();\n            }\n          }\n        }, {\n          key: \"removeEmitter\",\n          value: function removeEmitter(emitter) {\n            var index = this.array.indexOf(emitter);\n            if (index >= 0) {\n              this.array.splice(index, 1);\n            }\n          }\n        }, {\n          key: \"resize\",\n          value: function resize() {\n            var _iterator72 = _createForOfIteratorHelper(this.array),\n              _step72;\n            try {\n              for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {\n                var emitter = _step72.value;\n                emitter.resize();\n              }\n            } catch (err) {\n              _iterator72.e(err);\n            } finally {\n              _iterator72.f();\n            }\n          }\n        }, {\n          key: \"stop\",\n          value: function stop() {\n            this.array = [];\n          }\n        }, {\n          key: \"update\",\n          value: function update(delta) {\n            var _iterator73 = _createForOfIteratorHelper(this.array),\n              _step73;\n            try {\n              for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {\n                var emitter = _step73.value;\n                emitter.update(delta);\n              }\n            } catch (err) {\n              _iterator73.e(err);\n            } finally {\n              _iterator73.f();\n            }\n          }\n        }]);\n        return Emitters;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/emitters/dist/esm/ShapeManager.js\n      var shapes = new Map();\n      var ShapeManager = /*#__PURE__*/function () {\n        function ShapeManager(engine) {\n          _classCallCheck(this, ShapeManager);\n          this._engine = engine;\n        }\n        _createClass(ShapeManager, [{\n          key: \"addShape\",\n          value: function addShape(name, drawer) {\n            if (!this.getShape(name)) {\n              shapes.set(name, drawer);\n            }\n          }\n        }, {\n          key: \"getShape\",\n          value: function getShape(name) {\n            return shapes.get(name);\n          }\n        }, {\n          key: \"getSupportedShapes\",\n          value: function getSupportedShapes() {\n            return shapes.keys();\n          }\n        }]);\n        return ShapeManager;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/emitters/dist/esm/Shapes/Square/SquareShape.js\n\n      function randomSquareCoordinate(position, offset) {\n        return position + offset * (_getRandom() - 0.5);\n      }\n      var SquareShape = /*#__PURE__*/function () {\n        function SquareShape() {\n          _classCallCheck(this, SquareShape);\n        }\n        _createClass(SquareShape, [{\n          key: \"randomPosition\",\n          value: function randomPosition(position, size, fill) {\n            if (fill) {\n              return {\n                x: randomSquareCoordinate(position.x, size.width),\n                y: randomSquareCoordinate(position.y, size.height)\n              };\n            } else {\n              var halfW = size.width / 2,\n                halfH = size.height / 2,\n                side = Math.floor(_getRandom() * 4),\n                v = (_getRandom() - 0.5) * 2;\n              switch (side) {\n                case 0:\n                  return {\n                    x: position.x + v * halfW,\n                    y: position.y - halfH\n                  };\n                case 1:\n                  return {\n                    x: position.x - halfW,\n                    y: position.y + v * halfH\n                  };\n                case 2:\n                  return {\n                    x: position.x + v * halfW,\n                    y: position.y + halfH\n                  };\n                case 3:\n                default:\n                  return {\n                    x: position.x + halfW,\n                    y: position.y + v * halfH\n                  };\n              }\n            }\n          }\n        }]);\n        return SquareShape;\n      }();\n      ; // CONCATENATED MODULE: ../../plugins/emitters/dist/esm/index.js\n      var EmittersPlugin = /*#__PURE__*/function () {\n        function EmittersPlugin(engine) {\n          _classCallCheck(this, EmittersPlugin);\n          this._engine = engine;\n          this.id = \"emitters\";\n        }\n        _createClass(EmittersPlugin, [{\n          key: \"getPlugin\",\n          value: function getPlugin(container) {\n            return new Emitters(this._engine, container);\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions(options, source) {\n            var _a, _b, _c, _d, _e, _f;\n            if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n              return;\n            }\n            if (source === null || source === void 0 ? void 0 : source.emitters) {\n              options.emitters = _executeOnSingleOrMultiple(source.emitters, function (emitter) {\n                var tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n              });\n            }\n            var interactivityEmitters = (_b = (_a = source === null || source === void 0 ? void 0 : source.interactivity) === null || _a === void 0 ? void 0 : _a.modes) === null || _b === void 0 ? void 0 : _b.emitters;\n            if (interactivityEmitters) {\n              if (interactivityEmitters instanceof Array) {\n                options.interactivity.modes.emitters = {\n                  random: {\n                    count: 1,\n                    enable: true\n                  },\n                  value: interactivityEmitters.map(function (s) {\n                    var tmp = new Emitter();\n                    tmp.load(s);\n                    return tmp;\n                  })\n                };\n              } else {\n                var emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                  if (emitterMode.value instanceof Array) {\n                    options.interactivity.modes.emitters = {\n                      random: {\n                        count: (_c = emitterMode.random.count) !== null && _c !== void 0 ? _c : 1,\n                        enable: (_d = emitterMode.random.enable) !== null && _d !== void 0 ? _d : false\n                      },\n                      value: emitterMode.value.map(function (s) {\n                        var tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                      })\n                    };\n                  } else {\n                    var tmp = new Emitter();\n                    tmp.load(emitterMode.value);\n                    options.interactivity.modes.emitters = {\n                      random: {\n                        count: (_e = emitterMode.random.count) !== null && _e !== void 0 ? _e : 1,\n                        enable: (_f = emitterMode.random.enable) !== null && _f !== void 0 ? _f : false\n                      },\n                      value: tmp\n                    };\n                  }\n                } else {\n                  var emitterOptions = options.interactivity.modes.emitters = {\n                    random: {\n                      count: 1,\n                      enable: false\n                    },\n                    value: new Emitter()\n                  };\n                  emitterOptions.value.load(interactivityEmitters);\n                }\n              }\n            }\n          }\n        }, {\n          key: \"needsPlugin\",\n          value: function needsPlugin(options) {\n            var _a, _b, _c;\n            if (!options) {\n              return false;\n            }\n            var emitters = options.emitters;\n            return emitters instanceof Array && !!emitters.length || emitters !== undefined || !!((_c = (_b = (_a = options.interactivity) === null || _a === void 0 ? void 0 : _a.events) === null || _b === void 0 ? void 0 : _b.onClick) === null || _c === void 0 ? void 0 : _c.mode) && _isInArray(\"emitter\", options.interactivity.events.onClick.mode);\n          }\n        }]);\n        return EmittersPlugin;\n      }();\n      function loadEmittersPlugin(_x60) {\n        return _loadEmittersPlugin.apply(this, arguments);\n      }\n      function _loadEmittersPlugin() {\n        _loadEmittersPlugin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee62(engine) {\n          var plugin;\n          return _regeneratorRuntime().wrap(function _callee62$(_context62) {\n            while (1) switch (_context62.prev = _context62.next) {\n              case 0:\n                if (!engine.emitterShapeManager) {\n                  engine.emitterShapeManager = new ShapeManager(engine);\n                }\n                if (!engine.addEmitterShape) {\n                  engine.addEmitterShape = function (name, shape) {\n                    var _a;\n                    (_a = engine.emitterShapeManager) === null || _a === void 0 ? void 0 : _a.addShape(name, shape);\n                  };\n                }\n                plugin = new EmittersPlugin(engine);\n                _context62.next = 5;\n                return engine.addPlugin(plugin);\n              case 5:\n                engine.addEmitterShape(\"circle\", new CircleShape());\n                engine.addEmitterShape(\"square\", new SquareShape());\n              case 7:\n              case \"end\":\n                return _context62.stop();\n            }\n          }, _callee62);\n        }));\n        return _loadEmittersPlugin.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/trail/dist/esm/Options/Classes/Trail.js\n      var Trail = /*#__PURE__*/function () {\n        function Trail() {\n          _classCallCheck(this, Trail);\n          this.delay = 1;\n          this.pauseOnStop = false;\n          this.quantity = 1;\n        }\n        _createClass(Trail, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.delay !== undefined) {\n              this.delay = data.delay;\n            }\n            if (data.quantity !== undefined) {\n              this.quantity = data.quantity;\n            }\n            if (data.particles !== undefined) {\n              this.particles = _deepExtend({}, data.particles);\n            }\n            if (data.pauseOnStop !== undefined) {\n              this.pauseOnStop = data.pauseOnStop;\n            }\n          }\n        }]);\n        return Trail;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/trail/dist/esm/TrailMaker.js\n      var TrailMaker = /*#__PURE__*/function (_ExternalInteractorBa) {\n        _inherits(TrailMaker, _ExternalInteractorBa);\n        var _super14 = _createSuper(TrailMaker);\n        function TrailMaker(container) {\n          var _this36;\n          _classCallCheck(this, TrailMaker);\n          _this36 = _super14.call(this, container);\n          _this36._delay = 0;\n          return _this36;\n        }\n        _createClass(TrailMaker, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {}\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee39(delta) {\n              var _a, _b, _c, _d, container, options, trailOptions, optDelay, canEmit;\n              return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n                while (1) switch (_context39.prev = _context39.next) {\n                  case 0:\n                    if (this.container.retina.reduceFactor) {\n                      _context39.next = 2;\n                      break;\n                    }\n                    return _context39.abrupt(\"return\");\n                  case 2:\n                    container = this.container, options = container.actualOptions, trailOptions = options.interactivity.modes.trail;\n                    if (trailOptions) {\n                      _context39.next = 5;\n                      break;\n                    }\n                    return _context39.abrupt(\"return\");\n                  case 5:\n                    optDelay = trailOptions.delay * 1000 / this.container.retina.reduceFactor;\n                    if (this._delay < optDelay) {\n                      this._delay += delta.value;\n                    }\n                    if (!(this._delay < optDelay)) {\n                      _context39.next = 9;\n                      break;\n                    }\n                    return _context39.abrupt(\"return\");\n                  case 9:\n                    canEmit = true;\n                    if (trailOptions.pauseOnStop) {\n                      if (container.interactivity.mouse.position === this._lastPosition || ((_a = container.interactivity.mouse.position) === null || _a === void 0 ? void 0 : _a.x) === ((_b = this._lastPosition) === null || _b === void 0 ? void 0 : _b.x) && ((_c = container.interactivity.mouse.position) === null || _c === void 0 ? void 0 : _c.y) === ((_d = this._lastPosition) === null || _d === void 0 ? void 0 : _d.y)) {\n                        canEmit = false;\n                      }\n                    }\n                    if (container.interactivity.mouse.position) {\n                      this._lastPosition = {\n                        x: container.interactivity.mouse.position.x,\n                        y: container.interactivity.mouse.position.y\n                      };\n                    } else {\n                      delete this._lastPosition;\n                    }\n                    if (canEmit) {\n                      container.particles.push(trailOptions.quantity, container.interactivity.mouse, trailOptions.particles);\n                    }\n                    this._delay -= optDelay;\n                  case 14:\n                  case \"end\":\n                    return _context39.stop();\n                }\n              }, _callee39, this);\n            }));\n            function interact(_x61) {\n              return _interact.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            var container = this.container,\n              options = container.actualOptions,\n              mouse = container.interactivity.mouse,\n              events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events;\n            return mouse.clicking && mouse.inside && !!mouse.position && _isInArray(\"trail\", events.onClick.mode) || mouse.inside && !!mouse.position && _isInArray(\"trail\", events.onHover.mode);\n          }\n        }, {\n          key: \"loadModeOptions\",\n          value: function loadModeOptions(options) {\n            if (!options.trail) {\n              options.trail = new Trail();\n            }\n            for (var _len7 = arguments.length, sources = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n              sources[_key7 - 1] = arguments[_key7];\n            }\n            for (var _i6 = 0, _sources3 = sources; _i6 < _sources3.length; _i6++) {\n              var source = _sources3[_i6];\n              options.trail.load(source === null || source === void 0 ? void 0 : source.trail);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }]);\n        return TrailMaker;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/trail/dist/esm/index.js\n      function loadExternalTrailInteraction(_x62) {\n        return _loadExternalTrailInteraction.apply(this, arguments);\n      }\n      function _loadExternalTrailInteraction() {\n        _loadExternalTrailInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee63(engine) {\n          return _regeneratorRuntime().wrap(function _callee63$(_context63) {\n            while (1) switch (_context63.prev = _context63.next) {\n              case 0:\n                _context63.next = 2;\n                return engine.addInteractor(\"externalTrail\", function (container) {\n                  return new TrailMaker(container);\n                });\n              case 2:\n              case \"end\":\n                return _context63.stop();\n            }\n          }, _callee63);\n        }));\n        return _loadExternalTrailInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/roll/dist/esm/Options/Classes/RollLight.js\n      var RollLight = /*#__PURE__*/function () {\n        function RollLight() {\n          _classCallCheck(this, RollLight);\n          this.enable = false;\n          this.value = 0;\n        }\n        _createClass(RollLight, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.value !== undefined) {\n              this.value = _setRangeValue(data.value);\n            }\n          }\n        }]);\n        return RollLight;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/roll/dist/esm/Options/Classes/Roll.js\n      var Roll = /*#__PURE__*/function () {\n        function Roll() {\n          _classCallCheck(this, Roll);\n          this.darken = new RollLight();\n          this.enable = false;\n          this.enlighten = new RollLight();\n          this.mode = \"vertical\";\n          this.speed = 25;\n        }\n        _createClass(Roll, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.backColor !== undefined) {\n              this.backColor = _OptionsColor.create(this.backColor, data.backColor);\n            }\n            this.darken.load(data.darken);\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            this.enlighten.load(data.enlighten);\n            if (data.mode !== undefined) {\n              this.mode = data.mode;\n            }\n            if (data.speed !== undefined) {\n              this.speed = _setRangeValue(data.speed);\n            }\n          }\n        }]);\n        return Roll;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/roll/dist/esm/RollUpdater.js\n\n      function updateRoll(particle, delta) {\n        var roll = particle.options.roll;\n        if (!particle.roll || !(roll === null || roll === void 0 ? void 0 : roll.enable)) {\n          return;\n        }\n        var speed = particle.roll.speed * delta.factor,\n          max = 2 * Math.PI;\n        particle.roll.angle += speed;\n        if (particle.roll.angle > max) {\n          particle.roll.angle -= max;\n        }\n      }\n      var RollUpdater = /*#__PURE__*/function () {\n        function RollUpdater() {\n          _classCallCheck(this, RollUpdater);\n        }\n        _createClass(RollUpdater, [{\n          key: \"getTransformValues\",\n          value: function getTransformValues(particle) {\n            var _a;\n            var roll = ((_a = particle.roll) === null || _a === void 0 ? void 0 : _a.enable) && particle.roll,\n              rollHorizontal = roll && roll.horizontal,\n              rollVertical = roll && roll.vertical;\n            return {\n              a: rollHorizontal ? Math.cos(roll.angle) : undefined,\n              d: rollVertical ? Math.sin(roll.angle) : undefined\n            };\n          }\n        }, {\n          key: \"init\",\n          value: function init(particle) {\n            var rollOpt = particle.options.roll;\n            if (rollOpt === null || rollOpt === void 0 ? void 0 : rollOpt.enable) {\n              particle.roll = {\n                enable: rollOpt.enable,\n                horizontal: rollOpt.mode === \"horizontal\" || rollOpt.mode === \"both\",\n                vertical: rollOpt.mode === \"vertical\" || rollOpt.mode === \"both\",\n                angle: _getRandom() * Math.PI * 2,\n                speed: _getRangeValue(rollOpt.speed) / 360\n              };\n              if (rollOpt.backColor) {\n                particle.backColor = _rangeColorToHsl(rollOpt.backColor);\n              } else if (rollOpt.darken.enable && rollOpt.enlighten.enable) {\n                var alterType = _getRandom() >= 0.5 ? \"darken\" : \"enlighten\";\n                particle.roll.alter = {\n                  type: alterType,\n                  value: _getRangeValue(alterType === \"darken\" ? rollOpt.darken.value : rollOpt.enlighten.value)\n                };\n              } else if (rollOpt.darken.enable) {\n                particle.roll.alter = {\n                  type: \"darken\",\n                  value: _getRangeValue(rollOpt.darken.value)\n                };\n              } else if (rollOpt.enlighten.enable) {\n                particle.roll.alter = {\n                  type: \"enlighten\",\n                  value: _getRangeValue(rollOpt.enlighten.value)\n                };\n              }\n            } else {\n              particle.roll = {\n                enable: false,\n                horizontal: false,\n                vertical: false,\n                angle: 0,\n                speed: 0\n              };\n            }\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var roll = particle.options.roll;\n            return !particle.destroyed && !particle.spawning && !!(roll === null || roll === void 0 ? void 0 : roll.enable);\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions(options) {\n            if (!options.roll) {\n              options.roll = new Roll();\n            }\n            for (var _len8 = arguments.length, sources = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n              sources[_key8 - 1] = arguments[_key8];\n            }\n            for (var _i7 = 0, _sources4 = sources; _i7 < _sources4.length; _i7++) {\n              var source = _sources4[_i7];\n              options.roll.load(source === null || source === void 0 ? void 0 : source.roll);\n            }\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle, delta) {\n            if (!this.isEnabled(particle)) {\n              return;\n            }\n            updateRoll(particle, delta);\n          }\n        }]);\n        return RollUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/roll/dist/esm/index.js\n      function loadRollUpdater(_x63) {\n        return _loadRollUpdater.apply(this, arguments);\n      }\n      function _loadRollUpdater() {\n        _loadRollUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee64(engine) {\n          return _regeneratorRuntime().wrap(function _callee64$(_context64) {\n            while (1) switch (_context64.prev = _context64.next) {\n              case 0:\n                _context64.next = 2;\n                return engine.addParticleUpdater(\"roll\", function () {\n                  return new RollUpdater();\n                });\n              case 2:\n              case \"end\":\n                return _context64.stop();\n            }\n          }, _callee64);\n        }));\n        return _loadRollUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../pjs/dist/esm/index.js\n      var initPjs = function initPjs(engine) {\n        var particlesJS = function particlesJS(tagId, options) {\n          return engine.load(tagId, options);\n        };\n        particlesJS.load = function (tagId, pathConfigJson, callback) {\n          engine.loadJSON(tagId, pathConfigJson).then(function (container) {\n            if (container) {\n              callback(container);\n            }\n          })[\"catch\"](function () {\n            callback(undefined);\n          });\n        };\n        particlesJS.setOnClickHandler = function (callback) {\n          engine.setOnClickHandler(callback);\n        };\n        var pJSDom = engine.dom();\n        return {\n          particlesJS: particlesJS,\n          pJSDom: pJSDom\n        };\n      };\n      ; // CONCATENATED MODULE: ../../updaters/angle/dist/esm/Options/Classes/RotateAnimation.js\n      var RotateAnimation = /*#__PURE__*/function () {\n        function RotateAnimation() {\n          _classCallCheck(this, RotateAnimation);\n          this.enable = false;\n          this.speed = 0;\n          this.decay = 0;\n          this.sync = false;\n        }\n        _createClass(RotateAnimation, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.speed !== undefined) {\n              this.speed = _setRangeValue(data.speed);\n            }\n            if (data.decay !== undefined) {\n              this.decay = _setRangeValue(data.decay);\n            }\n            if (data.sync !== undefined) {\n              this.sync = data.sync;\n            }\n          }\n        }]);\n        return RotateAnimation;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/angle/dist/esm/Options/Classes/Rotate.js\n      var Rotate = /*#__PURE__*/function (_ValueWithRandom9) {\n        _inherits(Rotate, _ValueWithRandom9);\n        var _super15 = _createSuper(Rotate);\n        function Rotate() {\n          var _this37;\n          _classCallCheck(this, Rotate);\n          _this37 = _super15.call(this);\n          _this37.animation = new RotateAnimation();\n          _this37.direction = \"clockwise\";\n          _this37.path = false;\n          _this37.value = 0;\n          return _this37;\n        }\n        _createClass(Rotate, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            _get(_getPrototypeOf(Rotate.prototype), \"load\", this).call(this, data);\n            if (data.direction !== undefined) {\n              this.direction = data.direction;\n            }\n            this.animation.load(data.animation);\n            if (data.path !== undefined) {\n              this.path = data.path;\n            }\n          }\n        }]);\n        return Rotate;\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../updaters/angle/dist/esm/RotateUpdater.js\n\n      function updateAngle(particle, delta) {\n        var _a, _b;\n        var rotate = particle.rotate,\n          rotateOptions = particle.options.rotate;\n        if (!rotate || !rotateOptions) {\n          return;\n        }\n        var rotateAnimation = rotateOptions.animation,\n          speed = ((_a = rotate.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor,\n          max = 2 * Math.PI,\n          decay = (_b = rotate.decay) !== null && _b !== void 0 ? _b : 1;\n        if (!rotateAnimation.enable) {\n          return;\n        }\n        switch (rotate.status) {\n          case \"increasing\":\n            rotate.value += speed;\n            if (rotate.value > max) {\n              rotate.value -= max;\n            }\n            break;\n          case \"decreasing\":\n          default:\n            rotate.value -= speed;\n            if (rotate.value < 0) {\n              rotate.value += max;\n            }\n            break;\n        }\n        if (rotate.velocity && decay !== 1) {\n          rotate.velocity *= decay;\n        }\n      }\n      var RotateUpdater = /*#__PURE__*/function () {\n        function RotateUpdater(container) {\n          _classCallCheck(this, RotateUpdater);\n          this.container = container;\n        }\n        _createClass(RotateUpdater, [{\n          key: \"init\",\n          value: function init(particle) {\n            var rotateOptions = particle.options.rotate;\n            if (!rotateOptions) {\n              return;\n            }\n            particle.rotate = {\n              enable: rotateOptions.animation.enable,\n              value: _getRangeValue(rotateOptions.value) * Math.PI / 180\n            };\n            particle.pathRotation = rotateOptions.path;\n            var rotateDirection = rotateOptions.direction;\n            if (rotateDirection === \"random\") {\n              var index = Math.floor(_getRandom() * 2);\n              rotateDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n            }\n            switch (rotateDirection) {\n              case \"counter-clockwise\":\n              case \"counterClockwise\":\n                particle.rotate.status = \"decreasing\";\n                break;\n              case \"clockwise\":\n                particle.rotate.status = \"increasing\";\n                break;\n            }\n            var rotateAnimation = rotateOptions.animation;\n            if (rotateAnimation.enable) {\n              particle.rotate.decay = 1 - _getRangeValue(rotateAnimation.decay);\n              particle.rotate.velocity = _getRangeValue(rotateAnimation.speed) / 360 * this.container.retina.reduceFactor;\n              if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= _getRandom();\n              }\n            }\n            particle.rotation = particle.rotate.value;\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var rotate = particle.options.rotate;\n            if (!rotate) {\n              return false;\n            }\n            return !particle.destroyed && !particle.spawning && rotate.animation.enable && !rotate.path;\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions(options) {\n            if (!options.rotate) {\n              options.rotate = new Rotate();\n            }\n            for (var _len9 = arguments.length, sources = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n              sources[_key9 - 1] = arguments[_key9];\n            }\n            for (var _i8 = 0, _sources5 = sources; _i8 < _sources5.length; _i8++) {\n              var source = _sources5[_i8];\n              options.rotate.load(source === null || source === void 0 ? void 0 : source.rotate);\n            }\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle, delta) {\n            var _a, _b;\n            if (!this.isEnabled(particle)) {\n              return;\n            }\n            updateAngle(particle, delta);\n            particle.rotation = (_b = (_a = particle.rotate) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 0;\n          }\n        }]);\n        return RotateUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/angle/dist/esm/index.js\n      function loadAngleUpdater(_x64) {\n        return _loadAngleUpdater.apply(this, arguments);\n      }\n      function _loadAngleUpdater() {\n        _loadAngleUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee65(engine) {\n          return _regeneratorRuntime().wrap(function _callee65$(_context65) {\n            while (1) switch (_context65.prev = _context65.next) {\n              case 0:\n                _context65.next = 2;\n                return engine.addParticleUpdater(\"rotate\", function (container) {\n                  return new RotateUpdater(container);\n                });\n              case 2:\n              case \"end\":\n                return _context65.stop();\n            }\n          }, _callee65);\n        }));\n        return _loadAngleUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../move/base/dist/esm/Utils.js\n\n      function applyDistance(particle) {\n        var initialPosition = particle.initialPosition,\n          _getDistances4 = _getDistances(initialPosition, particle.position),\n          dx = _getDistances4.dx,\n          dy = _getDistances4.dy,\n          dxFixed = Math.abs(dx),\n          dyFixed = Math.abs(dy),\n          hDistance = particle.retina.maxDistance.horizontal,\n          vDistance = particle.retina.maxDistance.vertical;\n        if (!hDistance && !vDistance) {\n          return;\n        }\n        if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n          particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n          if (hDistance) {\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n          }\n          if (vDistance) {\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n          }\n        } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n          particle.misplaced = false;\n        } else if (particle.misplaced) {\n          var pos = particle.position,\n            vel = particle.velocity;\n          if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n            vel.x *= -_getRandom();\n          }\n          if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n            vel.y *= -_getRandom();\n          }\n        }\n      }\n      function spin(particle, moveSpeed) {\n        var container = particle.container;\n        if (!particle.spin) {\n          return;\n        }\n        var updateFunc = {\n          x: particle.spin.direction === \"clockwise\" ? Math.cos : Math.sin,\n          y: particle.spin.direction === \"clockwise\" ? Math.sin : Math.cos\n        };\n        particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n        particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n        particle.spin.radius += particle.spin.acceleration;\n        var maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height);\n        if (particle.spin.radius > maxCanvasSize / 2) {\n          particle.spin.radius = maxCanvasSize / 2;\n          particle.spin.acceleration *= -1;\n        } else if (particle.spin.radius < 0) {\n          particle.spin.radius = 0;\n          particle.spin.acceleration *= -1;\n        }\n        particle.spin.angle += moveSpeed / 100 * (1 - particle.spin.radius / maxCanvasSize);\n      }\n      function applyPath(particle, delta) {\n        var _a;\n        var particlesOptions = particle.options,\n          pathOptions = particlesOptions.move.path,\n          pathEnabled = pathOptions.enable;\n        if (!pathEnabled) {\n          return;\n        }\n        if (particle.lastPathTime <= particle.pathDelay) {\n          particle.lastPathTime += delta.value;\n          return;\n        }\n        var path = (_a = particle.pathGenerator) === null || _a === void 0 ? void 0 : _a.generate(particle);\n        if (path) {\n          particle.velocity.addTo(path);\n        }\n        if (pathOptions.clamp) {\n          particle.velocity.x = _clamp(particle.velocity.x, -1, 1);\n          particle.velocity.y = _clamp(particle.velocity.y, -1, 1);\n        }\n        particle.lastPathTime -= particle.pathDelay;\n      }\n      function getProximitySpeedFactor(particle) {\n        return particle.slow.inRange ? particle.slow.factor : 1;\n      }\n      ; // CONCATENATED MODULE: ../../move/base/dist/esm/BaseMover.js\n      var BaseMover = /*#__PURE__*/function () {\n        function BaseMover() {\n          _classCallCheck(this, BaseMover);\n        }\n        _createClass(BaseMover, [{\n          key: \"init\",\n          value: function init(particle) {\n            var _a;\n            var container = particle.container,\n              options = particle.options,\n              gravityOptions = options.move.gravity,\n              spinOptions = options.move.spin;\n            particle.gravity = {\n              enable: gravityOptions.enable,\n              acceleration: _getRangeValue(gravityOptions.acceleration),\n              inverse: gravityOptions.inverse\n            };\n            if (spinOptions.enable) {\n              var spinPos = (_a = spinOptions.position) !== null && _a !== void 0 ? _a : {\n                  x: 50,\n                  y: 50\n                },\n                spinCenter = {\n                  x: spinPos.x / 100 * container.canvas.size.width,\n                  y: spinPos.y / 100 * container.canvas.size.height\n                },\n                pos = particle.getPosition(),\n                distance = _getDistance(pos, spinCenter),\n                spinAcceleration = _getRangeValue(spinOptions.acceleration);\n              particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n              particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration\n              };\n            }\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            return !particle.destroyed && particle.options.move.enable;\n          }\n        }, {\n          key: \"move\",\n          value: function move(particle, delta) {\n            var _a, _b, _c;\n            var _d, _e;\n            var particleOptions = particle.options,\n              moveOptions = particleOptions.move;\n            if (!moveOptions.enable) {\n              return;\n            }\n            var container = particle.container,\n              slowFactor = getProximitySpeedFactor(particle),\n              baseSpeed = ((_a = (_d = particle.retina).moveSpeed) !== null && _a !== void 0 ? _a : _d.moveSpeed = _getRangeValue(moveOptions.speed) * container.retina.pixelRatio) * container.retina.reduceFactor,\n              moveDrift = (_b = (_e = particle.retina).moveDrift) !== null && _b !== void 0 ? _b : _e.moveDrift = _getRangeValue(particle.options.move.drift) * container.retina.pixelRatio,\n              maxSize = _getRangeMax(particleOptions.size.value) * container.retina.pixelRatio,\n              sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n              speedFactor = sizeFactor * slowFactor * (delta.factor || 1),\n              diffFactor = 2,\n              moveSpeed = baseSpeed * speedFactor / diffFactor;\n            if (moveOptions.spin.enable) {\n              spin(particle, moveSpeed);\n            } else {\n              applyPath(particle, delta);\n              var gravityOptions = particle.gravity,\n                gravityFactor = (gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && gravityOptions.inverse ? -1 : 1;\n              if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && moveSpeed) {\n                particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n              }\n              if (moveDrift && moveSpeed) {\n                particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n              }\n              var decay = particle.moveDecay;\n              if (decay != 1) {\n                particle.velocity.multTo(decay);\n              }\n              var velocity = particle.velocity.mult(moveSpeed),\n                maxSpeed = (_c = particle.retina.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n              if ((gravityOptions === null || gravityOptions === void 0 ? void 0 : gravityOptions.enable) && maxSpeed > 0 && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) {\n                velocity.y = gravityFactor * maxSpeed;\n                if (moveSpeed) {\n                  particle.velocity.y = velocity.y / moveSpeed;\n                }\n              }\n              var zIndexOptions = particle.options.zIndex,\n                zVelocityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.velocityRate);\n              if (zVelocityFactor != 1) {\n                velocity.multTo(zVelocityFactor);\n              }\n              particle.position.addTo(velocity);\n              if (moveOptions.vibrate) {\n                particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n                particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n              }\n            }\n            applyDistance(particle);\n          }\n        }]);\n        return BaseMover;\n      }();\n      ; // CONCATENATED MODULE: ../../move/base/dist/esm/index.js\n      function loadBaseMover(_x65) {\n        return _loadBaseMover.apply(this, arguments);\n      }\n      function _loadBaseMover() {\n        _loadBaseMover = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee66(engine) {\n          return _regeneratorRuntime().wrap(function _callee66$(_context66) {\n            while (1) switch (_context66.prev = _context66.next) {\n              case 0:\n                engine.addMover(\"base\", function () {\n                  return new BaseMover();\n                });\n              case 1:\n              case \"end\":\n                return _context66.stop();\n            }\n          }, _callee66);\n        }));\n        return _loadBaseMover.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../shapes/circle/dist/esm/CircleDrawer.js\n      var CircleDrawer = /*#__PURE__*/function () {\n        function CircleDrawer() {\n          _classCallCheck(this, CircleDrawer);\n        }\n        _createClass(CircleDrawer, [{\n          key: \"draw\",\n          value: function draw(context, particle, radius) {\n            if (!particle.circleRange) {\n              particle.circleRange = {\n                min: 0,\n                max: Math.PI * 2\n              };\n            }\n            var circleRange = particle.circleRange;\n            context.arc(0, 0, radius, circleRange.min, circleRange.max, false);\n          }\n        }, {\n          key: \"getSidesCount\",\n          value: function getSidesCount() {\n            return 12;\n          }\n        }, {\n          key: \"particleInit\",\n          value: function particleInit(container, particle) {\n            var _a;\n            var shapeData = particle.shapeData,\n              angle = (_a = shapeData === null || shapeData === void 0 ? void 0 : shapeData.angle) !== null && _a !== void 0 ? _a : {\n                max: 360,\n                min: 0\n              };\n            particle.circleRange = _typeof(angle) !== \"object\" ? {\n              min: 0,\n              max: angle * Math.PI / 180\n            } : {\n              min: angle.min * Math.PI / 180,\n              max: angle.max * Math.PI / 180\n            };\n          }\n        }]);\n        return CircleDrawer;\n      }();\n      ; // CONCATENATED MODULE: ../../shapes/circle/dist/esm/index.js\n      function loadCircleShape(_x66) {\n        return _loadCircleShape.apply(this, arguments);\n      }\n      function _loadCircleShape() {\n        _loadCircleShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee67(engine) {\n          return _regeneratorRuntime().wrap(function _callee67$(_context67) {\n            while (1) switch (_context67.prev = _context67.next) {\n              case 0:\n                _context67.next = 2;\n                return engine.addShape(\"circle\", new CircleDrawer());\n              case 2:\n              case \"end\":\n                return _context67.stop();\n            }\n          }, _callee67);\n        }));\n        return _loadCircleShape.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/color/dist/esm/ColorUpdater.js\n\n      function updateColorValue(delta, value, valueAnimation, max, decrease) {\n        var _a, _b;\n        var colorValue = value;\n        if (!colorValue || !valueAnimation.enable || colorValue.loops !== undefined && colorValue.maxLoops !== undefined && colorValue.maxLoops > 0 && colorValue.loops >= colorValue.maxLoops) {\n          return;\n        }\n        var offset = _randomInRange(valueAnimation.offset),\n          velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6,\n          decay = (_b = value.decay) !== null && _b !== void 0 ? _b : 1;\n        if (!decrease || colorValue.status === \"increasing\") {\n          colorValue.value += velocity;\n          if (colorValue.value > max) {\n            if (!colorValue.loops) {\n              colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n              colorValue.status = \"decreasing\";\n              colorValue.value -= colorValue.value % max;\n            }\n          }\n        } else {\n          colorValue.value -= velocity;\n          if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n              colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n          }\n        }\n        if (colorValue.velocity && decay !== 1) {\n          colorValue.velocity *= decay;\n        }\n        if (colorValue.value > max) {\n          colorValue.value %= max;\n        }\n      }\n      function updateColor(particle, delta) {\n        var _a, _b, _c;\n        var animationOptions = particle.options.color.animation;\n        var h = (_a = particle.color) === null || _a === void 0 ? void 0 : _a.h,\n          s = (_b = particle.color) === null || _b === void 0 ? void 0 : _b.s,\n          l = (_c = particle.color) === null || _c === void 0 ? void 0 : _c.l;\n        if (h) {\n          updateColorValue(delta, h, animationOptions.h, 360, false);\n        }\n        if (s) {\n          updateColorValue(delta, s, animationOptions.s, 100, true);\n        }\n        if (l) {\n          updateColorValue(delta, l, animationOptions.l, 100, true);\n        }\n      }\n      var ColorUpdater = /*#__PURE__*/function () {\n        function ColorUpdater(container) {\n          _classCallCheck(this, ColorUpdater);\n          this.container = container;\n        }\n        _createClass(ColorUpdater, [{\n          key: \"init\",\n          value: function init(particle) {\n            var hslColor = _rangeColorToHsl(particle.options.color, particle.id, particle.options.reduceDuplicates);\n            if (hslColor) {\n              particle.color = _getHslAnimationFromHsl(hslColor, particle.options.color.animation, this.container.retina.reduceFactor);\n            }\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a, _b, _c;\n            var animationOptions = particle.options.color.animation;\n            return !particle.destroyed && !particle.spawning && (((_a = particle.color) === null || _a === void 0 ? void 0 : _a.h.value) !== undefined && animationOptions.h.enable || ((_b = particle.color) === null || _b === void 0 ? void 0 : _b.s.value) !== undefined && animationOptions.s.enable || ((_c = particle.color) === null || _c === void 0 ? void 0 : _c.l.value) !== undefined && animationOptions.l.enable);\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle, delta) {\n            updateColor(particle, delta);\n          }\n        }]);\n        return ColorUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/color/dist/esm/index.js\n      function loadColorUpdater(_x67) {\n        return _loadColorUpdater.apply(this, arguments);\n      }\n      function _loadColorUpdater() {\n        _loadColorUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee68(engine) {\n          return _regeneratorRuntime().wrap(function _callee68$(_context68) {\n            while (1) switch (_context68.prev = _context68.next) {\n              case 0:\n                _context68.next = 2;\n                return engine.addParticleUpdater(\"color\", function (container) {\n                  return new ColorUpdater(container);\n                });\n              case 2:\n              case \"end\":\n                return _context68.stop();\n            }\n          }, _callee68);\n        }));\n        return _loadColorUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/attract/dist/esm/Options/Classes/Attract.js\n      var Attract = /*#__PURE__*/function () {\n        function Attract() {\n          _classCallCheck(this, Attract);\n          this.distance = 200;\n          this.duration = 0.4;\n          this.easing = \"ease-out-quad\";\n          this.factor = 1;\n          this.maxSpeed = 50;\n          this.speed = 1;\n        }\n        _createClass(Attract, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.distance !== undefined) {\n              this.distance = data.distance;\n            }\n            if (data.duration !== undefined) {\n              this.duration = data.duration;\n            }\n            if (data.easing !== undefined) {\n              this.easing = data.easing;\n            }\n            if (data.factor !== undefined) {\n              this.factor = data.factor;\n            }\n            if (data.maxSpeed !== undefined) {\n              this.maxSpeed = data.maxSpeed;\n            }\n            if (data.speed !== undefined) {\n              this.speed = data.speed;\n            }\n          }\n        }]);\n        return Attract;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/attract/dist/esm/Attractor.js\n      var Attractor = /*#__PURE__*/function (_ExternalInteractorBa2) {\n        _inherits(Attractor, _ExternalInteractorBa2);\n        var _super16 = _createSuper(Attractor);\n        function Attractor(engine, container) {\n          var _this38;\n          _classCallCheck(this, Attractor);\n          _this38 = _super16.call(this, container);\n          _this38._engine = engine;\n          if (!container.attract) {\n            container.attract = {\n              particles: []\n            };\n          }\n          _this38.handleClickMode = function (mode) {\n            var options = _this38.container.actualOptions,\n              attract = options.interactivity.modes.attract;\n            if (!attract || mode !== \"attract\") {\n              return;\n            }\n            if (!container.attract) {\n              container.attract = {\n                particles: []\n              };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            var _iterator74 = _createForOfIteratorHelper(container.attract.particles),\n              _step74;\n            try {\n              for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {\n                var particle = _step74.value;\n                if (!_this38.isEnabled(particle)) {\n                  continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n              }\n            } catch (err) {\n              _iterator74.e(err);\n            } finally {\n              _iterator74.f();\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(function () {\n              if (!container.destroyed) {\n                if (!container.attract) {\n                  container.attract = {\n                    particles: []\n                  };\n                }\n                container.attract.clicking = false;\n              }\n            }, attract.duration * 1000);\n          };\n          return _this38;\n        }\n        _createClass(Attractor, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {\n            var container = this.container,\n              attract = container.actualOptions.interactivity.modes.attract;\n            if (!attract) {\n              return;\n            }\n            container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n          }\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {\n              var container, options, mouseMoveStatus, events, hoverEnabled, hoverMode, clickEnabled, clickMode;\n              return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n                while (1) switch (_context40.prev = _context40.next) {\n                  case 0:\n                    container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === _mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode;\n                    if (mouseMoveStatus && hoverEnabled && _isInArray(\"attract\", hoverMode)) {\n                      this.hoverAttract();\n                    } else if (clickEnabled && _isInArray(\"attract\", clickMode)) {\n                      this.clickAttract();\n                    }\n                  case 2:\n                  case \"end\":\n                    return _context40.stop();\n                }\n              }, _callee40, this);\n            }));\n            function interact() {\n              return _interact2.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            var container = this.container,\n              options = container.actualOptions,\n              mouse = container.interactivity.mouse,\n              events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events;\n            if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n              return false;\n            }\n            var hoverMode = events.onHover.mode,\n              clickMode = events.onClick.mode;\n            return _isInArray(\"attract\", hoverMode) || _isInArray(\"attract\", clickMode);\n          }\n        }, {\n          key: \"loadModeOptions\",\n          value: function loadModeOptions(options) {\n            if (!options.attract) {\n              options.attract = new Attract();\n            }\n            for (var _len10 = arguments.length, sources = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n              sources[_key10 - 1] = arguments[_key10];\n            }\n            for (var _i9 = 0, _sources6 = sources; _i9 < _sources6.length; _i9++) {\n              var source = _sources6[_i9];\n              options.attract.load(source === null || source === void 0 ? void 0 : source.attract);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }, {\n          key: \"clickAttract\",\n          value: function clickAttract() {\n            var container = this.container;\n            if (!container.attract) {\n              container.attract = {\n                particles: []\n              };\n            }\n            if (!container.attract.finish) {\n              if (!container.attract.count) {\n                container.attract.count = 0;\n              }\n              container.attract.count++;\n              if (container.attract.count === container.particles.count) {\n                container.attract.finish = true;\n              }\n            }\n            if (container.attract.clicking) {\n              var mousePos = container.interactivity.mouse.clickPosition,\n                attractRadius = container.retina.attractModeDistance;\n              if (!attractRadius || attractRadius < 0 || !mousePos) {\n                return;\n              }\n              this.processAttract(mousePos, attractRadius, new _Circle(mousePos.x, mousePos.y, attractRadius));\n            } else if (container.attract.clicking === false) {\n              container.attract.particles = [];\n            }\n            return;\n          }\n        }, {\n          key: \"hoverAttract\",\n          value: function hoverAttract() {\n            var container = this.container,\n              mousePos = container.interactivity.mouse.position,\n              attractRadius = container.retina.attractModeDistance;\n            if (!attractRadius || attractRadius < 0 || !mousePos) {\n              return;\n            }\n            this.processAttract(mousePos, attractRadius, new _Circle(mousePos.x, mousePos.y, attractRadius));\n          }\n        }, {\n          key: \"processAttract\",\n          value: function processAttract(position, attractRadius, area) {\n            var _this39 = this;\n            var container = this.container,\n              attractOptions = container.actualOptions.interactivity.modes.attract;\n            if (!attractOptions) {\n              return;\n            }\n            var query = container.particles.quadTree.query(area, function (p) {\n              return _this39.isEnabled(p);\n            });\n            var _iterator75 = _createForOfIteratorHelper(query),\n              _step75;\n            try {\n              for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {\n                var particle = _step75.value;\n                var _getDistances5 = _getDistances(particle.position, position),\n                  dx = _getDistances5.dx,\n                  dy = _getDistances5.dy,\n                  distance = _getDistances5.distance;\n                var velocity = attractOptions.speed * attractOptions.factor;\n                var attractFactor = _clamp(_getEasing(attractOptions.easing)(1 - distance / attractRadius) * velocity, 0, attractOptions.maxSpeed);\n                var normVec = _Vector.create(distance === 0 ? velocity : dx / distance * attractFactor, distance === 0 ? velocity : dy / distance * attractFactor);\n                particle.position.subFrom(normVec);\n              }\n            } catch (err) {\n              _iterator75.e(err);\n            } finally {\n              _iterator75.f();\n            }\n          }\n        }]);\n        return Attractor;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/attract/dist/esm/index.js\n      function loadExternalAttractInteraction(_x68) {\n        return _loadExternalAttractInteraction.apply(this, arguments);\n      }\n      function _loadExternalAttractInteraction() {\n        _loadExternalAttractInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee69(engine) {\n          return _regeneratorRuntime().wrap(function _callee69$(_context69) {\n            while (1) switch (_context69.prev = _context69.next) {\n              case 0:\n                _context69.next = 2;\n                return engine.addInteractor(\"externalAttract\", function (container) {\n                  return new Attractor(engine, container);\n                });\n              case 2:\n              case \"end\":\n                return _context69.stop();\n            }\n          }, _callee69);\n        }));\n        return _loadExternalAttractInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/bounce/dist/esm/Options/Classes/Bounce.js\n      var Bounce = /*#__PURE__*/function () {\n        function Bounce() {\n          _classCallCheck(this, Bounce);\n          this.distance = 200;\n        }\n        _createClass(Bounce, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.distance !== undefined) {\n              this.distance = data.distance;\n            }\n          }\n        }]);\n        return Bounce;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/bounce/dist/esm/Bouncer.js\n      var Bouncer = /*#__PURE__*/function (_ExternalInteractorBa3) {\n        _inherits(Bouncer, _ExternalInteractorBa3);\n        var _super17 = _createSuper(Bouncer);\n        function Bouncer(container) {\n          _classCallCheck(this, Bouncer);\n          return _super17.call(this, container);\n        }\n        _createClass(Bouncer, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {\n            var container = this.container,\n              bounce = container.actualOptions.interactivity.modes.bounce;\n            if (!bounce) {\n              return;\n            }\n            container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n          }\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {\n              var _this40 = this;\n              var container, options, events, mouseMoveStatus, hoverEnabled, hoverMode, divs;\n              return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n                while (1) switch (_context41.prev = _context41.next) {\n                  case 0:\n                    container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === _mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n                    if (mouseMoveStatus && hoverEnabled && _isInArray(\"bounce\", hoverMode)) {\n                      this.processMouseBounce();\n                    } else {\n                      _divModeExecute(\"bounce\", divs, function (selector, div) {\n                        return _this40.singleSelectorBounce(selector, div);\n                      });\n                    }\n                  case 2:\n                  case \"end\":\n                    return _context41.stop();\n                }\n              }, _callee41, this);\n            }));\n            function interact() {\n              return _interact3.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            var container = this.container,\n              options = container.actualOptions,\n              mouse = container.interactivity.mouse,\n              events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n              divs = events.onDiv;\n            return mouse.position && events.onHover.enable && _isInArray(\"bounce\", events.onHover.mode) || _isDivModeEnabled(\"bounce\", divs);\n          }\n        }, {\n          key: \"loadModeOptions\",\n          value: function loadModeOptions(options) {\n            if (!options.bounce) {\n              options.bounce = new Bounce();\n            }\n            for (var _len11 = arguments.length, sources = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n              sources[_key11 - 1] = arguments[_key11];\n            }\n            for (var _i10 = 0, _sources7 = sources; _i10 < _sources7.length; _i10++) {\n              var source = _sources7[_i10];\n              options.bounce.load(source === null || source === void 0 ? void 0 : source.bounce);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }, {\n          key: \"processBounce\",\n          value: function processBounce(position, radius, area) {\n            var _this41 = this;\n            var query = this.container.particles.quadTree.query(area, function (p) {\n              return _this41.isEnabled(p);\n            });\n            var _iterator76 = _createForOfIteratorHelper(query),\n              _step76;\n            try {\n              for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {\n                var particle = _step76.value;\n                if (area instanceof _Circle) {\n                  _circleBounce(_circleBounceDataFromParticle(particle), {\n                    position: position,\n                    radius: radius,\n                    mass: Math.pow(radius, 2) * Math.PI / 2,\n                    velocity: _Vector.origin,\n                    factor: _Vector.origin\n                  });\n                } else if (area instanceof _Rectangle) {\n                  _rectBounce(particle, _calculateBounds(position, radius));\n                }\n              }\n            } catch (err) {\n              _iterator76.e(err);\n            } finally {\n              _iterator76.f();\n            }\n          }\n        }, {\n          key: \"processMouseBounce\",\n          value: function processMouseBounce() {\n            var container = this.container,\n              pxRatio = container.retina.pixelRatio,\n              tolerance = 10 * pxRatio,\n              mousePos = container.interactivity.mouse.position,\n              radius = container.retina.bounceModeDistance;\n            if (!radius || radius < 0 || !mousePos) {\n              return;\n            }\n            this.processBounce(mousePos, radius, new _Circle(mousePos.x, mousePos.y, radius + tolerance));\n          }\n        }, {\n          key: \"singleSelectorBounce\",\n          value: function singleSelectorBounce(selector, div) {\n            var _this42 = this;\n            var container = this.container,\n              query = document.querySelectorAll(selector);\n            if (!query.length) {\n              return;\n            }\n            query.forEach(function (item) {\n              var elem = item,\n                pxRatio = container.retina.pixelRatio,\n                pos = {\n                  x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                  y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n                },\n                radius = elem.offsetWidth / 2 * pxRatio,\n                tolerance = 10 * pxRatio,\n                area = div.type === \"circle\" ? new _Circle(pos.x, pos.y, radius + tolerance) : new _Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * 2, elem.offsetHeight * pxRatio + tolerance * 2);\n              _this42.processBounce(pos, radius, area);\n            });\n          }\n        }]);\n        return Bouncer;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/bounce/dist/esm/index.js\n      function loadExternalBounceInteraction(_x69) {\n        return _loadExternalBounceInteraction.apply(this, arguments);\n      }\n      function _loadExternalBounceInteraction() {\n        _loadExternalBounceInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee70(engine) {\n          return _regeneratorRuntime().wrap(function _callee70$(_context70) {\n            while (1) switch (_context70.prev = _context70.next) {\n              case 0:\n                _context70.next = 2;\n                return engine.addInteractor(\"externalBounce\", function (container) {\n                  return new Bouncer(container);\n                });\n              case 2:\n              case \"end\":\n                return _context70.stop();\n            }\n          }, _callee70);\n        }));\n        return _loadExternalBounceInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/bubble/dist/esm/Options/Classes/BubbleBase.js\n      var BubbleBase = /*#__PURE__*/function () {\n        function BubbleBase() {\n          _classCallCheck(this, BubbleBase);\n          this.distance = 200;\n          this.duration = 0.4;\n          this.mix = false;\n        }\n        _createClass(BubbleBase, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.distance !== undefined) {\n              this.distance = data.distance;\n            }\n            if (data.duration !== undefined) {\n              this.duration = data.duration;\n            }\n            if (data.mix !== undefined) {\n              this.mix = data.mix;\n            }\n            if (data.opacity !== undefined) {\n              this.opacity = data.opacity;\n            }\n            if (data.color !== undefined) {\n              var sourceColor = this.color instanceof Array ? undefined : this.color;\n              this.color = _executeOnSingleOrMultiple(data.color, function (color) {\n                return _OptionsColor.create(sourceColor, color);\n              });\n            }\n            if (data.size !== undefined) {\n              this.size = data.size;\n            }\n          }\n        }]);\n        return BubbleBase;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/bubble/dist/esm/Options/Classes/BubbleDiv.js\n      var BubbleDiv = /*#__PURE__*/function (_BubbleBase) {\n        _inherits(BubbleDiv, _BubbleBase);\n        var _super18 = _createSuper(BubbleDiv);\n        function BubbleDiv() {\n          var _this43;\n          _classCallCheck(this, BubbleDiv);\n          _this43 = _super18.call(this);\n          _this43.selectors = [];\n          return _this43;\n        }\n        _createClass(BubbleDiv, [{\n          key: \"ids\",\n          get: function get() {\n            return _executeOnSingleOrMultiple(this.selectors, function (t) {\n              return t.replace(\"#\", \"\");\n            });\n          },\n          set: function set(value) {\n            this.selectors = _executeOnSingleOrMultiple(value, function (t) {\n              return \"#\".concat(t);\n            });\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            _get(_getPrototypeOf(BubbleDiv.prototype), \"load\", this).call(this, data);\n            if (!data) {\n              return;\n            }\n            if (data.ids !== undefined) {\n              this.ids = data.ids;\n            }\n            if (data.selectors !== undefined) {\n              this.selectors = data.selectors;\n            }\n          }\n        }]);\n        return BubbleDiv;\n      }(BubbleBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/bubble/dist/esm/Options/Classes/Bubble.js\n      var Bubble = /*#__PURE__*/function (_BubbleBase2) {\n        _inherits(Bubble, _BubbleBase2);\n        var _super19 = _createSuper(Bubble);\n        function Bubble() {\n          _classCallCheck(this, Bubble);\n          return _super19.apply(this, arguments);\n        }\n        _createClass(Bubble, [{\n          key: \"load\",\n          value: function load(data) {\n            _get(_getPrototypeOf(Bubble.prototype), \"load\", this).call(this, data);\n            if (!data) {\n              return;\n            }\n            this.divs = _executeOnSingleOrMultiple(data.divs, function (div) {\n              var tmp = new BubbleDiv();\n              tmp.load(div);\n              return tmp;\n            });\n          }\n        }]);\n        return Bubble;\n      }(BubbleBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/bubble/dist/esm/Bubbler.js\n\n      function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n        if (modeValue >= optionsValue) {\n          var value = particleValue + (modeValue - optionsValue) * ratio;\n          return _clamp(value, particleValue, modeValue);\n        } else if (modeValue < optionsValue) {\n          var _value2 = particleValue - (optionsValue - modeValue) * ratio;\n          return _clamp(_value2, modeValue, particleValue);\n        }\n      }\n      var Bubbler = /*#__PURE__*/function (_ExternalInteractorBa4) {\n        _inherits(Bubbler, _ExternalInteractorBa4);\n        var _super20 = _createSuper(Bubbler);\n        function Bubbler(container) {\n          var _this44;\n          _classCallCheck(this, Bubbler);\n          _this44 = _super20.call(this, container);\n          if (!container.bubble) {\n            container.bubble = {};\n          }\n          _this44.handleClickMode = function (mode) {\n            if (mode !== \"bubble\") {\n              return;\n            }\n            if (!container.bubble) {\n              container.bubble = {};\n            }\n            container.bubble.clicking = true;\n          };\n          return _this44;\n        }\n        _createClass(Bubbler, [{\n          key: \"clear\",\n          value: function clear(particle, delta, force) {\n            if (particle.bubble.inRange && !force) {\n              return;\n            }\n            delete particle.bubble.div;\n            delete particle.bubble.opacity;\n            delete particle.bubble.radius;\n            delete particle.bubble.color;\n          }\n        }, {\n          key: \"init\",\n          value: function init() {\n            var container = this.container,\n              bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble) {\n              return;\n            }\n            container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n            if (bubble.size !== undefined) {\n              container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n            }\n          }\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee42(delta) {\n              var _this45 = this;\n              var options, events, onHover, onClick, hoverEnabled, hoverMode, clickEnabled, clickMode, divs;\n              return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n                while (1) switch (_context42.prev = _context42.next) {\n                  case 0:\n                    options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n                    if (hoverEnabled && _isInArray(\"bubble\", hoverMode)) {\n                      this.hoverBubble(delta);\n                    } else if (clickEnabled && _isInArray(\"bubble\", clickMode)) {\n                      this.clickBubble(delta);\n                    } else {\n                      _divModeExecute(\"bubble\", divs, function (selector, div) {\n                        return _this45.singleSelectorHover(delta, selector, div);\n                      });\n                    }\n                  case 2:\n                  case \"end\":\n                    return _context42.stop();\n                }\n              }, _callee42, this);\n            }));\n            function interact(_x70) {\n              return _interact4.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            var container = this.container,\n              options = container.actualOptions,\n              mouse = container.interactivity.mouse,\n              events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n              divs = events.onDiv,\n              divBubble = _isDivModeEnabled(\"bubble\", divs);\n            if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n              return false;\n            }\n            var hoverMode = events.onHover.mode;\n            var clickMode = events.onClick.mode;\n            return _isInArray(\"bubble\", hoverMode) || _isInArray(\"bubble\", clickMode) || divBubble;\n          }\n        }, {\n          key: \"loadModeOptions\",\n          value: function loadModeOptions(options) {\n            if (!options.bubble) {\n              options.bubble = new Bubble();\n            }\n            for (var _len12 = arguments.length, sources = new Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n              sources[_key12 - 1] = arguments[_key12];\n            }\n            for (var _i11 = 0, _sources8 = sources; _i11 < _sources8.length; _i11++) {\n              var source = _sources8[_i11];\n              options.bubble.load(source === null || source === void 0 ? void 0 : source.bubble);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset(particle) {\n            particle.bubble.inRange = false;\n          }\n        }, {\n          key: \"clickBubble\",\n          value: function clickBubble(delta) {\n            var _this46 = this;\n            var _a, _b;\n            var container = this.container,\n              options = container.actualOptions,\n              mouseClickPos = container.interactivity.mouse.clickPosition,\n              bubble = options.interactivity.modes.bubble;\n            if (!bubble || !mouseClickPos) {\n              return;\n            }\n            if (!container.bubble) {\n              container.bubble = {};\n            }\n            var distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < 0) {\n              return;\n            }\n            var query = container.particles.quadTree.queryCircle(mouseClickPos, distance, function (p) {\n              return _this46.isEnabled(p);\n            });\n            var _iterator77 = _createForOfIteratorHelper(query),\n              _step77;\n            try {\n              for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {\n                var particle = _step77.value;\n                if (!container.bubble.clicking) {\n                  continue;\n                }\n                particle.bubble.inRange = !container.bubble.durationEnd;\n                var pos = particle.getPosition(),\n                  distMouse = _getDistance(pos, mouseClickPos),\n                  timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n                if (timeSpent > bubble.duration) {\n                  container.bubble.durationEnd = true;\n                }\n                if (timeSpent > bubble.duration * 2) {\n                  container.bubble.clicking = false;\n                  container.bubble.durationEnd = false;\n                }\n                var sizeData = {\n                  bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius\n                  },\n                  particlesObj: {\n                    optValue: _getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value\n                  },\n                  type: \"size\"\n                };\n                this.process(particle, distMouse, timeSpent, sizeData);\n                var opacityData = {\n                  bubbleObj: {\n                    optValue: bubble.opacity,\n                    value: particle.bubble.opacity\n                  },\n                  particlesObj: {\n                    optValue: _getRangeMax(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n                  },\n                  type: \"opacity\"\n                };\n                this.process(particle, distMouse, timeSpent, opacityData);\n                if (!container.bubble.durationEnd) {\n                  if (distMouse <= distance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                  } else {\n                    delete particle.bubble.color;\n                  }\n                } else {\n                  delete particle.bubble.color;\n                }\n              }\n            } catch (err) {\n              _iterator77.e(err);\n            } finally {\n              _iterator77.f();\n            }\n          }\n        }, {\n          key: \"hoverBubble\",\n          value: function hoverBubble(delta) {\n            var _this47 = this;\n            var container = this.container,\n              mousePos = container.interactivity.mouse.position,\n              distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < 0 || mousePos === undefined) {\n              return;\n            }\n            var query = container.particles.quadTree.queryCircle(mousePos, distance, function (p) {\n              return _this47.isEnabled(p);\n            });\n            var _iterator78 = _createForOfIteratorHelper(query),\n              _step78;\n            try {\n              for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {\n                var particle = _step78.value;\n                particle.bubble.inRange = true;\n                var pos = particle.getPosition(),\n                  pointDistance = _getDistance(pos, mousePos),\n                  ratio = 1 - pointDistance / distance;\n                if (pointDistance <= distance) {\n                  if (ratio >= 0 && container.interactivity.status === _mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                  }\n                } else {\n                  this.reset(particle);\n                }\n                if (container.interactivity.status === _mouseLeaveEvent) {\n                  this.reset(particle);\n                }\n              }\n            } catch (err) {\n              _iterator78.e(err);\n            } finally {\n              _iterator78.f();\n            }\n          }\n        }, {\n          key: \"hoverBubbleColor\",\n          value: function hoverBubbleColor(particle, ratio, divBubble) {\n            var options = this.container.actualOptions;\n            var bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n              return;\n            }\n            if (!particle.bubble.finalColor) {\n              var modeColor = bubbleOptions.color;\n              if (!modeColor) {\n                return;\n              }\n              var bubbleColor = _itemFromSingleOrMultiple(modeColor);\n              particle.bubble.finalColor = _rangeColorToHsl(bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n              return;\n            }\n            if (bubbleOptions.mix) {\n              particle.bubble.color = undefined;\n              var pColor = particle.getFillColor();\n              particle.bubble.color = pColor ? _rgbToHsl(_colorMix(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n            } else {\n              particle.bubble.color = particle.bubble.finalColor;\n            }\n          }\n        }, {\n          key: \"hoverBubbleOpacity\",\n          value: function hoverBubbleOpacity(particle, ratio, divBubble) {\n            var _a, _b, _c, _d;\n            var container = this.container,\n              options = container.actualOptions,\n              modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : (_b = options.interactivity.modes.bubble) === null || _b === void 0 ? void 0 : _b.opacity;\n            if (!modeOpacity) {\n              return;\n            }\n            var optOpacity = particle.options.opacity.value;\n            var pOpacity = (_d = (_c = particle.opacity) === null || _c === void 0 ? void 0 : _c.value) !== null && _d !== void 0 ? _d : 1;\n            var opacity = calculateBubbleValue(pOpacity, modeOpacity, _getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n              particle.bubble.opacity = opacity;\n            }\n          }\n        }, {\n          key: \"hoverBubbleSize\",\n          value: function hoverBubbleSize(particle, ratio, divBubble) {\n            var container = this.container,\n              modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n              return;\n            }\n            var optSize = _getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n            var pSize = particle.size.value;\n            var size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n              particle.bubble.radius = size;\n            }\n          }\n        }, {\n          key: \"process\",\n          value: function process(particle, distMouse, timeSpent, data) {\n            var container = this.container,\n              bubbleParam = data.bubbleObj.optValue,\n              options = container.actualOptions,\n              bubble = options.interactivity.modes.bubble;\n            if (!bubble || bubbleParam === undefined) {\n              return;\n            }\n            var bubbleDuration = bubble.duration,\n              bubbleDistance = container.retina.bubbleModeDistance,\n              particlesParam = data.particlesObj.optValue,\n              pObjBubble = data.bubbleObj.value,\n              pObj = data.particlesObj.value || 0,\n              type = data.type;\n            if (!bubbleDistance || bubbleDistance < 0 || bubbleParam === particlesParam) {\n              return;\n            }\n            if (!container.bubble) {\n              container.bubble = {};\n            }\n            if (!container.bubble.durationEnd) {\n              if (distMouse <= bubbleDistance) {\n                var obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                  var value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n                  if (type === \"size\") {\n                    particle.bubble.radius = value;\n                  }\n                  if (type === \"opacity\") {\n                    particle.bubble.opacity = value;\n                  }\n                }\n              } else {\n                if (type === \"size\") {\n                  delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                  delete particle.bubble.opacity;\n                }\n              }\n            } else if (pObjBubble) {\n              if (type === \"size\") {\n                delete particle.bubble.radius;\n              }\n              if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n              }\n            }\n          }\n        }, {\n          key: \"singleSelectorHover\",\n          value: function singleSelectorHover(delta, selector, div) {\n            var _this48 = this;\n            var container = this.container,\n              selectors = document.querySelectorAll(selector),\n              bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n              return;\n            }\n            selectors.forEach(function (item) {\n              var elem = item,\n                pxRatio = container.retina.pixelRatio,\n                pos = {\n                  x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                  y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n                },\n                repulseRadius = elem.offsetWidth / 2 * pxRatio,\n                area = div.type === \"circle\" ? new _Circle(pos.x, pos.y, repulseRadius) : new _Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n                query = container.particles.quadTree.query(area, function (p) {\n                  return _this48.isEnabled(p);\n                });\n              var _iterator79 = _createForOfIteratorHelper(query),\n                _step79;\n              try {\n                for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {\n                  var particle = _step79.value;\n                  if (!area.contains(particle.getPosition())) {\n                    continue;\n                  }\n                  particle.bubble.inRange = true;\n                  var divs = bubble.divs;\n                  var divBubble = _divMode(divs, elem);\n                  if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    _this48.clear(particle, delta, true);\n                    particle.bubble.div = elem;\n                  }\n                  _this48.hoverBubbleSize(particle, 1, divBubble);\n                  _this48.hoverBubbleOpacity(particle, 1, divBubble);\n                  _this48.hoverBubbleColor(particle, 1, divBubble);\n                }\n              } catch (err) {\n                _iterator79.e(err);\n              } finally {\n                _iterator79.f();\n              }\n            });\n          }\n        }]);\n        return Bubbler;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/bubble/dist/esm/index.js\n      function loadExternalBubbleInteraction(_x71) {\n        return _loadExternalBubbleInteraction.apply(this, arguments);\n      }\n      function _loadExternalBubbleInteraction() {\n        _loadExternalBubbleInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee71(engine) {\n          return _regeneratorRuntime().wrap(function _callee71$(_context71) {\n            while (1) switch (_context71.prev = _context71.next) {\n              case 0:\n                _context71.next = 2;\n                return engine.addInteractor(\"externalBubble\", function (container) {\n                  return new Bubbler(container);\n                });\n              case 2:\n              case \"end\":\n                return _context71.stop();\n            }\n          }, _callee71);\n        }));\n        return _loadExternalBubbleInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/connect/dist/esm/Options/Classes/ConnectLinks.js\n      var ConnectLinks = /*#__PURE__*/function () {\n        function ConnectLinks() {\n          _classCallCheck(this, ConnectLinks);\n          this.opacity = 0.5;\n        }\n        _createClass(ConnectLinks, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.opacity !== undefined) {\n              this.opacity = data.opacity;\n            }\n          }\n        }]);\n        return ConnectLinks;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/connect/dist/esm/Options/Classes/Connect.js\n      var Connect = /*#__PURE__*/function () {\n        function Connect() {\n          _classCallCheck(this, Connect);\n          this.distance = 80;\n          this.links = new ConnectLinks();\n          this.radius = 60;\n        }\n        _createClass(Connect, [{\n          key: \"lineLinked\",\n          get: function get() {\n            return this.links;\n          },\n          set: function set(value) {\n            this.links = value;\n          }\n        }, {\n          key: \"line_linked\",\n          get: function get() {\n            return this.links;\n          },\n          set: function set(value) {\n            this.links = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b;\n            if (!data) {\n              return;\n            }\n            if (data.distance !== undefined) {\n              this.distance = data.distance;\n            }\n            this.links.load((_b = (_a = data.links) !== null && _a !== void 0 ? _a : data.lineLinked) !== null && _b !== void 0 ? _b : data.line_linked);\n            if (data.radius !== undefined) {\n              this.radius = data.radius;\n            }\n          }\n        }]);\n        return Connect;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/connect/dist/esm/Connector.js\n\n      function gradient(context, p1, p2, opacity) {\n        var gradStop = Math.floor(p2.getRadius() / p1.getRadius()),\n          color1 = p1.getFillColor(),\n          color2 = p2.getFillColor();\n        if (!color1 || !color2) {\n          return;\n        }\n        var sourcePos = p1.getPosition(),\n          destPos = p2.getPosition(),\n          midRgb = _colorMix(color1, color2, p1.getRadius(), p2.getRadius()),\n          grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n        grad.addColorStop(0, _getStyleFromHsl(color1, opacity));\n        grad.addColorStop(gradStop > 1 ? 1 : gradStop, _getStyleFromRgb(midRgb, opacity));\n        grad.addColorStop(1, _getStyleFromHsl(color2, opacity));\n        return grad;\n      }\n      function drawConnectLine(context, width, lineStyle, begin, end) {\n        _drawLine(context, begin, end);\n        context.lineWidth = width;\n        context.strokeStyle = lineStyle;\n        context.stroke();\n      }\n      function lineStyle(container, ctx, p1, p2) {\n        var options = container.actualOptions,\n          connectOptions = options.interactivity.modes.connect;\n        if (!connectOptions) {\n          return;\n        }\n        return gradient(ctx, p1, p2, connectOptions.links.opacity);\n      }\n      function drawConnection(container, p1, p2) {\n        container.canvas.draw(function (ctx) {\n          var _a;\n          var ls = lineStyle(container, ctx, p1, p2);\n          if (!ls) {\n            return;\n          }\n          var pos1 = p1.getPosition(),\n            pos2 = p2.getPosition();\n          drawConnectLine(ctx, (_a = p1.retina.linksWidth) !== null && _a !== void 0 ? _a : 0, ls, pos1, pos2);\n        });\n      }\n      var Connector = /*#__PURE__*/function (_ExternalInteractorBa5) {\n        _inherits(Connector, _ExternalInteractorBa5);\n        var _super21 = _createSuper(Connector);\n        function Connector(container) {\n          _classCallCheck(this, Connector);\n          return _super21.call(this, container);\n        }\n        _createClass(Connector, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {\n            var container = this.container,\n              connect = container.actualOptions.interactivity.modes.connect;\n            if (!connect) {\n              return;\n            }\n            container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n            container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n          }\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {\n              var _this49 = this;\n              var container, options, mousePos, distance, query, i, _iterator80, _step80, p1, pos1, _iterator81, _step81, p2, pos2, distMax, xDiff, yDiff;\n              return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n                while (1) switch (_context43.prev = _context43.next) {\n                  case 0:\n                    container = this.container, options = container.actualOptions;\n                    if (!(options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\")) {\n                      _context43.next = 9;\n                      break;\n                    }\n                    mousePos = container.interactivity.mouse.position;\n                    if (!(!container.retina.connectModeDistance || container.retina.connectModeDistance < 0 || !container.retina.connectModeRadius || container.retina.connectModeRadius < 0 || !mousePos)) {\n                      _context43.next = 5;\n                      break;\n                    }\n                    return _context43.abrupt(\"return\");\n                  case 5:\n                    distance = Math.abs(container.retina.connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, function (p) {\n                      return _this49.isEnabled(p);\n                    });\n                    i = 0;\n                    _iterator80 = _createForOfIteratorHelper(query);\n                    try {\n                      for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {\n                        p1 = _step80.value;\n                        pos1 = p1.getPosition();\n                        _iterator81 = _createForOfIteratorHelper(query.slice(i + 1));\n                        try {\n                          for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {\n                            p2 = _step81.value;\n                            pos2 = p2.getPosition(), distMax = Math.abs(container.retina.connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                            if (xDiff < distMax && yDiff < distMax) {\n                              drawConnection(container, p1, p2);\n                            }\n                          }\n                        } catch (err) {\n                          _iterator81.e(err);\n                        } finally {\n                          _iterator81.f();\n                        }\n                        ++i;\n                      }\n                    } catch (err) {\n                      _iterator80.e(err);\n                    } finally {\n                      _iterator80.f();\n                    }\n                  case 9:\n                  case \"end\":\n                    return _context43.stop();\n                }\n              }, _callee43, this);\n            }));\n            function interact() {\n              return _interact5.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            var container = this.container,\n              mouse = container.interactivity.mouse,\n              events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n            if (!(events.onHover.enable && mouse.position)) {\n              return false;\n            }\n            return _isInArray(\"connect\", events.onHover.mode);\n          }\n        }, {\n          key: \"loadModeOptions\",\n          value: function loadModeOptions(options) {\n            if (!options.connect) {\n              options.connect = new Connect();\n            }\n            for (var _len13 = arguments.length, sources = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {\n              sources[_key13 - 1] = arguments[_key13];\n            }\n            for (var _i12 = 0, _sources9 = sources; _i12 < _sources9.length; _i12++) {\n              var source = _sources9[_i12];\n              options.connect.load(source === null || source === void 0 ? void 0 : source.connect);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }]);\n        return Connector;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/connect/dist/esm/index.js\n      function loadExternalConnectInteraction(_x72) {\n        return _loadExternalConnectInteraction.apply(this, arguments);\n      }\n      function _loadExternalConnectInteraction() {\n        _loadExternalConnectInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee72(engine) {\n          return _regeneratorRuntime().wrap(function _callee72$(_context72) {\n            while (1) switch (_context72.prev = _context72.next) {\n              case 0:\n                _context72.next = 2;\n                return engine.addInteractor(\"externalConnect\", function (container) {\n                  return new Connector(container);\n                });\n              case 2:\n              case \"end\":\n                return _context72.stop();\n            }\n          }, _callee72);\n        }));\n        return _loadExternalConnectInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/grab/dist/esm/Options/Classes/GrabLinks.js\n      var GrabLinks = /*#__PURE__*/function () {\n        function GrabLinks() {\n          _classCallCheck(this, GrabLinks);\n          this.blink = false;\n          this.consent = false;\n          this.opacity = 1;\n        }\n        _createClass(GrabLinks, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.blink !== undefined) {\n              this.blink = data.blink;\n            }\n            if (data.color !== undefined) {\n              this.color = _OptionsColor.create(this.color, data.color);\n            }\n            if (data.consent !== undefined) {\n              this.consent = data.consent;\n            }\n            if (data.opacity !== undefined) {\n              this.opacity = data.opacity;\n            }\n          }\n        }]);\n        return GrabLinks;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/grab/dist/esm/Options/Classes/Grab.js\n      var Grab = /*#__PURE__*/function () {\n        function Grab() {\n          _classCallCheck(this, Grab);\n          this.distance = 100;\n          this.links = new GrabLinks();\n        }\n        _createClass(Grab, [{\n          key: \"lineLinked\",\n          get: function get() {\n            return this.links;\n          },\n          set: function set(value) {\n            this.links = value;\n          }\n        }, {\n          key: \"line_linked\",\n          get: function get() {\n            return this.links;\n          },\n          set: function set(value) {\n            this.links = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a, _b;\n            if (!data) {\n              return;\n            }\n            if (data.distance !== undefined) {\n              this.distance = data.distance;\n            }\n            this.links.load((_b = (_a = data.links) !== null && _a !== void 0 ? _a : data.lineLinked) !== null && _b !== void 0 ? _b : data.line_linked);\n          }\n        }]);\n        return Grab;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/grab/dist/esm/Grabber.js\n\n      function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n        _drawLine(context, begin, end);\n        context.strokeStyle = _getStyleFromRgb(colorLine, opacity);\n        context.lineWidth = width;\n        context.stroke();\n      }\n      function drawGrab(container, particle, lineColor, opacity, mousePos) {\n        container.canvas.draw(function (ctx) {\n          var _a;\n          var beginPos = particle.getPosition();\n          drawGrabLine(ctx, (_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0, beginPos, mousePos, lineColor, opacity);\n        });\n      }\n      var Grabber = /*#__PURE__*/function (_ExternalInteractorBa6) {\n        _inherits(Grabber, _ExternalInteractorBa6);\n        var _super22 = _createSuper(Grabber);\n        function Grabber(container) {\n          _classCallCheck(this, Grabber);\n          return _super22.call(this, container);\n        }\n        _createClass(Grabber, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {\n            var container = this.container,\n              grab = container.actualOptions.interactivity.modes.grab;\n            if (!grab) {\n              return;\n            }\n            container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n          }\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {\n              var _this50 = this;\n              var _a, _b, container, options, interactivity, mousePos, distance, query, _iterator82, _step82, particle, pos, pointDistance, grabLineOptions, lineOpacity, opacityLine, optColor, linksOptions, colorLine;\n              return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n                while (1) switch (_context44.prev = _context44.next) {\n                  case 0:\n                    container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n                    if (!(!interactivity.modes.grab || !interactivity.events.onHover.enable || container.interactivity.status !== _mouseMoveEvent)) {\n                      _context44.next = 3;\n                      break;\n                    }\n                    return _context44.abrupt(\"return\");\n                  case 3:\n                    mousePos = container.interactivity.mouse.position;\n                    if (mousePos) {\n                      _context44.next = 6;\n                      break;\n                    }\n                    return _context44.abrupt(\"return\");\n                  case 6:\n                    distance = container.retina.grabModeDistance;\n                    if (!(!distance || distance < 0)) {\n                      _context44.next = 9;\n                      break;\n                    }\n                    return _context44.abrupt(\"return\");\n                  case 9:\n                    query = container.particles.quadTree.queryCircle(mousePos, distance, function (p) {\n                      return _this50.isEnabled(p);\n                    });\n                    _iterator82 = _createForOfIteratorHelper(query);\n                    _context44.prev = 11;\n                    _iterator82.s();\n                  case 13:\n                    if ((_step82 = _iterator82.n()).done) {\n                      _context44.next = 29;\n                      break;\n                    }\n                    particle = _step82.value;\n                    pos = particle.getPosition(), pointDistance = _getDistance(pos, mousePos);\n                    if (!(pointDistance > distance)) {\n                      _context44.next = 18;\n                      break;\n                    }\n                    return _context44.abrupt(\"continue\", 27);\n                  case 18:\n                    grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n                    if (!(opacityLine <= 0)) {\n                      _context44.next = 21;\n                      break;\n                    }\n                    return _context44.abrupt(\"continue\", 27);\n                  case 21:\n                    optColor = (_a = grabLineOptions.color) !== null && _a !== void 0 ? _a : (_b = particle.options.links) === null || _b === void 0 ? void 0 : _b.color;\n                    if (!container.particles.grabLineColor && optColor) {\n                      linksOptions = interactivity.modes.grab.links;\n                      container.particles.grabLineColor = _getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n                    }\n                    colorLine = _getLinkColor(particle, undefined, container.particles.grabLineColor);\n                    if (colorLine) {\n                      _context44.next = 26;\n                      break;\n                    }\n                    return _context44.abrupt(\"return\");\n                  case 26:\n                    drawGrab(container, particle, colorLine, opacityLine, mousePos);\n                  case 27:\n                    _context44.next = 13;\n                    break;\n                  case 29:\n                    _context44.next = 34;\n                    break;\n                  case 31:\n                    _context44.prev = 31;\n                    _context44.t0 = _context44[\"catch\"](11);\n                    _iterator82.e(_context44.t0);\n                  case 34:\n                    _context44.prev = 34;\n                    _iterator82.f();\n                    return _context44.finish(34);\n                  case 37:\n                  case \"end\":\n                    return _context44.stop();\n                }\n              }, _callee44, this, [[11, 31, 34, 37]]);\n            }));\n            function interact() {\n              return _interact6.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            var container = this.container,\n              mouse = container.interactivity.mouse,\n              events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n            return events.onHover.enable && !!mouse.position && _isInArray(\"grab\", events.onHover.mode);\n          }\n        }, {\n          key: \"loadModeOptions\",\n          value: function loadModeOptions(options) {\n            if (!options.grab) {\n              options.grab = new Grab();\n            }\n            for (var _len14 = arguments.length, sources = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {\n              sources[_key14 - 1] = arguments[_key14];\n            }\n            for (var _i13 = 0, _sources10 = sources; _i13 < _sources10.length; _i13++) {\n              var source = _sources10[_i13];\n              options.grab.load(source === null || source === void 0 ? void 0 : source.grab);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }]);\n        return Grabber;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/grab/dist/esm/index.js\n      function loadExternalGrabInteraction(_x73) {\n        return _loadExternalGrabInteraction.apply(this, arguments);\n      }\n      function _loadExternalGrabInteraction() {\n        _loadExternalGrabInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee73(engine) {\n          return _regeneratorRuntime().wrap(function _callee73$(_context73) {\n            while (1) switch (_context73.prev = _context73.next) {\n              case 0:\n                _context73.next = 2;\n                return engine.addInteractor(\"externalGrab\", function (container) {\n                  return new Grabber(container);\n                });\n              case 2:\n              case \"end\":\n                return _context73.stop();\n            }\n          }, _callee73);\n        }));\n        return _loadExternalGrabInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/pause/dist/esm/Pauser.js\n      var Pauser = /*#__PURE__*/function (_ExternalInteractorBa7) {\n        _inherits(Pauser, _ExternalInteractorBa7);\n        var _super23 = _createSuper(Pauser);\n        function Pauser(container) {\n          var _this51;\n          _classCallCheck(this, Pauser);\n          _this51 = _super23.call(this, container);\n          _this51.handleClickMode = function (mode) {\n            if (mode !== \"pause\") {\n              return;\n            }\n            var container = _this51.container;\n            if (container.getAnimationStatus()) {\n              container.pause();\n            } else {\n              container.play();\n            }\n          };\n          return _this51;\n        }\n        _createClass(Pauser, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {}\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee45() {\n              return _regeneratorRuntime().wrap(function _callee45$(_context45) {\n                while (1) switch (_context45.prev = _context45.next) {\n                  case 0:\n                  case \"end\":\n                    return _context45.stop();\n                }\n              }, _callee45);\n            }));\n            function interact() {\n              return _interact7.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled() {\n            return true;\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }]);\n        return Pauser;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/pause/dist/esm/index.js\n\n      function loadExternalPauseInteraction(engine) {\n        engine.addInteractor(\"externalPause\", function (container) {\n          return new Pauser(container);\n        });\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/push/dist/esm/Options/Classes/Push.js\n      var Push = /*#__PURE__*/function () {\n        function Push() {\n          _classCallCheck(this, Push);\n          this[\"default\"] = true;\n          this.groups = [];\n          this.quantity = 4;\n        }\n        _createClass(Push, [{\n          key: \"particles_nb\",\n          get: function get() {\n            return this.quantity;\n          },\n          set: function set(value) {\n            this.quantity = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a;\n            if (!data) {\n              return;\n            }\n            if (data[\"default\"] !== undefined) {\n              this[\"default\"] = data[\"default\"];\n            }\n            if (data.groups !== undefined) {\n              this.groups = data.groups.map(function (t) {\n                return t;\n              });\n            }\n            if (!this.groups.length) {\n              this[\"default\"] = true;\n            }\n            var quantity = (_a = data.quantity) !== null && _a !== void 0 ? _a : data.particles_nb;\n            if (quantity !== undefined) {\n              this.quantity = quantity;\n            }\n          }\n        }]);\n        return Push;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/push/dist/esm/Pusher.js\n      var Pusher = /*#__PURE__*/function (_ExternalInteractorBa8) {\n        _inherits(Pusher, _ExternalInteractorBa8);\n        var _super24 = _createSuper(Pusher);\n        function Pusher(container) {\n          var _this52;\n          _classCallCheck(this, Pusher);\n          _this52 = _super24.call(this, container);\n          _this52.handleClickMode = function (mode) {\n            if (mode !== \"push\") {\n              return;\n            }\n            var container = _this52.container,\n              options = container.actualOptions,\n              pushOptions = options.interactivity.modes.push;\n            if (!pushOptions) {\n              return;\n            }\n            var pushNb = pushOptions.quantity;\n            if (pushNb <= 0) {\n              return;\n            }\n            var group = _itemFromArray([undefined].concat(_toConsumableArray(pushOptions.groups))),\n              groupOptions = group !== undefined ? container.actualOptions.particles.groups[group] : undefined;\n            container.particles.push(pushNb, container.interactivity.mouse, groupOptions, group);\n          };\n          return _this52;\n        }\n        _createClass(Pusher, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {}\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee46() {\n              return _regeneratorRuntime().wrap(function _callee46$(_context46) {\n                while (1) switch (_context46.prev = _context46.next) {\n                  case 0:\n                  case \"end\":\n                    return _context46.stop();\n                }\n              }, _callee46);\n            }));\n            function interact() {\n              return _interact8.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled() {\n            return true;\n          }\n        }, {\n          key: \"loadModeOptions\",\n          value: function loadModeOptions(options) {\n            if (!options.push) {\n              options.push = new Push();\n            }\n            for (var _len15 = arguments.length, sources = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {\n              sources[_key15 - 1] = arguments[_key15];\n            }\n            for (var _i14 = 0, _sources11 = sources; _i14 < _sources11.length; _i14++) {\n              var source = _sources11[_i14];\n              options.push.load(source === null || source === void 0 ? void 0 : source.push);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }]);\n        return Pusher;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/push/dist/esm/index.js\n      function loadExternalPushInteraction(_x74) {\n        return _loadExternalPushInteraction.apply(this, arguments);\n      }\n      function _loadExternalPushInteraction() {\n        _loadExternalPushInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee74(engine) {\n          return _regeneratorRuntime().wrap(function _callee74$(_context74) {\n            while (1) switch (_context74.prev = _context74.next) {\n              case 0:\n                _context74.next = 2;\n                return engine.addInteractor(\"externalPush\", function (container) {\n                  return new Pusher(container);\n                });\n              case 2:\n              case \"end\":\n                return _context74.stop();\n            }\n          }, _callee74);\n        }));\n        return _loadExternalPushInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/remove/dist/esm/Options/Classes/Remove.js\n      var Remove = /*#__PURE__*/function () {\n        function Remove() {\n          _classCallCheck(this, Remove);\n          this.quantity = 2;\n        }\n        _createClass(Remove, [{\n          key: \"particles_nb\",\n          get: function get() {\n            return this.quantity;\n          },\n          set: function set(value) {\n            this.quantity = value;\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            var _a;\n            if (!data) {\n              return;\n            }\n            var quantity = (_a = data.quantity) !== null && _a !== void 0 ? _a : data.particles_nb;\n            if (quantity !== undefined) {\n              this.quantity = quantity;\n            }\n          }\n        }]);\n        return Remove;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/remove/dist/esm/Remover.js\n      var Remover = /*#__PURE__*/function (_ExternalInteractorBa9) {\n        _inherits(Remover, _ExternalInteractorBa9);\n        var _super25 = _createSuper(Remover);\n        function Remover(container) {\n          var _this53;\n          _classCallCheck(this, Remover);\n          _this53 = _super25.call(this, container);\n          _this53.handleClickMode = function (mode) {\n            var container = _this53.container,\n              options = container.actualOptions;\n            if (!options.interactivity.modes.remove || mode !== \"remove\") {\n              return;\n            }\n            var removeNb = options.interactivity.modes.remove.quantity;\n            container.particles.removeQuantity(removeNb);\n          };\n          return _this53;\n        }\n        _createClass(Remover, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {}\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {\n              return _regeneratorRuntime().wrap(function _callee47$(_context47) {\n                while (1) switch (_context47.prev = _context47.next) {\n                  case 0:\n                  case \"end\":\n                    return _context47.stop();\n                }\n              }, _callee47);\n            }));\n            function interact() {\n              return _interact9.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled() {\n            return true;\n          }\n        }, {\n          key: \"loadModeOptions\",\n          value: function loadModeOptions(options) {\n            if (!options.remove) {\n              options.remove = new Remove();\n            }\n            for (var _len16 = arguments.length, sources = new Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {\n              sources[_key16 - 1] = arguments[_key16];\n            }\n            for (var _i15 = 0, _sources12 = sources; _i15 < _sources12.length; _i15++) {\n              var source = _sources12[_i15];\n              options.remove.load(source === null || source === void 0 ? void 0 : source.remove);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }]);\n        return Remover;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/remove/dist/esm/index.js\n\n      function loadExternalRemoveInteraction(engine) {\n        engine.addInteractor(\"externalRemove\", function (container) {\n          return new Remover(container);\n        });\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/repulse/dist/esm/Options/Classes/RepulseBase.js\n      var RepulseBase = /*#__PURE__*/function () {\n        function RepulseBase() {\n          _classCallCheck(this, RepulseBase);\n          this.distance = 200;\n          this.duration = 0.4;\n          this.factor = 100;\n          this.speed = 1;\n          this.maxSpeed = 50;\n          this.easing = \"ease-out-quad\";\n        }\n        _createClass(RepulseBase, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.distance !== undefined) {\n              this.distance = data.distance;\n            }\n            if (data.duration !== undefined) {\n              this.duration = data.duration;\n            }\n            if (data.easing !== undefined) {\n              this.easing = data.easing;\n            }\n            if (data.factor !== undefined) {\n              this.factor = data.factor;\n            }\n            if (data.speed !== undefined) {\n              this.speed = data.speed;\n            }\n            if (data.maxSpeed !== undefined) {\n              this.maxSpeed = data.maxSpeed;\n            }\n          }\n        }]);\n        return RepulseBase;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/repulse/dist/esm/Options/Classes/RepulseDiv.js\n      var RepulseDiv = /*#__PURE__*/function (_RepulseBase) {\n        _inherits(RepulseDiv, _RepulseBase);\n        var _super26 = _createSuper(RepulseDiv);\n        function RepulseDiv() {\n          var _this54;\n          _classCallCheck(this, RepulseDiv);\n          _this54 = _super26.call(this);\n          _this54.selectors = [];\n          return _this54;\n        }\n        _createClass(RepulseDiv, [{\n          key: \"ids\",\n          get: function get() {\n            return _executeOnSingleOrMultiple(this.selectors, function (t) {\n              return t.replace(\"#\", \"\");\n            });\n          },\n          set: function set(value) {\n            this.selectors = _executeOnSingleOrMultiple(value, function (t) {\n              return \"#\".concat(t);\n            });\n          }\n        }, {\n          key: \"load\",\n          value: function load(data) {\n            _get(_getPrototypeOf(RepulseDiv.prototype), \"load\", this).call(this, data);\n            if (!data) {\n              return;\n            }\n            if (data.ids !== undefined) {\n              this.ids = data.ids;\n            }\n            if (data.selectors !== undefined) {\n              this.selectors = data.selectors;\n            }\n          }\n        }]);\n        return RepulseDiv;\n      }(RepulseBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/repulse/dist/esm/Options/Classes/Repulse.js\n      var Repulse = /*#__PURE__*/function (_RepulseBase2) {\n        _inherits(Repulse, _RepulseBase2);\n        var _super27 = _createSuper(Repulse);\n        function Repulse() {\n          _classCallCheck(this, Repulse);\n          return _super27.apply(this, arguments);\n        }\n        _createClass(Repulse, [{\n          key: \"load\",\n          value: function load(data) {\n            _get(_getPrototypeOf(Repulse.prototype), \"load\", this).call(this, data);\n            if (!data) {\n              return;\n            }\n            this.divs = _executeOnSingleOrMultiple(data.divs, function (div) {\n              var tmp = new RepulseDiv();\n              tmp.load(div);\n              return tmp;\n            });\n          }\n        }]);\n        return Repulse;\n      }(RepulseBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/repulse/dist/esm/Repulser.js\n      var Repulser = /*#__PURE__*/function (_ExternalInteractorBa10) {\n        _inherits(Repulser, _ExternalInteractorBa10);\n        var _super28 = _createSuper(Repulser);\n        function Repulser(engine, container) {\n          var _this55;\n          _classCallCheck(this, Repulser);\n          _this55 = _super28.call(this, container);\n          _this55._engine = engine;\n          if (!container.repulse) {\n            container.repulse = {\n              particles: []\n            };\n          }\n          _this55.handleClickMode = function (mode) {\n            var options = _this55.container.actualOptions,\n              repulse = options.interactivity.modes.repulse;\n            if (!repulse || mode !== \"repulse\") {\n              return;\n            }\n            if (!container.repulse) {\n              container.repulse = {\n                particles: []\n              };\n            }\n            container.repulse.clicking = true;\n            container.repulse.count = 0;\n            var _iterator83 = _createForOfIteratorHelper(container.repulse.particles),\n              _step83;\n            try {\n              for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {\n                var particle = _step83.value;\n                if (!_this55.isEnabled(particle)) {\n                  continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n              }\n            } catch (err) {\n              _iterator83.e(err);\n            } finally {\n              _iterator83.f();\n            }\n            container.repulse.particles = [];\n            container.repulse.finish = false;\n            setTimeout(function () {\n              if (!container.destroyed) {\n                if (!container.repulse) {\n                  container.repulse = {\n                    particles: []\n                  };\n                }\n                container.repulse.clicking = false;\n              }\n            }, repulse.duration * 1000);\n          };\n          return _this55;\n        }\n        _createClass(Repulser, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {\n            var container = this.container,\n              repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n              return;\n            }\n            container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n          }\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee48() {\n              var _this56 = this;\n              var container, options, mouseMoveStatus, events, hoverEnabled, hoverMode, clickEnabled, clickMode, divs;\n              return _regeneratorRuntime().wrap(function _callee48$(_context48) {\n                while (1) switch (_context48.prev = _context48.next) {\n                  case 0:\n                    container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === _mouseMoveEvent, events = options.interactivity.events, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, clickEnabled = events.onClick.enable, clickMode = events.onClick.mode, divs = events.onDiv;\n                    if (mouseMoveStatus && hoverEnabled && _isInArray(\"repulse\", hoverMode)) {\n                      this.hoverRepulse();\n                    } else if (clickEnabled && _isInArray(\"repulse\", clickMode)) {\n                      this.clickRepulse();\n                    } else {\n                      _divModeExecute(\"repulse\", divs, function (selector, div) {\n                        return _this56.singleSelectorRepulse(selector, div);\n                      });\n                    }\n                  case 2:\n                  case \"end\":\n                    return _context48.stop();\n                }\n              }, _callee48, this);\n            }));\n            function interact() {\n              return _interact10.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            var container = this.container,\n              options = container.actualOptions,\n              mouse = container.interactivity.mouse,\n              events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : options.interactivity).events,\n              divs = events.onDiv,\n              divRepulse = _isDivModeEnabled(\"repulse\", divs);\n            if (!(divRepulse || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n              return false;\n            }\n            var hoverMode = events.onHover.mode,\n              clickMode = events.onClick.mode;\n            return _isInArray(\"repulse\", hoverMode) || _isInArray(\"repulse\", clickMode) || divRepulse;\n          }\n        }, {\n          key: \"loadModeOptions\",\n          value: function loadModeOptions(options) {\n            if (!options.repulse) {\n              options.repulse = new Repulse();\n            }\n            for (var _len17 = arguments.length, sources = new Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {\n              sources[_key17 - 1] = arguments[_key17];\n            }\n            for (var _i16 = 0, _sources13 = sources; _i16 < _sources13.length; _i16++) {\n              var source = _sources13[_i16];\n              options.repulse.load(source === null || source === void 0 ? void 0 : source.repulse);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }, {\n          key: \"clickRepulse\",\n          value: function clickRepulse() {\n            var _this57 = this;\n            var container = this.container,\n              repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n              return;\n            }\n            if (!container.repulse) {\n              container.repulse = {\n                particles: []\n              };\n            }\n            if (!container.repulse.finish) {\n              if (!container.repulse.count) {\n                container.repulse.count = 0;\n              }\n              container.repulse.count++;\n              if (container.repulse.count === container.particles.count) {\n                container.repulse.finish = true;\n              }\n            }\n            if (container.repulse.clicking) {\n              var repulseDistance = container.retina.repulseModeDistance;\n              if (!repulseDistance || repulseDistance < 0) {\n                return;\n              }\n              var repulseRadius = Math.pow(repulseDistance / 6, 3),\n                mouseClickPos = container.interactivity.mouse.clickPosition;\n              if (mouseClickPos === undefined) {\n                return;\n              }\n              var range = new _Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius),\n                query = container.particles.quadTree.query(range, function (p) {\n                  return _this57.isEnabled(p);\n                });\n              var _iterator84 = _createForOfIteratorHelper(query),\n                _step84;\n              try {\n                for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {\n                  var particle = _step84.value;\n                  var _getDistances6 = _getDistances(mouseClickPos, particle.position),\n                    dx = _getDistances6.dx,\n                    dy = _getDistances6.dy,\n                    distance = _getDistances6.distance,\n                    d = Math.pow(distance, 2),\n                    velocity = repulse.speed,\n                    force = -repulseRadius * velocity / d;\n                  if (d <= repulseRadius) {\n                    container.repulse.particles.push(particle);\n                    var vect = _Vector.create(dx, dy);\n                    vect.length = force;\n                    particle.velocity.setTo(vect);\n                  }\n                }\n              } catch (err) {\n                _iterator84.e(err);\n              } finally {\n                _iterator84.f();\n              }\n            } else if (container.repulse.clicking === false) {\n              var _iterator85 = _createForOfIteratorHelper(container.repulse.particles),\n                _step85;\n              try {\n                for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {\n                  var _particle3 = _step85.value;\n                  _particle3.velocity.setTo(_particle3.initialVelocity);\n                }\n              } catch (err) {\n                _iterator85.e(err);\n              } finally {\n                _iterator85.f();\n              }\n              container.repulse.particles = [];\n            }\n          }\n        }, {\n          key: \"hoverRepulse\",\n          value: function hoverRepulse() {\n            var container = this.container,\n              mousePos = container.interactivity.mouse.position,\n              repulseRadius = container.retina.repulseModeDistance;\n            if (!repulseRadius || repulseRadius < 0 || !mousePos) {\n              return;\n            }\n            this.processRepulse(mousePos, repulseRadius, new _Circle(mousePos.x, mousePos.y, repulseRadius));\n          }\n        }, {\n          key: \"processRepulse\",\n          value: function processRepulse(position, repulseRadius, area, divRepulse) {\n            var _this58 = this;\n            var _a;\n            var container = this.container,\n              query = container.particles.quadTree.query(area, function (p) {\n                return _this58.isEnabled(p);\n              }),\n              repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n              return;\n            }\n            var _iterator86 = _createForOfIteratorHelper(query),\n              _step86;\n            try {\n              for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {\n                var particle = _step86.value;\n                var _getDistances7 = _getDistances(particle.position, position),\n                  dx = _getDistances7.dx,\n                  dy = _getDistances7.dy,\n                  distance = _getDistances7.distance,\n                  velocity = ((_a = divRepulse === null || divRepulse === void 0 ? void 0 : divRepulse.speed) !== null && _a !== void 0 ? _a : repulseOptions.speed) * repulseOptions.factor,\n                  repulseFactor = _clamp(_getEasing(repulseOptions.easing)(1 - distance / repulseRadius) * velocity, 0, repulseOptions.maxSpeed),\n                  normVec = _Vector.create(distance === 0 ? velocity : dx / distance * repulseFactor, distance === 0 ? velocity : dy / distance * repulseFactor);\n                particle.position.addTo(normVec);\n              }\n            } catch (err) {\n              _iterator86.e(err);\n            } finally {\n              _iterator86.f();\n            }\n          }\n        }, {\n          key: \"singleSelectorRepulse\",\n          value: function singleSelectorRepulse(selector, div) {\n            var _this59 = this;\n            var container = this.container,\n              repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n              return;\n            }\n            var query = document.querySelectorAll(selector);\n            if (!query.length) {\n              return;\n            }\n            query.forEach(function (item) {\n              var elem = item,\n                pxRatio = container.retina.pixelRatio,\n                pos = {\n                  x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                  y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n                },\n                repulseRadius = elem.offsetWidth / 2 * pxRatio,\n                area = div.type === \"circle\" ? new _Circle(pos.x, pos.y, repulseRadius) : new _Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n                divs = repulse.divs,\n                divRepulse = _divMode(divs, elem);\n              _this59.processRepulse(pos, repulseRadius, area, divRepulse);\n            });\n          }\n        }]);\n        return Repulser;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/repulse/dist/esm/index.js\n      function loadExternalRepulseInteraction(_x75) {\n        return _loadExternalRepulseInteraction.apply(this, arguments);\n      }\n      function _loadExternalRepulseInteraction() {\n        _loadExternalRepulseInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee75(engine) {\n          return _regeneratorRuntime().wrap(function _callee75$(_context75) {\n            while (1) switch (_context75.prev = _context75.next) {\n              case 0:\n                _context75.next = 2;\n                return engine.addInteractor(\"externalRepulse\", function (container) {\n                  return new Repulser(engine, container);\n                });\n              case 2:\n              case \"end\":\n                return _context75.stop();\n            }\n          }, _callee75);\n        }));\n        return _loadExternalRepulseInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/external/slow/dist/esm/Options/Classes/Slow.js\n      var Slow = /*#__PURE__*/function () {\n        function Slow() {\n          _classCallCheck(this, Slow);\n          this.factor = 3;\n          this.radius = 200;\n        }\n        _createClass(Slow, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.factor !== undefined) {\n              this.factor = data.factor;\n            }\n            if (data.radius !== undefined) {\n              this.radius = data.radius;\n            }\n          }\n        }]);\n        return Slow;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/external/slow/dist/esm/Slower.js\n      var Slower = /*#__PURE__*/function (_ExternalInteractorBa11) {\n        _inherits(Slower, _ExternalInteractorBa11);\n        var _super29 = _createSuper(Slower);\n        function Slower(container) {\n          _classCallCheck(this, Slower);\n          return _super29.call(this, container);\n        }\n        _createClass(Slower, [{\n          key: \"clear\",\n          value: function clear(particle, delta, force) {\n            if (particle.slow.inRange && !force) {\n              return;\n            }\n            particle.slow.factor = 1;\n          }\n        }, {\n          key: \"init\",\n          value: function init() {\n            var container = this.container,\n              slow = container.actualOptions.interactivity.modes.slow;\n            if (!slow) {\n              return;\n            }\n            container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;\n          }\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {\n              return _regeneratorRuntime().wrap(function _callee49$(_context49) {\n                while (1) switch (_context49.prev = _context49.next) {\n                  case 0:\n                  case \"end\":\n                    return _context49.stop();\n                }\n              }, _callee49);\n            }));\n            function interact() {\n              return _interact11.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            var container = this.container,\n              mouse = container.interactivity.mouse,\n              events = ((_a = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _a !== void 0 ? _a : container.actualOptions.interactivity).events;\n            return events.onHover.enable && !!mouse.position && _isInArray(\"slow\", events.onHover.mode);\n          }\n        }, {\n          key: \"loadModeOptions\",\n          value: function loadModeOptions(options) {\n            if (!options.slow) {\n              options.slow = new Slow();\n            }\n            for (var _len18 = arguments.length, sources = new Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {\n              sources[_key18 - 1] = arguments[_key18];\n            }\n            for (var _i17 = 0, _sources14 = sources; _i17 < _sources14.length; _i17++) {\n              var source = _sources14[_i17];\n              options.slow.load(source === null || source === void 0 ? void 0 : source.slow);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset(particle) {\n            particle.slow.inRange = false;\n            var container = this.container,\n              options = container.actualOptions,\n              mousePos = container.interactivity.mouse.position,\n              radius = container.retina.slowModeRadius,\n              slow = options.interactivity.modes.slow;\n            if (!slow || !radius || radius < 0 || !mousePos) {\n              return;\n            }\n            var particlePos = particle.getPosition(),\n              dist = _getDistance(mousePos, particlePos),\n              proximityFactor = dist / radius,\n              slowFactor = slow.factor;\n            if (dist <= radius) {\n              particle.slow.inRange = true;\n              particle.slow.factor = proximityFactor / slowFactor;\n            }\n          }\n        }]);\n        return Slower;\n      }(_ExternalInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/external/slow/dist/esm/index.js\n      function loadExternalSlowInteraction(_x76) {\n        return _loadExternalSlowInteraction.apply(this, arguments);\n      }\n      function _loadExternalSlowInteraction() {\n        _loadExternalSlowInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee76(engine) {\n          return _regeneratorRuntime().wrap(function _callee76$(_context76) {\n            while (1) switch (_context76.prev = _context76.next) {\n              case 0:\n                _context76.next = 2;\n                return engine.addInteractor(\"externalSlow\", function (container) {\n                  return new Slower(container);\n                });\n              case 2:\n              case \"end\":\n                return _context76.stop();\n            }\n          }, _callee76);\n        }));\n        return _loadExternalSlowInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../shapes/image/dist/esm/Utils.js\n\n      var currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\n      function replaceColorSvg(imageShape, color, opacity) {\n        var svgData = imageShape.svgData;\n        if (!svgData) {\n          return \"\";\n        }\n        var colorStyle = _getStyleFromHsl(color, opacity);\n        if (svgData.includes(\"fill\")) {\n          return svgData.replace(currentColorRegex, function () {\n            return colorStyle;\n          });\n        }\n        var preFillIndex = svgData.indexOf(\">\");\n        return \"\".concat(svgData.substring(0, preFillIndex), \" fill=\\\"\").concat(colorStyle, \"\\\"\").concat(svgData.substring(preFillIndex));\n      }\n      function loadImage(_x77) {\n        return _loadImage.apply(this, arguments);\n      }\n      function _loadImage() {\n        _loadImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee77(image) {\n          return _regeneratorRuntime().wrap(function _callee77$(_context77) {\n            while (1) switch (_context77.prev = _context77.next) {\n              case 0:\n                return _context77.abrupt(\"return\", new Promise(function (resolve) {\n                  image.loading = true;\n                  var img = new Image();\n                  image.element = img;\n                  img.addEventListener(\"load\", function () {\n                    image.loading = false;\n                    resolve();\n                  });\n                  img.addEventListener(\"error\", function () {\n                    image.element = undefined;\n                    image.error = true;\n                    image.loading = false;\n                    console.error(\"Error tsParticles - loading image: \".concat(image.source));\n                    resolve();\n                  });\n                  img.src = image.source;\n                }));\n              case 1:\n              case \"end\":\n                return _context77.stop();\n            }\n          }, _callee77);\n        }));\n        return _loadImage.apply(this, arguments);\n      }\n      function downloadSvgImage(_x78) {\n        return _downloadSvgImage.apply(this, arguments);\n      }\n      function _downloadSvgImage() {\n        _downloadSvgImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee78(image) {\n          var response;\n          return _regeneratorRuntime().wrap(function _callee78$(_context78) {\n            while (1) switch (_context78.prev = _context78.next) {\n              case 0:\n                if (!(image.type !== \"svg\")) {\n                  _context78.next = 4;\n                  break;\n                }\n                _context78.next = 3;\n                return loadImage(image);\n              case 3:\n                return _context78.abrupt(\"return\");\n              case 4:\n                image.loading = true;\n                _context78.next = 7;\n                return fetch(image.source);\n              case 7:\n                response = _context78.sent;\n                if (!response.ok) {\n                  console.error(\"Error tsParticles - Image not found\");\n                  image.error = true;\n                }\n                if (image.error) {\n                  _context78.next = 13;\n                  break;\n                }\n                _context78.next = 12;\n                return response.text();\n              case 12:\n                image.svgData = _context78.sent;\n              case 13:\n                image.loading = false;\n              case 14:\n              case \"end\":\n                return _context78.stop();\n            }\n          }, _callee78);\n        }));\n        return _downloadSvgImage.apply(this, arguments);\n      }\n      function replaceImageColor(image, imageData, color, particle) {\n        var _a, _b, _c;\n        var svgColoredData = replaceColorSvg(image, color, (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1),\n          imageRes = {\n            color: color,\n            data: Object.assign(Object.assign({}, image), {\n              svgData: svgColoredData\n            }),\n            loaded: false,\n            ratio: imageData.width / imageData.height,\n            replaceColor: (_c = imageData.replaceColor) !== null && _c !== void 0 ? _c : imageData.replace_color,\n            source: imageData.src\n          };\n        return new Promise(function (resolve) {\n          var svg = new Blob([svgColoredData], {\n              type: \"image/svg+xml\"\n            }),\n            domUrl = URL || window.URL || window.webkitURL || window,\n            url = domUrl.createObjectURL(svg),\n            img = new Image();\n          img.addEventListener(\"load\", function () {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n          });\n          img.addEventListener(\"error\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee50() {\n            var img2;\n            return _regeneratorRuntime().wrap(function _callee50$(_context50) {\n              while (1) switch (_context50.prev = _context50.next) {\n                case 0:\n                  domUrl.revokeObjectURL(url);\n                  img2 = Object.assign(Object.assign({}, image), {\n                    error: false,\n                    loading: true\n                  });\n                  _context50.next = 4;\n                  return loadImage(img2);\n                case 4:\n                  imageRes.loaded = true;\n                  imageRes.element = img2.element;\n                  resolve(imageRes);\n                case 7:\n                case \"end\":\n                  return _context50.stop();\n              }\n            }, _callee50);\n          })));\n          img.src = url;\n        });\n      }\n      ; // CONCATENATED MODULE: ../../shapes/image/dist/esm/ImageDrawer.js\n      var ImageDrawer = /*#__PURE__*/function () {\n        function ImageDrawer() {\n          _classCallCheck(this, ImageDrawer);\n          this._images = [];\n        }\n        _createClass(ImageDrawer, [{\n          key: \"addImage\",\n          value: function addImage(container, image) {\n            var containerImages = this.getImages(container);\n            containerImages === null || containerImages === void 0 ? void 0 : containerImages.images.push(image);\n          }\n        }, {\n          key: \"destroy\",\n          value: function destroy() {\n            this._images = [];\n          }\n        }, {\n          key: \"draw\",\n          value: function draw(context, particle, radius, opacity) {\n            var _a;\n            var image = particle.image,\n              element = image === null || image === void 0 ? void 0 : image.element;\n            if (!element) {\n              return;\n            }\n            var ratio = (_a = image === null || image === void 0 ? void 0 : image.ratio) !== null && _a !== void 0 ? _a : 1,\n              pos = {\n                x: -radius,\n                y: -radius\n              };\n            context.globalAlpha = opacity;\n            context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n            context.globalAlpha = 1;\n          }\n        }, {\n          key: \"getImages\",\n          value: function getImages(container) {\n            var containerImages = this._images.find(function (t) {\n              return t.id === container.id;\n            });\n            if (!containerImages) {\n              this._images.push({\n                id: container.id,\n                images: []\n              });\n              return this.getImages(container);\n            } else {\n              return containerImages;\n            }\n          }\n        }, {\n          key: \"getSidesCount\",\n          value: function getSidesCount() {\n            return 12;\n          }\n        }, {\n          key: \"loadShape\",\n          value: function loadShape(particle) {\n            var _this60 = this;\n            if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n              return;\n            }\n            var container = particle.container,\n              images = this.getImages(container).images,\n              imageData = particle.shapeData,\n              image = images.find(function (t) {\n                return t.source === imageData.src;\n              });\n            if (!image) {\n              this.loadImageShape(container, imageData).then(function () {\n                _this60.loadShape(particle);\n              });\n            }\n          }\n        }, {\n          key: \"particleInit\",\n          value: function particleInit(container, particle) {\n            var _this61 = this;\n            var _a;\n            if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n              return;\n            }\n            var images = this.getImages(container).images,\n              imageData = particle.shapeData,\n              color = particle.getFillColor(),\n              replaceColor = (_a = imageData.replaceColor) !== null && _a !== void 0 ? _a : imageData.replace_color,\n              image = images.find(function (t) {\n                return t.source === imageData.src;\n              });\n            if (!image) {\n              return;\n            }\n            if (image.loading) {\n              setTimeout(function () {\n                _this61.particleInit(container, particle);\n              });\n              return;\n            }\n            _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {\n              var _a, _b, imageRes, fill, close, imageShape;\n              return _regeneratorRuntime().wrap(function _callee51$(_context51) {\n                while (1) switch (_context51.prev = _context51.next) {\n                  case 0:\n                    if (!(image.svgData && color)) {\n                      _context51.next = 6;\n                      break;\n                    }\n                    _context51.next = 3;\n                    return replaceImageColor(image, imageData, color, particle);\n                  case 3:\n                    imageRes = _context51.sent;\n                    _context51.next = 7;\n                    break;\n                  case 6:\n                    imageRes = {\n                      color: color,\n                      data: image,\n                      element: image.element,\n                      loaded: true,\n                      ratio: imageData.width / imageData.height,\n                      replaceColor: replaceColor,\n                      source: imageData.src\n                    };\n                  case 7:\n                    if (!imageRes.ratio) {\n                      imageRes.ratio = 1;\n                    }\n                    fill = (_a = imageData.fill) !== null && _a !== void 0 ? _a : particle.fill, close = (_b = imageData.close) !== null && _b !== void 0 ? _b : particle.close, imageShape = {\n                      image: imageRes,\n                      fill: fill,\n                      close: close\n                    };\n                    particle.image = imageShape.image;\n                    particle.fill = imageShape.fill;\n                    particle.close = imageShape.close;\n                  case 12:\n                  case \"end\":\n                    return _context51.stop();\n                }\n              }, _callee51);\n            }))();\n          }\n        }, {\n          key: \"loadImageShape\",\n          value: function () {\n            var _loadImageShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee52(container, imageShape) {\n              var _a, source, image, imageFunc;\n              return _regeneratorRuntime().wrap(function _callee52$(_context52) {\n                while (1) switch (_context52.prev = _context52.next) {\n                  case 0:\n                    source = imageShape.src;\n                    if (source) {\n                      _context52.next = 3;\n                      break;\n                    }\n                    throw new Error(\"Error tsParticles - No image.src\");\n                  case 3:\n                    _context52.prev = 3;\n                    image = {\n                      source: source,\n                      type: source.substring(source.length - 3),\n                      error: false,\n                      loading: true\n                    };\n                    this.addImage(container, image);\n                    imageFunc = ((_a = imageShape.replaceColor) !== null && _a !== void 0 ? _a : imageShape.replace_color) ? downloadSvgImage : loadImage;\n                    _context52.next = 9;\n                    return imageFunc(image);\n                  case 9:\n                    _context52.next = 14;\n                    break;\n                  case 11:\n                    _context52.prev = 11;\n                    _context52.t0 = _context52[\"catch\"](3);\n                    throw new Error(\"tsParticles error - \".concat(imageShape.src, \" not found\"));\n                  case 14:\n                  case \"end\":\n                    return _context52.stop();\n                }\n              }, _callee52, this, [[3, 11]]);\n            }));\n            function loadImageShape(_x79, _x80) {\n              return _loadImageShape.apply(this, arguments);\n            }\n            return loadImageShape;\n          }()\n        }]);\n        return ImageDrawer;\n      }();\n      ; // CONCATENATED MODULE: ../../shapes/image/dist/esm/index.js\n      function loadImageShape(_x81) {\n        return _loadImageShape2.apply(this, arguments);\n      }\n      function _loadImageShape2() {\n        _loadImageShape2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee79(engine) {\n          return _regeneratorRuntime().wrap(function _callee79$(_context79) {\n            while (1) switch (_context79.prev = _context79.next) {\n              case 0:\n                _context79.next = 2;\n                return engine.addShape([\"image\", \"images\"], new ImageDrawer());\n              case 2:\n              case \"end\":\n                return _context79.stop();\n            }\n          }, _callee79);\n        }));\n        return _loadImageShape2.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/life/dist/esm/Options/Classes/LifeDelay.js\n      var LifeDelay = /*#__PURE__*/function (_ValueWithRandom10) {\n        _inherits(LifeDelay, _ValueWithRandom10);\n        var _super30 = _createSuper(LifeDelay);\n        function LifeDelay() {\n          var _this62;\n          _classCallCheck(this, LifeDelay);\n          _this62 = _super30.call(this);\n          _this62.sync = false;\n          return _this62;\n        }\n        _createClass(LifeDelay, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            _get(_getPrototypeOf(LifeDelay.prototype), \"load\", this).call(this, data);\n            if (data.sync !== undefined) {\n              this.sync = data.sync;\n            }\n          }\n        }]);\n        return LifeDelay;\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../updaters/life/dist/esm/Options/Classes/LifeDuration.js\n      var LifeDuration = /*#__PURE__*/function (_ValueWithRandom11) {\n        _inherits(LifeDuration, _ValueWithRandom11);\n        var _super31 = _createSuper(LifeDuration);\n        function LifeDuration() {\n          var _this63;\n          _classCallCheck(this, LifeDuration);\n          _this63 = _super31.call(this);\n          _this63.random.minimumValue = 0.0001;\n          _this63.sync = false;\n          return _this63;\n        }\n        _createClass(LifeDuration, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            _get(_getPrototypeOf(LifeDuration.prototype), \"load\", this).call(this, data);\n            if (data.sync !== undefined) {\n              this.sync = data.sync;\n            }\n          }\n        }]);\n        return LifeDuration;\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../updaters/life/dist/esm/Options/Classes/Life.js\n      var Life = /*#__PURE__*/function () {\n        function Life() {\n          _classCallCheck(this, Life);\n          this.count = 0;\n          this.delay = new LifeDelay();\n          this.duration = new LifeDuration();\n        }\n        _createClass(Life, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.count !== undefined) {\n              this.count = data.count;\n            }\n            this.delay.load(data.delay);\n            this.duration.load(data.duration);\n          }\n        }]);\n        return Life;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/life/dist/esm/LifeUpdater.js\n      var LifeUpdater = /*#__PURE__*/function () {\n        function LifeUpdater(container) {\n          _classCallCheck(this, LifeUpdater);\n          this.container = container;\n        }\n        _createClass(LifeUpdater, [{\n          key: \"init\",\n          value: function init(particle) {\n            var container = this.container,\n              particlesOptions = particle.options,\n              lifeOptions = particlesOptions.life;\n            if (!lifeOptions) {\n              return;\n            }\n            particle.life = {\n              delay: container.retina.reduceFactor ? _getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? 1 : _getRandom()) / container.retina.reduceFactor * 1000 : 0,\n              delayTime: 0,\n              duration: container.retina.reduceFactor ? _getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? 1 : _getRandom()) / container.retina.reduceFactor * 1000 : 0,\n              time: 0,\n              count: lifeOptions.count\n            };\n            if (particle.life.duration <= 0) {\n              particle.life.duration = -1;\n            }\n            if (particle.life.count <= 0) {\n              particle.life.count = -1;\n            }\n            if (particle.life) {\n              particle.spawning = particle.life.delay > 0;\n            }\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            return !particle.destroyed;\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions(options) {\n            if (!options.life) {\n              options.life = new Life();\n            }\n            for (var _len19 = arguments.length, sources = new Array(_len19 > 1 ? _len19 - 1 : 0), _key19 = 1; _key19 < _len19; _key19++) {\n              sources[_key19 - 1] = arguments[_key19];\n            }\n            for (var _i18 = 0, _sources15 = sources; _i18 < _sources15.length; _i18++) {\n              var source = _sources15[_i18];\n              options.life.load(source === null || source === void 0 ? void 0 : source.life);\n            }\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle, delta) {\n            if (!this.isEnabled(particle) || !particle.life) {\n              return;\n            }\n            var life = particle.life;\n            var justSpawned = false;\n            if (particle.spawning) {\n              life.delayTime += delta.value;\n              if (life.delayTime >= particle.life.delay) {\n                justSpawned = true;\n                particle.spawning = false;\n                life.delayTime = 0;\n                life.time = 0;\n              } else {\n                return;\n              }\n            }\n            if (life.duration === -1) {\n              return;\n            }\n            if (particle.spawning) {\n              return;\n            }\n            if (justSpawned) {\n              life.time = 0;\n            } else {\n              life.time += delta.value;\n            }\n            if (life.time < life.duration) {\n              return;\n            }\n            life.time = 0;\n            if (particle.life.count > 0) {\n              particle.life.count--;\n            }\n            if (particle.life.count === 0) {\n              particle.destroy();\n              return;\n            }\n            var canvasSize = this.container.canvas.size,\n              widthRange = _setRangeValue(0, canvasSize.width),\n              heightRange = _setRangeValue(0, canvasSize.width);\n            particle.position.x = _randomInRange(widthRange);\n            particle.position.y = _randomInRange(heightRange);\n            particle.spawning = true;\n            life.delayTime = 0;\n            life.time = 0;\n            particle.reset();\n            var lifeOptions = particle.options.life;\n            if (lifeOptions) {\n              life.delay = _getRangeValue(lifeOptions.delay.value) * 1000;\n              life.duration = _getRangeValue(lifeOptions.duration.value) * 1000;\n            }\n          }\n        }]);\n        return LifeUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/life/dist/esm/index.js\n      function loadLifeUpdater(_x82) {\n        return _loadLifeUpdater.apply(this, arguments);\n      }\n      function _loadLifeUpdater() {\n        _loadLifeUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee80(engine) {\n          return _regeneratorRuntime().wrap(function _callee80$(_context80) {\n            while (1) switch (_context80.prev = _context80.next) {\n              case 0:\n                _context80.next = 2;\n                return engine.addParticleUpdater(\"life\", function (container) {\n                  return new LifeUpdater(container);\n                });\n              case 2:\n              case \"end\":\n                return _context80.stop();\n            }\n          }, _callee80);\n        }));\n        return _loadLifeUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../shapes/line/dist/esm/LineDrawer.js\n      var LineDrawer = /*#__PURE__*/function () {\n        function LineDrawer() {\n          _classCallCheck(this, LineDrawer);\n        }\n        _createClass(LineDrawer, [{\n          key: \"draw\",\n          value: function draw(context, particle, radius) {\n            context.moveTo(-radius / 2, 0);\n            context.lineTo(radius / 2, 0);\n          }\n        }, {\n          key: \"getSidesCount\",\n          value: function getSidesCount() {\n            return 1;\n          }\n        }]);\n        return LineDrawer;\n      }();\n      ; // CONCATENATED MODULE: ../../shapes/line/dist/esm/index.js\n      function loadLineShape(_x83) {\n        return _loadLineShape.apply(this, arguments);\n      }\n      function _loadLineShape() {\n        _loadLineShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee81(engine) {\n          return _regeneratorRuntime().wrap(function _callee81$(_context81) {\n            while (1) switch (_context81.prev = _context81.next) {\n              case 0:\n                _context81.next = 2;\n                return engine.addShape(\"line\", new LineDrawer());\n              case 2:\n              case \"end\":\n                return _context81.stop();\n            }\n          }, _callee81);\n        }));\n        return _loadLineShape.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/opacity/dist/esm/OpacityUpdater.js\n\n      function checkDestroy(particle, value, minValue, maxValue) {\n        switch (particle.options.opacity.animation.destroy) {\n          case \"max\":\n            if (value >= maxValue) {\n              particle.destroy();\n            }\n            break;\n          case \"min\":\n            if (value <= minValue) {\n              particle.destroy();\n            }\n            break;\n        }\n      }\n      function updateOpacity(particle, delta) {\n        var _a, _b, _c, _d, _e, _f;\n        if (!particle.opacity) {\n          return;\n        }\n        var minValue = particle.opacity.min,\n          maxValue = particle.opacity.max,\n          decay = (_a = particle.opacity.decay) !== null && _a !== void 0 ? _a : 1;\n        if (particle.destroyed || !particle.opacity.enable || ((_b = particle.opacity.maxLoops) !== null && _b !== void 0 ? _b : 0) > 0 && ((_c = particle.opacity.loops) !== null && _c !== void 0 ? _c : 0) > ((_d = particle.opacity.maxLoops) !== null && _d !== void 0 ? _d : 0)) {\n          return;\n        }\n        switch (particle.opacity.status) {\n          case \"increasing\":\n            if (particle.opacity.value >= maxValue) {\n              particle.opacity.status = \"decreasing\";\n              if (!particle.opacity.loops) {\n                particle.opacity.loops = 0;\n              }\n              particle.opacity.loops++;\n            } else {\n              particle.opacity.value += ((_e = particle.opacity.velocity) !== null && _e !== void 0 ? _e : 0) * delta.factor;\n            }\n            break;\n          case \"decreasing\":\n            if (particle.opacity.value <= minValue) {\n              particle.opacity.status = \"increasing\";\n              if (!particle.opacity.loops) {\n                particle.opacity.loops = 0;\n              }\n              particle.opacity.loops++;\n            } else {\n              particle.opacity.value -= ((_f = particle.opacity.velocity) !== null && _f !== void 0 ? _f : 0) * delta.factor;\n            }\n            break;\n        }\n        if (particle.opacity.velocity && particle.opacity.decay !== 1) {\n          particle.opacity.velocity *= decay;\n        }\n        checkDestroy(particle, particle.opacity.value, minValue, maxValue);\n        if (!particle.destroyed) {\n          particle.opacity.value = _clamp(particle.opacity.value, minValue, maxValue);\n        }\n      }\n      var OpacityUpdater = /*#__PURE__*/function () {\n        function OpacityUpdater(container) {\n          _classCallCheck(this, OpacityUpdater);\n          this.container = container;\n        }\n        _createClass(OpacityUpdater, [{\n          key: \"init\",\n          value: function init(particle) {\n            var opacityOptions = particle.options.opacity;\n            particle.opacity = {\n              enable: opacityOptions.animation.enable,\n              max: _getRangeMax(opacityOptions.value),\n              min: _getRangeMin(opacityOptions.value),\n              value: _getRangeValue(opacityOptions.value),\n              loops: 0,\n              maxLoops: _getRangeValue(opacityOptions.animation.count)\n            };\n            var opacityAnimation = opacityOptions.animation;\n            if (opacityAnimation.enable) {\n              particle.opacity.decay = 1 - _getRangeValue(opacityAnimation.decay);\n              particle.opacity.status = \"increasing\";\n              var opacityRange = opacityOptions.value;\n              particle.opacity.min = _getRangeMin(opacityRange);\n              particle.opacity.max = _getRangeMax(opacityRange);\n              switch (opacityAnimation.startValue) {\n                case \"min\":\n                  particle.opacity.value = particle.opacity.min;\n                  particle.opacity.status = \"increasing\";\n                  break;\n                case \"random\":\n                  particle.opacity.value = _randomInRange(particle.opacity);\n                  particle.opacity.status = _getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n                  break;\n                case \"max\":\n                default:\n                  particle.opacity.value = particle.opacity.max;\n                  particle.opacity.status = \"decreasing\";\n                  break;\n              }\n              particle.opacity.velocity = _getRangeValue(opacityAnimation.speed) / 100 * this.container.retina.reduceFactor;\n              if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= _getRandom();\n              }\n            }\n            particle.opacity.initialValue = particle.opacity.value;\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a, _b, _c, _d;\n            return !particle.destroyed && !particle.spawning && !!particle.opacity && particle.opacity.enable && (((_a = particle.opacity.maxLoops) !== null && _a !== void 0 ? _a : 0) <= 0 || ((_b = particle.opacity.maxLoops) !== null && _b !== void 0 ? _b : 0) > 0 && ((_c = particle.opacity.loops) !== null && _c !== void 0 ? _c : 0) < ((_d = particle.opacity.maxLoops) !== null && _d !== void 0 ? _d : 0));\n          }\n        }, {\n          key: \"reset\",\n          value: function reset(particle) {\n            if (particle.opacity) {\n              particle.opacity.loops = 0;\n            }\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle, delta) {\n            if (!this.isEnabled(particle)) {\n              return;\n            }\n            updateOpacity(particle, delta);\n          }\n        }]);\n        return OpacityUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/opacity/dist/esm/index.js\n      function loadOpacityUpdater(_x84) {\n        return _loadOpacityUpdater.apply(this, arguments);\n      }\n      function _loadOpacityUpdater() {\n        _loadOpacityUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee82(engine) {\n          return _regeneratorRuntime().wrap(function _callee82$(_context82) {\n            while (1) switch (_context82.prev = _context82.next) {\n              case 0:\n                _context82.next = 2;\n                return engine.addParticleUpdater(\"opacity\", function (container) {\n                  return new OpacityUpdater(container);\n                });\n              case 2:\n              case \"end\":\n                return _context82.stop();\n            }\n          }, _callee82);\n        }));\n        return _loadOpacityUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/outModes/dist/esm/Utils.js\n\n      function bounceHorizontal(data) {\n        if (data.outMode !== \"bounce\" && data.outMode !== \"bounce-horizontal\" && data.outMode !== \"bounceHorizontal\" && data.outMode !== \"split\") {\n          return;\n        }\n        if (data.bounds.right < 0) {\n          data.particle.position.x = data.size + data.offset.x;\n        } else if (data.bounds.left > data.canvasSize.width) {\n          data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\n        }\n        var velocity = data.particle.velocity.x;\n        var bounced = false;\n        if (data.direction === \"right\" && data.bounds.right >= data.canvasSize.width && velocity > 0 || data.direction === \"left\" && data.bounds.left <= 0 && velocity < 0) {\n          var newVelocity = _getValue(data.particle.options.bounce.horizontal);\n          data.particle.velocity.x *= -newVelocity;\n          bounced = true;\n        }\n        if (!bounced) {\n          return;\n        }\n        var minPos = data.offset.x + data.size;\n        if (data.bounds.right >= data.canvasSize.width) {\n          data.particle.position.x = data.canvasSize.width - minPos;\n        } else if (data.bounds.left <= 0) {\n          data.particle.position.x = minPos;\n        }\n        if (data.outMode === \"split\") {\n          data.particle.destroy();\n        }\n      }\n      function bounceVertical(data) {\n        if (data.outMode !== \"bounce\" && data.outMode !== \"bounce-vertical\" && data.outMode !== \"bounceVertical\" && data.outMode !== \"split\") {\n          return;\n        }\n        if (data.bounds.bottom < 0) {\n          data.particle.position.y = data.size + data.offset.y;\n        } else if (data.bounds.top > data.canvasSize.height) {\n          data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\n        }\n        var velocity = data.particle.velocity.y;\n        var bounced = false;\n        if (data.direction === \"bottom\" && data.bounds.bottom >= data.canvasSize.height && velocity > 0 || data.direction === \"top\" && data.bounds.top <= 0 && velocity < 0) {\n          var newVelocity = _getValue(data.particle.options.bounce.vertical);\n          data.particle.velocity.y *= -newVelocity;\n          bounced = true;\n        }\n        if (!bounced) {\n          return;\n        }\n        var minPos = data.offset.y + data.size;\n        if (data.bounds.bottom >= data.canvasSize.height) {\n          data.particle.position.y = data.canvasSize.height - minPos;\n        } else if (data.bounds.top <= 0) {\n          data.particle.position.y = minPos;\n        }\n        if (data.outMode === \"split\") {\n          data.particle.destroy();\n        }\n      }\n      ; // CONCATENATED MODULE: ../../updaters/outModes/dist/esm/BounceOutMode.js\n      var BounceOutMode = /*#__PURE__*/function () {\n        function BounceOutMode(container) {\n          _classCallCheck(this, BounceOutMode);\n          this.container = container;\n          this.modes = [\"bounce\", \"bounce-vertical\", \"bounce-horizontal\", \"bounceVertical\", \"bounceHorizontal\", \"split\"];\n        }\n        _createClass(BounceOutMode, [{\n          key: \"update\",\n          value: function update(particle, direction, delta, outMode) {\n            if (!this.modes.includes(outMode)) {\n              return;\n            }\n            var container = this.container;\n            var handled = false;\n            var _iterator87 = _createForOfIteratorHelper(container.plugins),\n              _step87;\n            try {\n              for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {\n                var _step87$value = _slicedToArray(_step87.value, 2),\n                  plugin = _step87$value[1];\n                if (plugin.particleBounce !== undefined) {\n                  handled = plugin.particleBounce(particle, delta, direction);\n                }\n                if (handled) {\n                  break;\n                }\n              }\n            } catch (err) {\n              _iterator87.e(err);\n            } finally {\n              _iterator87.f();\n            }\n            if (handled) {\n              return;\n            }\n            var pos = particle.getPosition(),\n              offset = particle.offset,\n              size = particle.getRadius(),\n              bounds = _calculateBounds(pos, size),\n              canvasSize = container.canvas.size;\n            bounceHorizontal({\n              particle: particle,\n              outMode: outMode,\n              direction: direction,\n              bounds: bounds,\n              canvasSize: canvasSize,\n              offset: offset,\n              size: size\n            });\n            bounceVertical({\n              particle: particle,\n              outMode: outMode,\n              direction: direction,\n              bounds: bounds,\n              canvasSize: canvasSize,\n              offset: offset,\n              size: size\n            });\n          }\n        }]);\n        return BounceOutMode;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/outModes/dist/esm/DestroyOutMode.js\n      var DestroyOutMode = /*#__PURE__*/function () {\n        function DestroyOutMode(container) {\n          _classCallCheck(this, DestroyOutMode);\n          this.container = container;\n          this.modes = [\"destroy\"];\n        }\n        _createClass(DestroyOutMode, [{\n          key: \"update\",\n          value: function update(particle, direction, delta, outMode) {\n            if (!this.modes.includes(outMode)) {\n              return;\n            }\n            var container = this.container;\n            switch (particle.outType) {\n              case \"normal\":\n              case \"outside\":\n                if (_isPointInside(particle.position, container.canvas.size, _Vector.origin, particle.getRadius(), direction)) {\n                  return;\n                }\n                break;\n              case \"inside\":\n                {\n                  var _getDistances8 = _getDistances(particle.position, particle.moveCenter),\n                    dx = _getDistances8.dx,\n                    dy = _getDistances8.dy;\n                  var _particle$velocity = particle.velocity,\n                    vx = _particle$velocity.x,\n                    vy = _particle$velocity.y;\n                  if (vx < 0 && dx > particle.moveCenter.radius || vy < 0 && dy > particle.moveCenter.radius || vx >= 0 && dx < -particle.moveCenter.radius || vy >= 0 && dy < -particle.moveCenter.radius) {\n                    return;\n                  }\n                  break;\n                }\n            }\n            container.particles.remove(particle, undefined, true);\n          }\n        }]);\n        return DestroyOutMode;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/outModes/dist/esm/NoneOutMode.js\n      var NoneOutMode = /*#__PURE__*/function () {\n        function NoneOutMode(container) {\n          _classCallCheck(this, NoneOutMode);\n          this.container = container;\n          this.modes = [\"none\"];\n        }\n        _createClass(NoneOutMode, [{\n          key: \"update\",\n          value: function update(particle, direction, delta, outMode) {\n            if (!this.modes.includes(outMode)) {\n              return;\n            }\n            if (particle.options.move.distance.horizontal && (direction === \"left\" || direction === \"right\") || particle.options.move.distance.vertical && (direction === \"top\" || direction === \"bottom\")) {\n              return;\n            }\n            var gravityOptions = particle.options.move.gravity,\n              container = this.container;\n            var canvasSize = container.canvas.size;\n            var pRadius = particle.getRadius();\n            if (!gravityOptions.enable) {\n              if (particle.velocity.y > 0 && particle.position.y <= canvasSize.height + pRadius || particle.velocity.y < 0 && particle.position.y >= -pRadius || particle.velocity.x > 0 && particle.position.x <= canvasSize.width + pRadius || particle.velocity.x < 0 && particle.position.x >= -pRadius) {\n                return;\n              }\n              if (!_isPointInside(particle.position, container.canvas.size, _Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n              }\n            } else {\n              var position = particle.position;\n              if (!gravityOptions.inverse && position.y > canvasSize.height + pRadius && direction === \"bottom\" || gravityOptions.inverse && position.y < -pRadius && direction === \"top\") {\n                container.particles.remove(particle);\n              }\n            }\n          }\n        }]);\n        return NoneOutMode;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/outModes/dist/esm/OutOutMode.js\n      var OutOutMode = /*#__PURE__*/function () {\n        function OutOutMode(container) {\n          _classCallCheck(this, OutOutMode);\n          this.container = container;\n          this.modes = [\"out\"];\n        }\n        _createClass(OutOutMode, [{\n          key: \"update\",\n          value: function update(particle, direction, delta, outMode) {\n            if (!this.modes.includes(outMode)) {\n              return;\n            }\n            var container = this.container;\n            switch (particle.outType) {\n              case \"inside\":\n                {\n                  var _particle$velocity2 = particle.velocity,\n                    vx = _particle$velocity2.x,\n                    vy = _particle$velocity2.y;\n                  var circVec = _Vector.origin;\n                  circVec.length = particle.moveCenter.radius;\n                  circVec.angle = particle.velocity.angle + Math.PI;\n                  circVec.addTo(_Vector.create(particle.moveCenter));\n                  var _getDistances9 = _getDistances(particle.position, circVec),\n                    dx = _getDistances9.dx,\n                    dy = _getDistances9.dy;\n                  if (vx <= 0 && dx >= 0 || vy <= 0 && dy >= 0 || vx >= 0 && dx <= 0 || vy >= 0 && dy <= 0) {\n                    return;\n                  }\n                  particle.position.x = Math.floor(_randomInRange({\n                    min: 0,\n                    max: container.canvas.size.width\n                  }));\n                  particle.position.y = Math.floor(_randomInRange({\n                    min: 0,\n                    max: container.canvas.size.height\n                  }));\n                  var _getDistances10 = _getDistances(particle.position, particle.moveCenter),\n                    newDx = _getDistances10.dx,\n                    newDy = _getDistances10.dy;\n                  particle.direction = Math.atan2(-newDy, -newDx);\n                  particle.velocity.angle = particle.direction;\n                  break;\n                }\n              default:\n                {\n                  if (_isPointInside(particle.position, container.canvas.size, _Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                  }\n                  switch (particle.outType) {\n                    case \"outside\":\n                      {\n                        particle.position.x = Math.floor(_randomInRange({\n                          min: -particle.moveCenter.radius,\n                          max: particle.moveCenter.radius\n                        })) + particle.moveCenter.x;\n                        particle.position.y = Math.floor(_randomInRange({\n                          min: -particle.moveCenter.radius,\n                          max: particle.moveCenter.radius\n                        })) + particle.moveCenter.y;\n                        var _getDistances11 = _getDistances(particle.position, particle.moveCenter),\n                          _dx = _getDistances11.dx,\n                          _dy = _getDistances11.dy;\n                        if (particle.moveCenter.radius) {\n                          particle.direction = Math.atan2(_dy, _dx);\n                          particle.velocity.angle = particle.direction;\n                        }\n                        break;\n                      }\n                    case \"normal\":\n                      {\n                        var wrap = particle.options.move.warp,\n                          canvasSize = container.canvas.size,\n                          newPos = {\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                            left: -particle.getRadius() - particle.offset.x,\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                            top: -particle.getRadius() - particle.offset.y\n                          },\n                          sizeValue = particle.getRadius(),\n                          nextBounds = _calculateBounds(particle.position, sizeValue);\n                        if (direction === \"right\" && nextBounds.left > canvasSize.width + particle.offset.x) {\n                          particle.position.x = newPos.left;\n                          particle.initialPosition.x = particle.position.x;\n                          if (!wrap) {\n                            particle.position.y = _getRandom() * canvasSize.height;\n                            particle.initialPosition.y = particle.position.y;\n                          }\n                        } else if (direction === \"left\" && nextBounds.right < -particle.offset.x) {\n                          particle.position.x = newPos.right;\n                          particle.initialPosition.x = particle.position.x;\n                          if (!wrap) {\n                            particle.position.y = _getRandom() * canvasSize.height;\n                            particle.initialPosition.y = particle.position.y;\n                          }\n                        }\n                        if (direction === \"bottom\" && nextBounds.top > canvasSize.height + particle.offset.y) {\n                          if (!wrap) {\n                            particle.position.x = _getRandom() * canvasSize.width;\n                            particle.initialPosition.x = particle.position.x;\n                          }\n                          particle.position.y = newPos.top;\n                          particle.initialPosition.y = particle.position.y;\n                        } else if (direction === \"top\" && nextBounds.bottom < -particle.offset.y) {\n                          if (!wrap) {\n                            particle.position.x = _getRandom() * canvasSize.width;\n                            particle.initialPosition.x = particle.position.x;\n                          }\n                          particle.position.y = newPos.bottom;\n                          particle.initialPosition.y = particle.position.y;\n                        }\n                        break;\n                      }\n                  }\n                  break;\n                }\n            }\n          }\n        }]);\n        return OutOutMode;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/outModes/dist/esm/OutOfCanvasUpdater.js\n      var OutOfCanvasUpdater = /*#__PURE__*/function () {\n        function OutOfCanvasUpdater(container) {\n          _classCallCheck(this, OutOfCanvasUpdater);\n          this.container = container;\n          this.updaters = [new BounceOutMode(container), new DestroyOutMode(container), new OutOutMode(container), new NoneOutMode(container)];\n        }\n        _createClass(OutOfCanvasUpdater, [{\n          key: \"init\",\n          value: function init() {}\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            return !particle.destroyed && !particle.spawning;\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle, delta) {\n            var _a, _b, _c, _d;\n            var outModes = particle.options.move.outModes;\n            this.updateOutMode(particle, delta, (_a = outModes.bottom) !== null && _a !== void 0 ? _a : outModes[\"default\"], \"bottom\");\n            this.updateOutMode(particle, delta, (_b = outModes.left) !== null && _b !== void 0 ? _b : outModes[\"default\"], \"left\");\n            this.updateOutMode(particle, delta, (_c = outModes.right) !== null && _c !== void 0 ? _c : outModes[\"default\"], \"right\");\n            this.updateOutMode(particle, delta, (_d = outModes.top) !== null && _d !== void 0 ? _d : outModes[\"default\"], \"top\");\n          }\n        }, {\n          key: \"updateOutMode\",\n          value: function updateOutMode(particle, delta, outMode, direction) {\n            var _iterator88 = _createForOfIteratorHelper(this.updaters),\n              _step88;\n            try {\n              for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {\n                var updater = _step88.value;\n                updater.update(particle, direction, delta, outMode);\n              }\n            } catch (err) {\n              _iterator88.e(err);\n            } finally {\n              _iterator88.f();\n            }\n          }\n        }]);\n        return OutOfCanvasUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/outModes/dist/esm/index.js\n      function loadOutModesUpdater(_x85) {\n        return _loadOutModesUpdater.apply(this, arguments);\n      }\n      function _loadOutModesUpdater() {\n        _loadOutModesUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee83(engine) {\n          return _regeneratorRuntime().wrap(function _callee83$(_context83) {\n            while (1) switch (_context83.prev = _context83.next) {\n              case 0:\n                _context83.next = 2;\n                return engine.addParticleUpdater(\"outModes\", function (container) {\n                  return new OutOfCanvasUpdater(container);\n                });\n              case 2:\n              case \"end\":\n                return _context83.stop();\n            }\n          }, _callee83);\n        }));\n        return _loadOutModesUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../move/parallax/dist/esm/ParallaxMover.js\n      var ParallaxMover = /*#__PURE__*/function () {\n        function ParallaxMover() {\n          _classCallCheck(this, ParallaxMover);\n        }\n        _createClass(ParallaxMover, [{\n          key: \"init\",\n          value: function init() {}\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            return !_isSsr() && !particle.destroyed && particle.container.actualOptions.interactivity.events.onHover.parallax.enable;\n          }\n        }, {\n          key: \"move\",\n          value: function move(particle) {\n            var container = particle.container,\n              options = container.actualOptions;\n            if (_isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n              return;\n            }\n            var parallaxForce = options.interactivity.events.onHover.parallax.force,\n              mousePos = container.interactivity.mouse.position;\n            if (!mousePos) {\n              return;\n            }\n            var canvasCenter = {\n                x: container.canvas.size.width / 2,\n                y: container.canvas.size.height / 2\n              },\n              parallaxSmooth = options.interactivity.events.onHover.parallax.smooth,\n              factor = particle.getRadius() / parallaxForce,\n              centerDistance = {\n                x: (mousePos.x - canvasCenter.x) * factor,\n                y: (mousePos.y - canvasCenter.y) * factor\n              };\n            particle.offset.x += (centerDistance.x - particle.offset.x) / parallaxSmooth;\n            particle.offset.y += (centerDistance.y - particle.offset.y) / parallaxSmooth;\n          }\n        }]);\n        return ParallaxMover;\n      }();\n      ; // CONCATENATED MODULE: ../../move/parallax/dist/esm/index.js\n      function loadParallaxMover(_x86) {\n        return _loadParallaxMover.apply(this, arguments);\n      }\n      function _loadParallaxMover() {\n        _loadParallaxMover = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee84(engine) {\n          return _regeneratorRuntime().wrap(function _callee84$(_context84) {\n            while (1) switch (_context84.prev = _context84.next) {\n              case 0:\n                engine.addMover(\"parallax\", function () {\n                  return new ParallaxMover();\n                });\n              case 1:\n              case \"end\":\n                return _context84.stop();\n            }\n          }, _callee84);\n        }));\n        return _loadParallaxMover.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/particles/attract/dist/esm/Attractor.js\n      var Attractor_Attractor = /*#__PURE__*/function (_ParticlesInteractorB) {\n        _inherits(Attractor_Attractor, _ParticlesInteractorB);\n        var _super32 = _createSuper(Attractor_Attractor);\n        function Attractor_Attractor(container) {\n          _classCallCheck(this, Attractor_Attractor);\n          return _super32.call(this, container);\n        }\n        _createClass(Attractor_Attractor, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {}\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee53(p1) {\n              var _a, container, distance, pos1, query, _iterator89, _step89, p2, pos2, _getDistances12, dx, dy, rotate, ax, ay, p1Factor, p2Factor;\n              return _regeneratorRuntime().wrap(function _callee53$(_context53) {\n                while (1) switch (_context53.prev = _context53.next) {\n                  case 0:\n                    container = this.container, distance = (_a = p1.retina.attractDistance) !== null && _a !== void 0 ? _a : container.retina.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\n                    _iterator89 = _createForOfIteratorHelper(query);\n                    _context53.prev = 2;\n                    _iterator89.s();\n                  case 4:\n                    if ((_step89 = _iterator89.n()).done) {\n                      _context53.next = 15;\n                      break;\n                    }\n                    p2 = _step89.value;\n                    if (!(p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning)) {\n                      _context53.next = 8;\n                      break;\n                    }\n                    return _context53.abrupt(\"continue\", 13);\n                  case 8:\n                    pos2 = p2.getPosition(), _getDistances12 = _getDistances(pos1, pos2), dx = _getDistances12.dx, dy = _getDistances12.dy, rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * 1000), ay = dy / (rotate.y * 1000), p1Factor = p2.size.value / p1.size.value, p2Factor = 1 / p1Factor;\n                    p1.velocity.x -= ax * p1Factor;\n                    p1.velocity.y -= ay * p1Factor;\n                    p2.velocity.x += ax * p2Factor;\n                    p2.velocity.y += ay * p2Factor;\n                  case 13:\n                    _context53.next = 4;\n                    break;\n                  case 15:\n                    _context53.next = 20;\n                    break;\n                  case 17:\n                    _context53.prev = 17;\n                    _context53.t0 = _context53[\"catch\"](2);\n                    _iterator89.e(_context53.t0);\n                  case 20:\n                    _context53.prev = 20;\n                    _iterator89.f();\n                    return _context53.finish(20);\n                  case 23:\n                  case \"end\":\n                    return _context53.stop();\n                }\n              }, _callee53, this, [[2, 17, 20, 23]]);\n            }));\n            function interact(_x87) {\n              return _interact12.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            return particle.options.move.attract.enable;\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }]);\n        return Attractor_Attractor;\n      }(_ParticlesInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/particles/attract/dist/esm/index.js\n      function loadParticlesAttractInteraction(_x88) {\n        return _loadParticlesAttractInteraction.apply(this, arguments);\n      }\n      function _loadParticlesAttractInteraction() {\n        _loadParticlesAttractInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee85(engine) {\n          return _regeneratorRuntime().wrap(function _callee85$(_context85) {\n            while (1) switch (_context85.prev = _context85.next) {\n              case 0:\n                _context85.next = 2;\n                return engine.addInteractor(\"particlesAttract\", function (container) {\n                  return new Attractor_Attractor(container);\n                });\n              case 2:\n              case \"end\":\n                return _context85.stop();\n            }\n          }, _callee85);\n        }));\n        return _loadParticlesAttractInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/particles/collisions/dist/esm/Absorb.js\n\n      function updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\n        var factor = _clamp(p1.options.collisions.absorb.speed * delta.factor / 10, 0, r2);\n        p1.size.value += factor / 2;\n        p2.size.value -= factor;\n        if (r2 <= pixelRatio) {\n          p2.size.value = 0;\n          p2.destroy();\n        }\n      }\n      function absorb(p1, p2, delta, pixelRatio) {\n        var r1 = p1.getRadius(),\n          r2 = p2.getRadius();\n        if (r1 === undefined && r2 !== undefined) {\n          p1.destroy();\n        } else if (r1 !== undefined && r2 === undefined) {\n          p2.destroy();\n        } else if (r1 !== undefined && r2 !== undefined) {\n          if (r1 >= r2) {\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\n          } else {\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\n          }\n        }\n      }\n      ; // CONCATENATED MODULE: ../../interactions/particles/collisions/dist/esm/Bounce.js\n\n      function bounce(p1, p2) {\n        _circleBounce(_circleBounceDataFromParticle(p1), _circleBounceDataFromParticle(p2));\n      }\n      ; // CONCATENATED MODULE: ../../interactions/particles/collisions/dist/esm/Destroy.js\n\n      function destroy(p1, p2) {\n        if (!p1.unbreakable && !p2.unbreakable) {\n          bounce(p1, p2);\n        }\n        if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n          p1.destroy();\n        } else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n          p2.destroy();\n        } else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n          var deleteP = p1.getRadius() >= p2.getRadius() ? p1 : p2;\n          deleteP.destroy();\n        }\n      }\n      ; // CONCATENATED MODULE: ../../interactions/particles/collisions/dist/esm/ResolveCollision.js\n\n      function resolveCollision(p1, p2, delta, pixelRatio) {\n        switch (p1.options.collisions.mode) {\n          case \"absorb\":\n            {\n              absorb(p1, p2, delta, pixelRatio);\n              break;\n            }\n          case \"bounce\":\n            {\n              bounce(p1, p2);\n              break;\n            }\n          case \"destroy\":\n            {\n              destroy(p1, p2);\n              break;\n            }\n        }\n      }\n      ; // CONCATENATED MODULE: ../../interactions/particles/collisions/dist/esm/Collider.js\n      var Collider = /*#__PURE__*/function (_ParticlesInteractorB2) {\n        _inherits(Collider, _ParticlesInteractorB2);\n        var _super33 = _createSuper(Collider);\n        function Collider(container) {\n          _classCallCheck(this, Collider);\n          return _super33.call(this, container);\n        }\n        _createClass(Collider, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {}\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee54(p1, delta) {\n              var container, pos1, radius1, query, _iterator90, _step90, p2, pos2, radius2, dist, distP;\n              return _regeneratorRuntime().wrap(function _callee54$(_context54) {\n                while (1) switch (_context54.prev = _context54.next) {\n                  case 0:\n                    container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * 2);\n                    _iterator90 = _createForOfIteratorHelper(query);\n                    _context54.prev = 2;\n                    _iterator90.s();\n                  case 4:\n                    if ((_step90 = _iterator90.n()).done) {\n                      _context54.next = 17;\n                      break;\n                    }\n                    p2 = _step90.value;\n                    if (!(p1 === p2 || !p2.options.collisions.enable || p1.options.collisions.mode !== p2.options.collisions.mode || p2.destroyed || p2.spawning)) {\n                      _context54.next = 8;\n                      break;\n                    }\n                    return _context54.abrupt(\"continue\", 15);\n                  case 8:\n                    pos2 = p2.getPosition(), radius2 = p2.getRadius();\n                    if (!(Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2)) {\n                      _context54.next = 11;\n                      break;\n                    }\n                    return _context54.abrupt(\"continue\", 15);\n                  case 11:\n                    dist = _getDistance(pos1, pos2), distP = radius1 + radius2;\n                    if (!(dist > distP)) {\n                      _context54.next = 14;\n                      break;\n                    }\n                    return _context54.abrupt(\"continue\", 15);\n                  case 14:\n                    resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n                  case 15:\n                    _context54.next = 4;\n                    break;\n                  case 17:\n                    _context54.next = 22;\n                    break;\n                  case 19:\n                    _context54.prev = 19;\n                    _context54.t0 = _context54[\"catch\"](2);\n                    _iterator90.e(_context54.t0);\n                  case 22:\n                    _context54.prev = 22;\n                    _iterator90.f();\n                    return _context54.finish(22);\n                  case 25:\n                  case \"end\":\n                    return _context54.stop();\n                }\n              }, _callee54, this, [[2, 19, 22, 25]]);\n            }));\n            function interact(_x89, _x90) {\n              return _interact13.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            return particle.options.collisions.enable;\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }]);\n        return Collider;\n      }(_ParticlesInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/particles/collisions/dist/esm/index.js\n      function loadParticlesCollisionsInteraction(_x91) {\n        return _loadParticlesCollisionsInteraction.apply(this, arguments);\n      }\n      function _loadParticlesCollisionsInteraction() {\n        _loadParticlesCollisionsInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee86(engine) {\n          return _regeneratorRuntime().wrap(function _callee86$(_context86) {\n            while (1) switch (_context86.prev = _context86.next) {\n              case 0:\n                _context86.next = 2;\n                return engine.addInteractor(\"particlesCollisions\", function (container) {\n                  return new Collider(container);\n                });\n              case 2:\n              case \"end\":\n                return _context86.stop();\n            }\n          }, _callee86);\n        }));\n        return _loadParticlesCollisionsInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/particles/links/dist/esm/CircleWarp.js\n      var CircleWarp = /*#__PURE__*/function (_Circle2) {\n        _inherits(CircleWarp, _Circle2);\n        var _super34 = _createSuper(CircleWarp);\n        function CircleWarp(x, y, radius, canvasSize) {\n          var _this64;\n          _classCallCheck(this, CircleWarp);\n          _this64 = _super34.call(this, x, y, radius);\n          _this64.canvasSize = canvasSize;\n          _this64.canvasSize = Object.assign({}, canvasSize);\n          return _this64;\n        }\n        _createClass(CircleWarp, [{\n          key: \"contains\",\n          value: function contains(point) {\n            if (_get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, point)) {\n              return true;\n            }\n            var posNE = {\n              x: point.x - this.canvasSize.width,\n              y: point.y\n            };\n            if (_get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, posNE)) {\n              return true;\n            }\n            var posSE = {\n              x: point.x - this.canvasSize.width,\n              y: point.y - this.canvasSize.height\n            };\n            if (_get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, posSE)) {\n              return true;\n            }\n            var posSW = {\n              x: point.x,\n              y: point.y - this.canvasSize.height\n            };\n            return _get(_getPrototypeOf(CircleWarp.prototype), \"contains\", this).call(this, posSW);\n          }\n        }, {\n          key: \"intersects\",\n          value: function intersects(range) {\n            if (_get(_getPrototypeOf(CircleWarp.prototype), \"intersects\", this).call(this, range)) {\n              return true;\n            }\n            var rect = range,\n              circle = range,\n              newPos = {\n                x: range.position.x - this.canvasSize.width,\n                y: range.position.y - this.canvasSize.height\n              };\n            if (circle.radius !== undefined) {\n              var biggerCircle = new _Circle(newPos.x, newPos.y, circle.radius * 2);\n              return _get(_getPrototypeOf(CircleWarp.prototype), \"intersects\", this).call(this, biggerCircle);\n            } else if (rect.size !== undefined) {\n              var rectSW = new _Rectangle(newPos.x, newPos.y, rect.size.width * 2, rect.size.height * 2);\n              return _get(_getPrototypeOf(CircleWarp.prototype), \"intersects\", this).call(this, rectSW);\n            }\n            return false;\n          }\n        }]);\n        return CircleWarp;\n      }(_Circle);\n      ; // CONCATENATED MODULE: ../../interactions/particles/links/dist/esm/Options/Classes/LinksShadow.js\n      var LinksShadow = /*#__PURE__*/function () {\n        function LinksShadow() {\n          _classCallCheck(this, LinksShadow);\n          this.blur = 5;\n          this.color = new _OptionsColor();\n          this.color.value = \"#000\";\n          this.enable = false;\n        }\n        _createClass(LinksShadow, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.blur !== undefined) {\n              this.blur = data.blur;\n            }\n            this.color = _OptionsColor.create(this.color, data.color);\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n          }\n        }]);\n        return LinksShadow;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/particles/links/dist/esm/Options/Classes/LinksTriangle.js\n      var LinksTriangle = /*#__PURE__*/function () {\n        function LinksTriangle() {\n          _classCallCheck(this, LinksTriangle);\n          this.enable = false;\n          this.frequency = 1;\n        }\n        _createClass(LinksTriangle, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.color !== undefined) {\n              this.color = _OptionsColor.create(this.color, data.color);\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.frequency !== undefined) {\n              this.frequency = data.frequency;\n            }\n            if (data.opacity !== undefined) {\n              this.opacity = data.opacity;\n            }\n          }\n        }]);\n        return LinksTriangle;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/particles/links/dist/esm/Options/Classes/Links.js\n      var Links = /*#__PURE__*/function () {\n        function Links() {\n          _classCallCheck(this, Links);\n          this.blink = false;\n          this.color = new _OptionsColor();\n          this.color.value = \"#fff\";\n          this.consent = false;\n          this.distance = 100;\n          this.enable = false;\n          this.frequency = 1;\n          this.opacity = 1;\n          this.shadow = new LinksShadow();\n          this.triangles = new LinksTriangle();\n          this.width = 1;\n          this.warp = false;\n        }\n        _createClass(Links, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.id !== undefined) {\n              this.id = data.id;\n            }\n            if (data.blink !== undefined) {\n              this.blink = data.blink;\n            }\n            this.color = _OptionsColor.create(this.color, data.color);\n            if (data.consent !== undefined) {\n              this.consent = data.consent;\n            }\n            if (data.distance !== undefined) {\n              this.distance = data.distance;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.frequency !== undefined) {\n              this.frequency = data.frequency;\n            }\n            if (data.opacity !== undefined) {\n              this.opacity = data.opacity;\n            }\n            this.shadow.load(data.shadow);\n            this.triangles.load(data.triangles);\n            if (data.width !== undefined) {\n              this.width = data.width;\n            }\n            if (data.warp !== undefined) {\n              this.warp = data.warp;\n            }\n          }\n        }]);\n        return Links;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/particles/links/dist/esm/Linker.js\n\n      function getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n        var distance = _getDistance(pos1, pos2);\n        if (!warp || distance <= optDistance) {\n          return distance;\n        }\n        var pos2NE = {\n          x: pos2.x - canvasSize.width,\n          y: pos2.y\n        };\n        distance = _getDistance(pos1, pos2NE);\n        if (distance <= optDistance) {\n          return distance;\n        }\n        var pos2SE = {\n          x: pos2.x - canvasSize.width,\n          y: pos2.y - canvasSize.height\n        };\n        distance = _getDistance(pos1, pos2SE);\n        if (distance <= optDistance) {\n          return distance;\n        }\n        var pos2SW = {\n          x: pos2.x,\n          y: pos2.y - canvasSize.height\n        };\n        distance = _getDistance(pos1, pos2SW);\n        return distance;\n      }\n      var Linker = /*#__PURE__*/function (_ParticlesInteractorB3) {\n        _inherits(Linker, _ParticlesInteractorB3);\n        var _super35 = _createSuper(Linker);\n        function Linker(container) {\n          var _this65;\n          _classCallCheck(this, Linker);\n          _this65 = _super35.call(this, container);\n          _this65.linkContainer = container;\n          return _this65;\n        }\n        _createClass(Linker, [{\n          key: \"clear\",\n          value: function clear() {}\n        }, {\n          key: \"init\",\n          value: function init() {\n            this.linkContainer.particles.linksColor = undefined;\n            this.linkContainer.particles.linksColors = new Map();\n          }\n        }, {\n          key: \"interact\",\n          value: function () {\n            var _interact14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee55(p1) {\n              var _a, pos1, container, canvasSize, linkOpt1, optOpacity, optDistance, warp, range, query, _iterator91, _step91, p2, linkOpt2, pos2, distance, opacityLine;\n              return _regeneratorRuntime().wrap(function _callee55$(_context55) {\n                while (1) switch (_context55.prev = _context55.next) {\n                  case 0:\n                    if (p1.options.links) {\n                      _context55.next = 2;\n                      break;\n                    }\n                    return _context55.abrupt(\"return\");\n                  case 2:\n                    p1.links = [];\n                    pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n                    if (!(pos1.x < 0 || pos1.y < 0 || pos1.x > canvasSize.width || pos1.y > canvasSize.height)) {\n                      _context55.next = 6;\n                      break;\n                    }\n                    return _context55.abrupt(\"return\");\n                  case 6:\n                    linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0, warp = linkOpt1.warp, range = warp ? new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize) : new _Circle(pos1.x, pos1.y, optDistance), query = container.particles.quadTree.query(range);\n                    _iterator91 = _createForOfIteratorHelper(query);\n                    _context55.prev = 8;\n                    _iterator91.s();\n                  case 10:\n                    if ((_step91 = _iterator91.n()).done) {\n                      _context55.next = 26;\n                      break;\n                    }\n                    p2 = _step91.value;\n                    linkOpt2 = p2.options.links;\n                    if (!(p1 === p2 || !(linkOpt2 === null || linkOpt2 === void 0 ? void 0 : linkOpt2.enable) || linkOpt1.id !== linkOpt2.id || p2.spawning || p2.destroyed || !p2.links || p1.links.map(function (t) {\n                      return t.destination;\n                    }).indexOf(p2) !== -1 || p2.links.map(function (t) {\n                      return t.destination;\n                    }).indexOf(p1) !== -1)) {\n                      _context55.next = 15;\n                      break;\n                    }\n                    return _context55.abrupt(\"continue\", 24);\n                  case 15:\n                    pos2 = p2.getPosition();\n                    if (!(pos2.x < 0 || pos2.y < 0 || pos2.x > canvasSize.width || pos2.y > canvasSize.height)) {\n                      _context55.next = 18;\n                      break;\n                    }\n                    return _context55.abrupt(\"continue\", 24);\n                  case 18:\n                    distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n                    if (!(distance > optDistance)) {\n                      _context55.next = 21;\n                      break;\n                    }\n                    return _context55.abrupt(\"return\");\n                  case 21:\n                    opacityLine = (1 - distance / optDistance) * optOpacity;\n                    this.setColor(p1);\n                    p1.links.push({\n                      destination: p2,\n                      opacity: opacityLine\n                    });\n                  case 24:\n                    _context55.next = 10;\n                    break;\n                  case 26:\n                    _context55.next = 31;\n                    break;\n                  case 28:\n                    _context55.prev = 28;\n                    _context55.t0 = _context55[\"catch\"](8);\n                    _iterator91.e(_context55.t0);\n                  case 31:\n                    _context55.prev = 31;\n                    _iterator91.f();\n                    return _context55.finish(31);\n                  case 34:\n                  case \"end\":\n                    return _context55.stop();\n                }\n              }, _callee55, this, [[8, 28, 31, 34]]);\n            }));\n            function interact(_x92) {\n              return _interact14.apply(this, arguments);\n            }\n            return interact;\n          }()\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            return !!((_a = particle.options.links) === null || _a === void 0 ? void 0 : _a.enable);\n          }\n        }, {\n          key: \"loadParticlesOptions\",\n          value: function loadParticlesOptions(options) {\n            var _a, _b;\n            if (!options.links) {\n              options.links = new Links();\n            }\n            for (var _len20 = arguments.length, sources = new Array(_len20 > 1 ? _len20 - 1 : 0), _key20 = 1; _key20 < _len20; _key20++) {\n              sources[_key20 - 1] = arguments[_key20];\n            }\n            for (var _i19 = 0, _sources16 = sources; _i19 < _sources16.length; _i19++) {\n              var source = _sources16[_i19];\n              options.links.load((_b = (_a = source === null || source === void 0 ? void 0 : source.links) !== null && _a !== void 0 ? _a : source === null || source === void 0 ? void 0 : source.lineLinked) !== null && _b !== void 0 ? _b : source === null || source === void 0 ? void 0 : source.line_linked);\n            }\n          }\n        }, {\n          key: \"reset\",\n          value: function reset() {}\n        }, {\n          key: \"setColor\",\n          value: function setColor(p1) {\n            if (!p1.options.links) {\n              return;\n            }\n            var container = this.linkContainer,\n              linksOptions = p1.options.links;\n            var linkColor = linksOptions.id === undefined ? container.particles.linksColor : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n              return;\n            }\n            var optColor = linksOptions.color;\n            linkColor = _getLinkRandomColor(optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n              container.particles.linksColor = linkColor;\n            } else {\n              container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n          }\n        }]);\n        return Linker;\n      }(_ParticlesInteractorBase);\n      ; // CONCATENATED MODULE: ../../interactions/particles/links/dist/esm/interaction.js\n      function loadInteraction(_x93) {\n        return _loadInteraction.apply(this, arguments);\n      }\n      function _loadInteraction() {\n        _loadInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee87(engine) {\n          return _regeneratorRuntime().wrap(function _callee87$(_context87) {\n            while (1) switch (_context87.prev = _context87.next) {\n              case 0:\n                _context87.next = 2;\n                return engine.addInteractor(\"particlesLinks\", function (container) {\n                  return new Linker(container);\n                });\n              case 2:\n              case \"end\":\n                return _context87.stop();\n            }\n          }, _callee87);\n        }));\n        return _loadInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/particles/links/dist/esm/Utils.js\n\n      function _drawLinkLine(context, width, begin, end, maxDistance, canvasSize, warp, backgroundMask, composite, colorLine, opacity, shadow) {\n        var drawn = false;\n        if (_getDistance(begin, end) <= maxDistance) {\n          _drawLine(context, begin, end);\n          drawn = true;\n        } else if (warp) {\n          var pi1;\n          var pi2;\n          var endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y\n          };\n          var d1 = _getDistances(begin, endNE);\n          if (d1.distance <= maxDistance) {\n            var yi = begin.y - d1.dy / d1.dx * begin.x;\n            pi1 = {\n              x: 0,\n              y: yi\n            };\n            pi2 = {\n              x: canvasSize.width,\n              y: yi\n            };\n          } else {\n            var endSW = {\n              x: end.x,\n              y: end.y - canvasSize.height\n            };\n            var d2 = _getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n              var _yi = begin.y - d2.dy / d2.dx * begin.x;\n              var xi = -_yi / (d2.dy / d2.dx);\n              pi1 = {\n                x: xi,\n                y: 0\n              };\n              pi2 = {\n                x: xi,\n                y: canvasSize.height\n              };\n            } else {\n              var endSE = {\n                x: end.x - canvasSize.width,\n                y: end.y - canvasSize.height\n              };\n              var d3 = _getDistances(begin, endSE);\n              if (d3.distance <= maxDistance) {\n                var _yi2 = begin.y - d3.dy / d3.dx * begin.x;\n                var _xi = -_yi2 / (d3.dy / d3.dx);\n                pi1 = {\n                  x: _xi,\n                  y: _yi2\n                };\n                pi2 = {\n                  x: pi1.x + canvasSize.width,\n                  y: pi1.y + canvasSize.height\n                };\n              }\n            }\n          }\n          if (pi1 && pi2) {\n            _drawLine(context, begin, pi1);\n            _drawLine(context, end, pi2);\n            drawn = true;\n          }\n        }\n        if (!drawn) {\n          return;\n        }\n        context.lineWidth = width;\n        if (backgroundMask) {\n          context.globalCompositeOperation = composite;\n        }\n        context.strokeStyle = _getStyleFromRgb(colorLine, opacity);\n        if (shadow.enable) {\n          var shadowColor = _rangeColorToRgb(shadow.color);\n          if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = _getStyleFromRgb(shadowColor);\n          }\n        }\n        context.stroke();\n      }\n      function _drawLinkTriangle(context, pos1, pos2, pos3, backgroundMask, composite, colorTriangle, opacityTriangle) {\n        _drawTriangle(context, pos1, pos2, pos3);\n        if (backgroundMask) {\n          context.globalCompositeOperation = composite;\n        }\n        context.fillStyle = _getStyleFromRgb(colorTriangle, opacityTriangle);\n        context.fill();\n      }\n      ; // CONCATENATED MODULE: ../../interactions/particles/links/dist/esm/LinkInstance.js\n\n      function getLinkKey(ids) {\n        ids.sort(function (a, b) {\n          return a - b;\n        });\n        return ids.join(\"_\");\n      }\n      function setLinkFrequency(particles, dictionary) {\n        var key = getLinkKey(particles.map(function (t) {\n          return t.id;\n        }));\n        var res = dictionary.get(key);\n        if (res === undefined) {\n          res = _getRandom();\n          dictionary.set(key, res);\n        }\n        return res;\n      }\n      var LinkInstance = /*#__PURE__*/function () {\n        function LinkInstance(container) {\n          _classCallCheck(this, LinkInstance);\n          this.container = container;\n          this._freqs = {\n            links: new Map(),\n            triangles: new Map()\n          };\n        }\n        _createClass(LinkInstance, [{\n          key: \"drawParticle\",\n          value: function drawParticle(context, particle) {\n            var _this66 = this;\n            var _a;\n            var pOptions = particle.options;\n            if (!particle.links || particle.links.length <= 0) {\n              return;\n            }\n            var p1Links = particle.links.filter(function (l) {\n              return pOptions.links && _this66.getLinkFrequency(particle, l.destination) <= pOptions.links.frequency;\n            });\n            var _iterator92 = _createForOfIteratorHelper(p1Links),\n              _step92;\n            try {\n              for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {\n                var link = _step92.value;\n                this.drawTriangles(pOptions, particle, link, p1Links);\n                if (link.opacity > 0 && ((_a = particle.retina.linksWidth) !== null && _a !== void 0 ? _a : 0) > 0) {\n                  this.drawLinkLine(particle, link);\n                }\n              }\n            } catch (err) {\n              _iterator92.e(err);\n            } finally {\n              _iterator92.f();\n            }\n          }\n        }, {\n          key: \"init\",\n          value: function () {\n            var _init5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee56() {\n              return _regeneratorRuntime().wrap(function _callee56$(_context56) {\n                while (1) switch (_context56.prev = _context56.next) {\n                  case 0:\n                    this._freqs.links = new Map();\n                    this._freqs.triangles = new Map();\n                  case 2:\n                  case \"end\":\n                    return _context56.stop();\n                }\n              }, _callee56, this);\n            }));\n            function init() {\n              return _init5.apply(this, arguments);\n            }\n            return init;\n          }()\n        }, {\n          key: \"particleCreated\",\n          value: function particleCreated(particle) {\n            particle.links = [];\n            if (!particle.options.links) {\n              return;\n            }\n            var ratio = this.container.retina.pixelRatio;\n            particle.retina.linksDistance = particle.options.links.distance * ratio;\n            particle.retina.linksWidth = particle.options.links.width * ratio;\n          }\n        }, {\n          key: \"particleDestroyed\",\n          value: function particleDestroyed(particle) {\n            particle.links = [];\n          }\n        }, {\n          key: \"drawLinkLine\",\n          value: function drawLinkLine(p1, link) {\n            var container = this.container,\n              options = container.actualOptions,\n              p2 = link.destination,\n              pos1 = p1.getPosition(),\n              pos2 = p2.getPosition();\n            var opacity = link.opacity;\n            container.canvas.draw(function (ctx) {\n              var _a, _b, _c;\n              if (!p1.options.links) {\n                return;\n              }\n              var colorLine;\n              var twinkle = (_a = p1.options.twinkle) === null || _a === void 0 ? void 0 : _a.lines;\n              if (twinkle === null || twinkle === void 0 ? void 0 : twinkle.enable) {\n                var twinkleFreq = twinkle.frequency,\n                  twinkleRgb = _rangeColorToRgb(twinkle.color),\n                  twinkling = _getRandom() < twinkleFreq;\n                if (twinkling && twinkleRgb) {\n                  colorLine = twinkleRgb;\n                  opacity = _getRangeValue(twinkle.opacity);\n                }\n              }\n              if (!colorLine) {\n                var linksOptions = p1.options.links,\n                  linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n                colorLine = _getLinkColor(p1, p2, linkColor);\n              }\n              if (!colorLine) {\n                return;\n              }\n              var width = (_b = p1.retina.linksWidth) !== null && _b !== void 0 ? _b : 0,\n                maxDistance = (_c = p1.retina.linksDistance) !== null && _c !== void 0 ? _c : 0;\n              _drawLinkLine(ctx, width, pos1, pos2, maxDistance, container.canvas.size, p1.options.links.warp, options.backgroundMask.enable, options.backgroundMask.composite, colorLine, opacity, p1.options.links.shadow);\n            });\n          }\n        }, {\n          key: \"drawLinkTriangle\",\n          value: function drawLinkTriangle(p1, link1, link2) {\n            var _a;\n            if (!p1.options.links) {\n              return;\n            }\n            var container = this.container,\n              options = container.actualOptions,\n              p2 = link1.destination,\n              p3 = link2.destination,\n              triangleOptions = p1.options.links.triangles,\n              opacityTriangle = (_a = triangleOptions.opacity) !== null && _a !== void 0 ? _a : (link1.opacity + link2.opacity) / 2;\n            if (opacityTriangle <= 0) {\n              return;\n            }\n            container.canvas.draw(function (ctx) {\n              var _a;\n              var pos1 = p1.getPosition(),\n                pos2 = p2.getPosition(),\n                pos3 = p3.getPosition(),\n                linksDistance = (_a = p1.retina.linksDistance) !== null && _a !== void 0 ? _a : 0;\n              if (_getDistance(pos1, pos2) > linksDistance || _getDistance(pos3, pos2) > linksDistance || _getDistance(pos3, pos1) > linksDistance) {\n                return;\n              }\n              var colorTriangle = _rangeColorToRgb(triangleOptions.color);\n              if (!colorTriangle) {\n                var linksOptions = p1.options.links,\n                  linkColor = (linksOptions === null || linksOptions === void 0 ? void 0 : linksOptions.id) !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n                colorTriangle = _getLinkColor(p1, p2, linkColor);\n              }\n              if (!colorTriangle) {\n                return;\n              }\n              _drawLinkTriangle(ctx, pos1, pos2, pos3, options.backgroundMask.enable, options.backgroundMask.composite, colorTriangle, opacityTriangle);\n            });\n          }\n        }, {\n          key: \"drawTriangles\",\n          value: function drawTriangles(options, p1, link, p1Links) {\n            var _this67 = this;\n            var _a, _b, _c;\n            var p2 = link.destination;\n            if (!(((_a = options.links) === null || _a === void 0 ? void 0 : _a.triangles.enable) && ((_b = p2.options.links) === null || _b === void 0 ? void 0 : _b.triangles.enable))) {\n              return;\n            }\n            var vertices = (_c = p2.links) === null || _c === void 0 ? void 0 : _c.filter(function (t) {\n              var linkFreq = _this67.getLinkFrequency(p2, t.destination);\n              return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex(function (l) {\n                return l.destination === t.destination;\n              }) >= 0;\n            });\n            if (!(vertices === null || vertices === void 0 ? void 0 : vertices.length)) {\n              return;\n            }\n            var _iterator93 = _createForOfIteratorHelper(vertices),\n              _step93;\n            try {\n              for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {\n                var vertex = _step93.value;\n                var p3 = vertex.destination,\n                  triangleFreq = this.getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                  continue;\n                }\n                this.drawLinkTriangle(p1, link, vertex);\n              }\n            } catch (err) {\n              _iterator93.e(err);\n            } finally {\n              _iterator93.f();\n            }\n          }\n        }, {\n          key: \"getLinkFrequency\",\n          value: function getLinkFrequency(p1, p2) {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n          }\n        }, {\n          key: \"getTriangleFrequency\",\n          value: function getTriangleFrequency(p1, p2, p3) {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n          }\n        }]);\n        return LinkInstance;\n      }();\n      ; // CONCATENATED MODULE: ../../interactions/particles/links/dist/esm/plugin.js\n      var LinksPlugin = /*#__PURE__*/function () {\n        function LinksPlugin() {\n          _classCallCheck(this, LinksPlugin);\n          this.id = \"links\";\n        }\n        _createClass(LinksPlugin, [{\n          key: \"getPlugin\",\n          value: function getPlugin(container) {\n            return new LinkInstance(container);\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions() {}\n        }, {\n          key: \"needsPlugin\",\n          value: function needsPlugin() {\n            return true;\n          }\n        }]);\n        return LinksPlugin;\n      }();\n      function loadPlugin(_x94) {\n        return _loadPlugin.apply(this, arguments);\n      }\n      function _loadPlugin() {\n        _loadPlugin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee88(engine) {\n          var plugin;\n          return _regeneratorRuntime().wrap(function _callee88$(_context88) {\n            while (1) switch (_context88.prev = _context88.next) {\n              case 0:\n                plugin = new LinksPlugin();\n                _context88.next = 3;\n                return engine.addPlugin(plugin);\n              case 3:\n              case \"end\":\n                return _context88.stop();\n            }\n          }, _callee88);\n        }));\n        return _loadPlugin.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../interactions/particles/links/dist/esm/index.js\n      function loadParticlesLinksInteraction(_x95) {\n        return _loadParticlesLinksInteraction.apply(this, arguments);\n      }\n      function _loadParticlesLinksInteraction() {\n        _loadParticlesLinksInteraction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee89(engine) {\n          return _regeneratorRuntime().wrap(function _callee89$(_context89) {\n            while (1) switch (_context89.prev = _context89.next) {\n              case 0:\n                _context89.next = 2;\n                return loadInteraction(engine);\n              case 2:\n                _context89.next = 4;\n                return loadPlugin(engine);\n              case 4:\n              case \"end\":\n                return _context89.stop();\n            }\n          }, _callee89);\n        }));\n        return _loadParticlesLinksInteraction.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../shapes/polygon/dist/esm/PolygonDrawerBase.js\n      var PolygonDrawerBase = /*#__PURE__*/function () {\n        function PolygonDrawerBase() {\n          _classCallCheck(this, PolygonDrawerBase);\n        }\n        _createClass(PolygonDrawerBase, [{\n          key: \"draw\",\n          value: function draw(context, particle, radius) {\n            var start = this.getCenter(particle, radius),\n              side = this.getSidesData(particle, radius),\n              sideCount = side.count.numerator * side.count.denominator,\n              decimalSides = side.count.numerator / side.count.denominator,\n              interiorAngleDegrees = 180 * (decimalSides - 2) / decimalSides,\n              interiorAngle = Math.PI - Math.PI * interiorAngleDegrees / 180;\n            if (!context) {\n              return;\n            }\n            context.beginPath();\n            context.translate(start.x, start.y);\n            context.moveTo(0, 0);\n            for (var i = 0; i < sideCount; i++) {\n              context.lineTo(side.length, 0);\n              context.translate(side.length, 0);\n              context.rotate(interiorAngle);\n            }\n          }\n        }, {\n          key: \"getSidesCount\",\n          value: function getSidesCount(particle) {\n            var _a, _b;\n            var polygon = particle.shapeData,\n              sides = Math.round(_getRangeValue((_b = (_a = polygon === null || polygon === void 0 ? void 0 : polygon.sides) !== null && _a !== void 0 ? _a : polygon === null || polygon === void 0 ? void 0 : polygon.nb_sides) !== null && _b !== void 0 ? _b : 5));\n            return sides;\n          }\n        }]);\n        return PolygonDrawerBase;\n      }();\n      ; // CONCATENATED MODULE: ../../shapes/polygon/dist/esm/PolygonDrawer.js\n      var PolygonDrawer = /*#__PURE__*/function (_PolygonDrawerBase) {\n        _inherits(PolygonDrawer, _PolygonDrawerBase);\n        var _super36 = _createSuper(PolygonDrawer);\n        function PolygonDrawer() {\n          _classCallCheck(this, PolygonDrawer);\n          return _super36.apply(this, arguments);\n        }\n        _createClass(PolygonDrawer, [{\n          key: \"getCenter\",\n          value: function getCenter(particle, radius) {\n            return {\n              x: -radius / (particle.sides / 3.5),\n              y: -radius / (2.66 / 3.5)\n            };\n          }\n        }, {\n          key: \"getSidesData\",\n          value: function getSidesData(particle, radius) {\n            var sides = particle.sides;\n            return {\n              count: {\n                denominator: 1,\n                numerator: sides\n              },\n              length: radius * 2.66 / (sides / 3)\n            };\n          }\n        }]);\n        return PolygonDrawer;\n      }(PolygonDrawerBase);\n      ; // CONCATENATED MODULE: ../../shapes/polygon/dist/esm/TriangleDrawer.js\n      var TriangleDrawer = /*#__PURE__*/function (_PolygonDrawerBase2) {\n        _inherits(TriangleDrawer, _PolygonDrawerBase2);\n        var _super37 = _createSuper(TriangleDrawer);\n        function TriangleDrawer() {\n          _classCallCheck(this, TriangleDrawer);\n          return _super37.apply(this, arguments);\n        }\n        _createClass(TriangleDrawer, [{\n          key: \"getCenter\",\n          value: function getCenter(particle, radius) {\n            return {\n              x: -radius,\n              y: radius / 1.66\n            };\n          }\n        }, {\n          key: \"getSidesCount\",\n          value: function getSidesCount() {\n            return 3;\n          }\n        }, {\n          key: \"getSidesData\",\n          value: function getSidesData(particle, radius) {\n            return {\n              count: {\n                denominator: 2,\n                numerator: 3\n              },\n              length: radius * 2\n            };\n          }\n        }]);\n        return TriangleDrawer;\n      }(PolygonDrawerBase);\n      ; // CONCATENATED MODULE: ../../shapes/polygon/dist/esm/index.js\n      function loadGenericPolygonShape(_x96) {\n        return _loadGenericPolygonShape.apply(this, arguments);\n      }\n      function _loadGenericPolygonShape() {\n        _loadGenericPolygonShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee90(engine) {\n          return _regeneratorRuntime().wrap(function _callee90$(_context90) {\n            while (1) switch (_context90.prev = _context90.next) {\n              case 0:\n                _context90.next = 2;\n                return engine.addShape(\"polygon\", new PolygonDrawer());\n              case 2:\n              case \"end\":\n                return _context90.stop();\n            }\n          }, _callee90);\n        }));\n        return _loadGenericPolygonShape.apply(this, arguments);\n      }\n      function loadTriangleShape(_x97) {\n        return _loadTriangleShape.apply(this, arguments);\n      }\n      function _loadTriangleShape() {\n        _loadTriangleShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee91(engine) {\n          return _regeneratorRuntime().wrap(function _callee91$(_context91) {\n            while (1) switch (_context91.prev = _context91.next) {\n              case 0:\n                _context91.next = 2;\n                return engine.addShape(\"triangle\", new TriangleDrawer());\n              case 2:\n              case \"end\":\n                return _context91.stop();\n            }\n          }, _callee91);\n        }));\n        return _loadTriangleShape.apply(this, arguments);\n      }\n      function loadPolygonShape(_x98) {\n        return _loadPolygonShape.apply(this, arguments);\n      }\n      function _loadPolygonShape() {\n        _loadPolygonShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee92(engine) {\n          return _regeneratorRuntime().wrap(function _callee92$(_context92) {\n            while (1) switch (_context92.prev = _context92.next) {\n              case 0:\n                _context92.next = 2;\n                return loadGenericPolygonShape(engine);\n              case 2:\n                _context92.next = 4;\n                return loadTriangleShape(engine);\n              case 4:\n              case \"end\":\n                return _context92.stop();\n            }\n          }, _callee92);\n        }));\n        return _loadPolygonShape.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/size/dist/esm/SizeUpdater.js\n\n      function SizeUpdater_checkDestroy(particle, value, minValue, maxValue) {\n        switch (particle.options.size.animation.destroy) {\n          case \"max\":\n            if (value >= maxValue) {\n              particle.destroy();\n            }\n            break;\n          case \"min\":\n            if (value <= minValue) {\n              particle.destroy();\n            }\n            break;\n        }\n      }\n      function updateSize(particle, delta) {\n        var _a, _b, _c, _d, _e;\n        var sizeVelocity = ((_a = particle.size.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor,\n          minValue = particle.size.min,\n          maxValue = particle.size.max,\n          decay = (_b = particle.size.decay) !== null && _b !== void 0 ? _b : 1;\n        if (particle.destroyed || !particle.size.enable || ((_c = particle.size.maxLoops) !== null && _c !== void 0 ? _c : 0) > 0 && ((_d = particle.size.loops) !== null && _d !== void 0 ? _d : 0) > ((_e = particle.size.maxLoops) !== null && _e !== void 0 ? _e : 0)) {\n          return;\n        }\n        switch (particle.size.status) {\n          case \"increasing\":\n            if (particle.size.value >= maxValue) {\n              particle.size.status = \"decreasing\";\n              if (!particle.size.loops) {\n                particle.size.loops = 0;\n              }\n              particle.size.loops++;\n            } else {\n              particle.size.value += sizeVelocity;\n            }\n            break;\n          case \"decreasing\":\n            if (particle.size.value <= minValue) {\n              particle.size.status = \"increasing\";\n              if (!particle.size.loops) {\n                particle.size.loops = 0;\n              }\n              particle.size.loops++;\n            } else {\n              particle.size.value -= sizeVelocity;\n            }\n        }\n        if (particle.size.velocity && decay !== 1) {\n          particle.size.velocity *= decay;\n        }\n        SizeUpdater_checkDestroy(particle, particle.size.value, minValue, maxValue);\n        if (!particle.destroyed) {\n          particle.size.value = _clamp(particle.size.value, minValue, maxValue);\n        }\n      }\n      var SizeUpdater = /*#__PURE__*/function () {\n        function SizeUpdater() {\n          _classCallCheck(this, SizeUpdater);\n        }\n        _createClass(SizeUpdater, [{\n          key: \"init\",\n          value: function init(particle) {\n            var _a;\n            var container = particle.container,\n              sizeOptions = particle.options.size,\n              sizeAnimation = sizeOptions.animation;\n            if (sizeAnimation.enable) {\n              particle.size.velocity = ((_a = particle.retina.sizeAnimationSpeed) !== null && _a !== void 0 ? _a : container.retina.sizeAnimationSpeed) / 100 * container.retina.reduceFactor;\n              if (!sizeAnimation.sync) {\n                particle.size.velocity *= _getRandom();\n              }\n            }\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a, _b, _c, _d;\n            return !particle.destroyed && !particle.spawning && particle.size.enable && (((_a = particle.size.maxLoops) !== null && _a !== void 0 ? _a : 0) <= 0 || ((_b = particle.size.maxLoops) !== null && _b !== void 0 ? _b : 0) > 0 && ((_c = particle.size.loops) !== null && _c !== void 0 ? _c : 0) < ((_d = particle.size.maxLoops) !== null && _d !== void 0 ? _d : 0));\n          }\n        }, {\n          key: \"reset\",\n          value: function reset(particle) {\n            particle.size.loops = 0;\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle, delta) {\n            if (!this.isEnabled(particle)) {\n              return;\n            }\n            updateSize(particle, delta);\n          }\n        }]);\n        return SizeUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/size/dist/esm/index.js\n      function loadSizeUpdater(_x99) {\n        return _loadSizeUpdater.apply(this, arguments);\n      }\n      function _loadSizeUpdater() {\n        _loadSizeUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee93(engine) {\n          return _regeneratorRuntime().wrap(function _callee93$(_context93) {\n            while (1) switch (_context93.prev = _context93.next) {\n              case 0:\n                _context93.next = 2;\n                return engine.addParticleUpdater(\"size\", function () {\n                  return new SizeUpdater();\n                });\n              case 2:\n              case \"end\":\n                return _context93.stop();\n            }\n          }, _callee93);\n        }));\n        return _loadSizeUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../shapes/square/dist/esm/SquareDrawer.js\n      var fixFactor = Math.sqrt(2);\n      var SquareDrawer = /*#__PURE__*/function () {\n        function SquareDrawer() {\n          _classCallCheck(this, SquareDrawer);\n        }\n        _createClass(SquareDrawer, [{\n          key: \"draw\",\n          value: function draw(context, particle, radius) {\n            context.rect(-radius / fixFactor, -radius / fixFactor, radius * 2 / fixFactor, radius * 2 / fixFactor);\n          }\n        }, {\n          key: \"getSidesCount\",\n          value: function getSidesCount() {\n            return 4;\n          }\n        }]);\n        return SquareDrawer;\n      }();\n      ; // CONCATENATED MODULE: ../../shapes/square/dist/esm/index.js\n      function loadSquareShape(_x100) {\n        return _loadSquareShape.apply(this, arguments);\n      }\n      function _loadSquareShape() {\n        _loadSquareShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee94(engine) {\n          var drawer;\n          return _regeneratorRuntime().wrap(function _callee94$(_context94) {\n            while (1) switch (_context94.prev = _context94.next) {\n              case 0:\n                drawer = new SquareDrawer();\n                _context94.next = 3;\n                return engine.addShape([\"edge\", \"square\"], drawer);\n              case 3:\n              case \"end\":\n                return _context94.stop();\n            }\n          }, _callee94);\n        }));\n        return _loadSquareShape.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../shapes/star/dist/esm/StarDrawer.js\n      var StarDrawer = /*#__PURE__*/function () {\n        function StarDrawer() {\n          _classCallCheck(this, StarDrawer);\n        }\n        _createClass(StarDrawer, [{\n          key: \"draw\",\n          value: function draw(context, particle, radius) {\n            var _a;\n            var sides = particle.sides,\n              inset = (_a = particle.starInset) !== null && _a !== void 0 ? _a : 2;\n            context.moveTo(0, 0 - radius);\n            for (var i = 0; i < sides; i++) {\n              context.rotate(Math.PI / sides);\n              context.lineTo(0, 0 - radius * inset);\n              context.rotate(Math.PI / sides);\n              context.lineTo(0, 0 - radius);\n            }\n          }\n        }, {\n          key: \"getSidesCount\",\n          value: function getSidesCount(particle) {\n            var _a, _b;\n            var star = particle.shapeData;\n            return Math.round(_getRangeValue((_b = (_a = star === null || star === void 0 ? void 0 : star.sides) !== null && _a !== void 0 ? _a : star === null || star === void 0 ? void 0 : star.nb_sides) !== null && _b !== void 0 ? _b : 5));\n          }\n        }, {\n          key: \"particleInit\",\n          value: function particleInit(container, particle) {\n            var _a;\n            var star = particle.shapeData,\n              inset = _getRangeValue((_a = star === null || star === void 0 ? void 0 : star.inset) !== null && _a !== void 0 ? _a : 2);\n            particle.starInset = inset;\n          }\n        }]);\n        return StarDrawer;\n      }();\n      ; // CONCATENATED MODULE: ../../shapes/star/dist/esm/index.js\n      function loadStarShape(_x101) {\n        return _loadStarShape.apply(this, arguments);\n      }\n      function _loadStarShape() {\n        _loadStarShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee95(engine) {\n          return _regeneratorRuntime().wrap(function _callee95$(_context95) {\n            while (1) switch (_context95.prev = _context95.next) {\n              case 0:\n                _context95.next = 2;\n                return engine.addShape(\"star\", new StarDrawer());\n              case 2:\n              case \"end\":\n                return _context95.stop();\n            }\n          }, _callee95);\n        }));\n        return _loadStarShape.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/strokeColor/dist/esm/StrokeColorUpdater.js\n\n      function StrokeColorUpdater_updateColorValue(delta, value, valueAnimation, max, decrease) {\n        var _a, _b;\n        var colorValue = value;\n        if (!colorValue || !colorValue.enable || colorValue.loops !== undefined && colorValue.maxLoops !== undefined && colorValue.maxLoops > 0 && colorValue.loops >= colorValue.maxLoops) {\n          return;\n        }\n        var offset = _randomInRange(valueAnimation.offset),\n          velocity = ((_a = value.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor + offset * 3.6,\n          decay = (_b = value.decay) !== null && _b !== void 0 ? _b : 1;\n        if (!decrease || colorValue.status === \"increasing\") {\n          colorValue.value += velocity;\n          if (colorValue.value > max) {\n            if (!colorValue.loops) {\n              colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            if (decrease) {\n              colorValue.status = \"decreasing\";\n              colorValue.value -= colorValue.value % max;\n            }\n          }\n        } else {\n          colorValue.value -= velocity;\n          if (colorValue.value < 0) {\n            if (!colorValue.loops) {\n              colorValue.loops = 0;\n            }\n            colorValue.loops++;\n            colorValue.status = \"increasing\";\n            colorValue.value += colorValue.value;\n          }\n        }\n        if (colorValue.velocity && decay !== 1) {\n          colorValue.velocity *= decay;\n        }\n        if (colorValue.value > max) {\n          colorValue.value %= max;\n        }\n      }\n      function updateStrokeColor(particle, delta) {\n        if (!particle.strokeColor || !particle.strokeAnimation) {\n          return;\n        }\n        var h = particle.strokeColor.h;\n        if (h) {\n          StrokeColorUpdater_updateColorValue(delta, h, particle.strokeAnimation.h, 360, false);\n        }\n        var s = particle.strokeColor.s;\n        if (s) {\n          StrokeColorUpdater_updateColorValue(delta, s, particle.strokeAnimation.s, 100, true);\n        }\n        var l = particle.strokeColor.l;\n        if (l) {\n          StrokeColorUpdater_updateColorValue(delta, l, particle.strokeAnimation.l, 100, true);\n        }\n      }\n      var StrokeColorUpdater = /*#__PURE__*/function () {\n        function StrokeColorUpdater(container) {\n          _classCallCheck(this, StrokeColorUpdater);\n          this.container = container;\n        }\n        _createClass(StrokeColorUpdater, [{\n          key: \"init\",\n          value: function init(particle) {\n            var _a, _b, _c;\n            var container = this.container;\n            var stroke = _itemFromSingleOrMultiple(particle.options.stroke, particle.id, particle.options.reduceDuplicates);\n            particle.strokeWidth = _getRangeValue(stroke.width) * container.retina.pixelRatio;\n            particle.strokeOpacity = _getRangeValue((_a = stroke.opacity) !== null && _a !== void 0 ? _a : 1);\n            particle.strokeAnimation = (_b = stroke.color) === null || _b === void 0 ? void 0 : _b.animation;\n            var strokeHslColor = (_c = _rangeColorToHsl(stroke.color)) !== null && _c !== void 0 ? _c : particle.getFillColor();\n            if (strokeHslColor) {\n              particle.strokeColor = _getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n            }\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a, _b, _c;\n            var color = particle.strokeAnimation;\n            return !particle.destroyed && !particle.spawning && !!color && (((_a = particle.strokeColor) === null || _a === void 0 ? void 0 : _a.h.value) !== undefined && particle.strokeColor.h.enable || ((_b = particle.strokeColor) === null || _b === void 0 ? void 0 : _b.s.value) !== undefined && particle.strokeColor.s.enable || ((_c = particle.strokeColor) === null || _c === void 0 ? void 0 : _c.l.value) !== undefined && particle.strokeColor.l.enable);\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle, delta) {\n            if (!this.isEnabled(particle)) {\n              return;\n            }\n            updateStrokeColor(particle, delta);\n          }\n        }]);\n        return StrokeColorUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/strokeColor/dist/esm/index.js\n      function loadStrokeColorUpdater(_x102) {\n        return _loadStrokeColorUpdater.apply(this, arguments);\n      }\n      function _loadStrokeColorUpdater() {\n        _loadStrokeColorUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee96(engine) {\n          return _regeneratorRuntime().wrap(function _callee96$(_context96) {\n            while (1) switch (_context96.prev = _context96.next) {\n              case 0:\n                _context96.next = 2;\n                return engine.addParticleUpdater(\"strokeColor\", function (container) {\n                  return new StrokeColorUpdater(container);\n                });\n              case 2:\n              case \"end\":\n                return _context96.stop();\n            }\n          }, _callee96);\n        }));\n        return _loadStrokeColorUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../shapes/text/dist/esm/TextDrawer.js\n\n      var validTypes = [\"text\", \"character\", \"char\"];\n      var TextDrawer = /*#__PURE__*/function () {\n        function TextDrawer() {\n          _classCallCheck(this, TextDrawer);\n        }\n        _createClass(TextDrawer, [{\n          key: \"draw\",\n          value: function draw(context, particle, radius, opacity) {\n            var _a, _b, _c;\n            var character = particle.shapeData;\n            if (character === undefined) {\n              return;\n            }\n            var textData = character.value;\n            if (textData === undefined) {\n              return;\n            }\n            var textParticle = particle;\n            if (textParticle.text === undefined) {\n              textParticle.text = _itemFromSingleOrMultiple(textData, particle.randomIndexData);\n            }\n            var text = textParticle.text,\n              style = (_a = character.style) !== null && _a !== void 0 ? _a : \"\",\n              weight = (_b = character.weight) !== null && _b !== void 0 ? _b : \"400\",\n              size = Math.round(radius) * 2,\n              font = (_c = character.font) !== null && _c !== void 0 ? _c : \"Verdana\",\n              fill = particle.fill,\n              offsetX = text.length * radius / 2;\n            context.font = \"\".concat(style, \" \").concat(weight, \" \").concat(size, \"px \\\"\").concat(font, \"\\\"\");\n            var pos = {\n              x: -offsetX,\n              y: radius / 2\n            };\n            context.globalAlpha = opacity;\n            if (fill) {\n              context.fillText(text, pos.x, pos.y);\n            } else {\n              context.strokeText(text, pos.x, pos.y);\n            }\n            context.globalAlpha = 1;\n          }\n        }, {\n          key: \"getSidesCount\",\n          value: function getSidesCount() {\n            return 12;\n          }\n        }, {\n          key: \"init\",\n          value: function () {\n            var _init6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee57(container) {\n              var options, shapeOptions, promises;\n              return _regeneratorRuntime().wrap(function _callee57$(_context57) {\n                while (1) switch (_context57.prev = _context57.next) {\n                  case 0:\n                    options = container.actualOptions;\n                    if (!validTypes.find(function (t) {\n                      return _isInArray(t, options.particles.shape.type);\n                    })) {\n                      _context57.next = 6;\n                      break;\n                    }\n                    shapeOptions = validTypes.map(function (t) {\n                      return options.particles.shape.options[t];\n                    }).find(function (t) {\n                      return !!t;\n                    }), promises = [];\n                    _executeOnSingleOrMultiple(shapeOptions, function (shape) {\n                      promises.push(_loadFont(shape.font, shape.weight));\n                    });\n                    _context57.next = 6;\n                    return Promise.all(promises);\n                  case 6:\n                  case \"end\":\n                    return _context57.stop();\n                }\n              }, _callee57);\n            }));\n            function init(_x103) {\n              return _init6.apply(this, arguments);\n            }\n            return init;\n          }()\n        }]);\n        return TextDrawer;\n      }();\n      ; // CONCATENATED MODULE: ../../shapes/text/dist/esm/index.js\n      function loadTextShape(_x104) {\n        return _loadTextShape.apply(this, arguments);\n      }\n      function _loadTextShape() {\n        _loadTextShape = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee97(engine) {\n          return _regeneratorRuntime().wrap(function _callee97$(_context97) {\n            while (1) switch (_context97.prev = _context97.next) {\n              case 0:\n                _context97.next = 2;\n                return engine.addShape(validTypes, new TextDrawer());\n              case 2:\n              case \"end\":\n                return _context97.stop();\n            }\n          }, _callee97);\n        }));\n        return _loadTextShape.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../slim/dist/esm/index.js\n      function _loadSlim(_x105) {\n        return _loadSlim2.apply(this, arguments);\n      }\n      function _loadSlim2() {\n        _loadSlim2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee98(engine) {\n          return _regeneratorRuntime().wrap(function _callee98$(_context98) {\n            while (1) switch (_context98.prev = _context98.next) {\n              case 0:\n                _context98.next = 2;\n                return loadBaseMover(engine);\n              case 2:\n                _context98.next = 4;\n                return loadParallaxMover(engine);\n              case 4:\n                _context98.next = 6;\n                return loadExternalAttractInteraction(engine);\n              case 6:\n                _context98.next = 8;\n                return loadExternalBounceInteraction(engine);\n              case 8:\n                _context98.next = 10;\n                return loadExternalBubbleInteraction(engine);\n              case 10:\n                _context98.next = 12;\n                return loadExternalConnectInteraction(engine);\n              case 12:\n                _context98.next = 14;\n                return loadExternalGrabInteraction(engine);\n              case 14:\n                _context98.next = 16;\n                return loadExternalPauseInteraction(engine);\n              case 16:\n                _context98.next = 18;\n                return loadExternalPushInteraction(engine);\n              case 18:\n                _context98.next = 20;\n                return loadExternalRemoveInteraction(engine);\n              case 20:\n                _context98.next = 22;\n                return loadExternalRepulseInteraction(engine);\n              case 22:\n                _context98.next = 24;\n                return loadExternalSlowInteraction(engine);\n              case 24:\n                _context98.next = 26;\n                return loadParticlesAttractInteraction(engine);\n              case 26:\n                _context98.next = 28;\n                return loadParticlesCollisionsInteraction(engine);\n              case 28:\n                _context98.next = 30;\n                return loadParticlesLinksInteraction(engine);\n              case 30:\n                _context98.next = 32;\n                return loadCircleShape(engine);\n              case 32:\n                _context98.next = 34;\n                return loadImageShape(engine);\n              case 34:\n                _context98.next = 36;\n                return loadLineShape(engine);\n              case 36:\n                _context98.next = 38;\n                return loadPolygonShape(engine);\n              case 38:\n                _context98.next = 40;\n                return loadSquareShape(engine);\n              case 40:\n                _context98.next = 42;\n                return loadStarShape(engine);\n              case 42:\n                _context98.next = 44;\n                return loadTextShape(engine);\n              case 44:\n                _context98.next = 46;\n                return loadLifeUpdater(engine);\n              case 46:\n                _context98.next = 48;\n                return loadOpacityUpdater(engine);\n              case 48:\n                _context98.next = 50;\n                return loadSizeUpdater(engine);\n              case 50:\n                _context98.next = 52;\n                return loadAngleUpdater(engine);\n              case 52:\n                _context98.next = 54;\n                return loadColorUpdater(engine);\n              case 54:\n                _context98.next = 56;\n                return loadStrokeColorUpdater(engine);\n              case 56:\n                _context98.next = 58;\n                return loadOutModesUpdater(engine);\n              case 58:\n                _context98.next = 60;\n                return initPjs(engine);\n              case 60:\n              case \"end\":\n                return _context98.stop();\n            }\n          }, _callee98);\n        }));\n        return _loadSlim2.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/tilt/dist/esm/Options/Classes/TiltAnimation.js\n      var TiltAnimation = /*#__PURE__*/function () {\n        function TiltAnimation() {\n          _classCallCheck(this, TiltAnimation);\n          this.enable = false;\n          this.speed = 0;\n          this.decay = 0;\n          this.sync = false;\n        }\n        _createClass(TiltAnimation, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.speed !== undefined) {\n              this.speed = _setRangeValue(data.speed);\n            }\n            if (data.decay !== undefined) {\n              this.decay = _setRangeValue(data.decay);\n            }\n            if (data.sync !== undefined) {\n              this.sync = data.sync;\n            }\n          }\n        }]);\n        return TiltAnimation;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/tilt/dist/esm/Options/Classes/Tilt.js\n      var Tilt = /*#__PURE__*/function (_ValueWithRandom12) {\n        _inherits(Tilt, _ValueWithRandom12);\n        var _super38 = _createSuper(Tilt);\n        function Tilt() {\n          var _this68;\n          _classCallCheck(this, Tilt);\n          _this68 = _super38.call(this);\n          _this68.animation = new TiltAnimation();\n          _this68.direction = \"clockwise\";\n          _this68.enable = false;\n          _this68.value = 0;\n          return _this68;\n        }\n        _createClass(Tilt, [{\n          key: \"load\",\n          value: function load(data) {\n            _get(_getPrototypeOf(Tilt.prototype), \"load\", this).call(this, data);\n            if (!data) {\n              return;\n            }\n            this.animation.load(data.animation);\n            if (data.direction !== undefined) {\n              this.direction = data.direction;\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n          }\n        }]);\n        return Tilt;\n      }(_ValueWithRandom);\n      ; // CONCATENATED MODULE: ../../updaters/tilt/dist/esm/TiltUpdater.js\n\n      function updateTilt(particle, delta) {\n        var _a, _b;\n        if (!particle.tilt || !particle.options.tilt) {\n          return;\n        }\n        var tilt = particle.options.tilt,\n          tiltAnimation = tilt.animation,\n          speed = ((_a = particle.tilt.velocity) !== null && _a !== void 0 ? _a : 0) * delta.factor,\n          max = 2 * Math.PI,\n          decay = (_b = particle.tilt.decay) !== null && _b !== void 0 ? _b : 1;\n        if (!tiltAnimation.enable) {\n          return;\n        }\n        switch (particle.tilt.status) {\n          case \"increasing\":\n            particle.tilt.value += speed;\n            if (particle.tilt.value > max) {\n              particle.tilt.value -= max;\n            }\n            break;\n          case \"decreasing\":\n          default:\n            particle.tilt.value -= speed;\n            if (particle.tilt.value < 0) {\n              particle.tilt.value += max;\n            }\n            break;\n        }\n        if (particle.tilt.velocity && decay !== 1) {\n          particle.tilt.velocity *= decay;\n        }\n      }\n      var TiltUpdater = /*#__PURE__*/function () {\n        function TiltUpdater(container) {\n          _classCallCheck(this, TiltUpdater);\n          this.container = container;\n        }\n        _createClass(TiltUpdater, [{\n          key: \"getTransformValues\",\n          value: function getTransformValues(particle) {\n            var _a;\n            var tilt = ((_a = particle.tilt) === null || _a === void 0 ? void 0 : _a.enable) && particle.tilt;\n            return {\n              b: tilt ? Math.cos(tilt.value) * tilt.cosDirection : undefined,\n              c: tilt ? Math.sin(tilt.value) * tilt.sinDirection : undefined\n            };\n          }\n        }, {\n          key: \"init\",\n          value: function init(particle) {\n            var _a;\n            var tiltOptions = particle.options.tilt;\n            if (!tiltOptions) {\n              return;\n            }\n            particle.tilt = {\n              enable: tiltOptions.enable,\n              value: _getRangeValue(tiltOptions.value) * Math.PI / 180,\n              sinDirection: _getRandom() >= 0.5 ? 1 : -1,\n              cosDirection: _getRandom() >= 0.5 ? 1 : -1\n            };\n            var tiltDirection = tiltOptions.direction;\n            if (tiltDirection === \"random\") {\n              var index = Math.floor(_getRandom() * 2);\n              tiltDirection = index > 0 ? \"counter-clockwise\" : \"clockwise\";\n            }\n            switch (tiltDirection) {\n              case \"counter-clockwise\":\n              case \"counterClockwise\":\n                particle.tilt.status = \"decreasing\";\n                break;\n              case \"clockwise\":\n                particle.tilt.status = \"increasing\";\n                break;\n            }\n            var tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\n            if (tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable) {\n              particle.tilt.decay = 1 - _getRangeValue(tiltAnimation.decay);\n              particle.tilt.velocity = _getRangeValue(tiltAnimation.speed) / 360 * this.container.retina.reduceFactor;\n              if (!tiltAnimation.sync) {\n                particle.tilt.velocity *= _getRandom();\n              }\n            }\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            var tiltAnimation = (_a = particle.options.tilt) === null || _a === void 0 ? void 0 : _a.animation;\n            return !particle.destroyed && !particle.spawning && !!(tiltAnimation === null || tiltAnimation === void 0 ? void 0 : tiltAnimation.enable);\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions(options) {\n            if (!options.tilt) {\n              options.tilt = new Tilt();\n            }\n            for (var _len21 = arguments.length, sources = new Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++) {\n              sources[_key21 - 1] = arguments[_key21];\n            }\n            for (var _i20 = 0, _sources17 = sources; _i20 < _sources17.length; _i20++) {\n              var source = _sources17[_i20];\n              options.tilt.load(source === null || source === void 0 ? void 0 : source.tilt);\n            }\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle, delta) {\n            if (!this.isEnabled(particle)) {\n              return;\n            }\n            updateTilt(particle, delta);\n          }\n        }]);\n        return TiltUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/tilt/dist/esm/index.js\n      function loadTiltUpdater(_x106) {\n        return _loadTiltUpdater.apply(this, arguments);\n      }\n      function _loadTiltUpdater() {\n        _loadTiltUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee99(engine) {\n          return _regeneratorRuntime().wrap(function _callee99$(_context99) {\n            while (1) switch (_context99.prev = _context99.next) {\n              case 0:\n                _context99.next = 2;\n                return engine.addParticleUpdater(\"tilt\", function (container) {\n                  return new TiltUpdater(container);\n                });\n              case 2:\n              case \"end\":\n                return _context99.stop();\n            }\n          }, _callee99);\n        }));\n        return _loadTiltUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/twinkle/dist/esm/Options/Classes/TwinkleValues.js\n      var TwinkleValues = /*#__PURE__*/function () {\n        function TwinkleValues() {\n          _classCallCheck(this, TwinkleValues);\n          this.enable = false;\n          this.frequency = 0.05;\n          this.opacity = 1;\n        }\n        _createClass(TwinkleValues, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.color !== undefined) {\n              this.color = _OptionsColor.create(this.color, data.color);\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.frequency !== undefined) {\n              this.frequency = data.frequency;\n            }\n            if (data.opacity !== undefined) {\n              this.opacity = _setRangeValue(data.opacity);\n            }\n          }\n        }]);\n        return TwinkleValues;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/twinkle/dist/esm/Options/Classes/Twinkle.js\n      var Twinkle = /*#__PURE__*/function () {\n        function Twinkle() {\n          _classCallCheck(this, Twinkle);\n          this.lines = new TwinkleValues();\n          this.particles = new TwinkleValues();\n        }\n        _createClass(Twinkle, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            this.lines.load(data.lines);\n            this.particles.load(data.particles);\n          }\n        }]);\n        return Twinkle;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/twinkle/dist/esm/TwinkleUpdater.js\n      var TwinkleUpdater = /*#__PURE__*/function () {\n        function TwinkleUpdater() {\n          _classCallCheck(this, TwinkleUpdater);\n        }\n        _createClass(TwinkleUpdater, [{\n          key: \"getColorStyles\",\n          value: function getColorStyles(particle, context, radius, opacity) {\n            var pOptions = particle.options,\n              twinkleOptions = pOptions.twinkle;\n            if (!twinkleOptions) {\n              return {};\n            }\n            var twinkle = twinkleOptions.particles,\n              twinkling = twinkle.enable && _getRandom() < twinkle.frequency,\n              zIndexOptions = particle.options.zIndex,\n              zOpacityFactor = Math.pow(1 - particle.zIndexFactor, zIndexOptions.opacityRate),\n              twinklingOpacity = twinkling ? _getRangeValue(twinkle.opacity) * zOpacityFactor : opacity,\n              twinkleRgb = _rangeColorToHsl(twinkle.color),\n              twinkleStyle = twinkleRgb ? _getStyleFromHsl(twinkleRgb, twinklingOpacity) : undefined,\n              res = {},\n              needsTwinkle = twinkling && twinkleStyle;\n            res.fill = needsTwinkle ? twinkleStyle : undefined;\n            res.stroke = needsTwinkle ? twinkleStyle : undefined;\n            return res;\n          }\n        }, {\n          key: \"init\",\n          value: function init() {}\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var pOptions = particle.options,\n              twinkleOptions = pOptions.twinkle;\n            if (!twinkleOptions) {\n              return false;\n            }\n            return twinkleOptions.particles.enable;\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions(options) {\n            if (!options.twinkle) {\n              options.twinkle = new Twinkle();\n            }\n            for (var _len22 = arguments.length, sources = new Array(_len22 > 1 ? _len22 - 1 : 0), _key22 = 1; _key22 < _len22; _key22++) {\n              sources[_key22 - 1] = arguments[_key22];\n            }\n            for (var _i21 = 0, _sources18 = sources; _i21 < _sources18.length; _i21++) {\n              var source = _sources18[_i21];\n              options.twinkle.load(source === null || source === void 0 ? void 0 : source.twinkle);\n            }\n          }\n        }, {\n          key: \"update\",\n          value: function update() {}\n        }]);\n        return TwinkleUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/twinkle/dist/esm/index.js\n      function loadTwinkleUpdater(_x107) {\n        return _loadTwinkleUpdater.apply(this, arguments);\n      }\n      function _loadTwinkleUpdater() {\n        _loadTwinkleUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee100(engine) {\n          return _regeneratorRuntime().wrap(function _callee100$(_context100) {\n            while (1) switch (_context100.prev = _context100.next) {\n              case 0:\n                _context100.next = 2;\n                return engine.addParticleUpdater(\"twinkle\", function () {\n                  return new TwinkleUpdater();\n                });\n              case 2:\n              case \"end\":\n                return _context100.stop();\n            }\n          }, _callee100);\n        }));\n        return _loadTwinkleUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ../../updaters/wobble/dist/esm/Options/Classes/WobbleSpeed.js\n      var WobbleSpeed = /*#__PURE__*/function () {\n        function WobbleSpeed() {\n          _classCallCheck(this, WobbleSpeed);\n          this.angle = 50;\n          this.move = 10;\n        }\n        _createClass(WobbleSpeed, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.angle !== undefined) {\n              this.angle = _setRangeValue(data.angle);\n            }\n            if (data.move !== undefined) {\n              this.move = _setRangeValue(data.move);\n            }\n          }\n        }]);\n        return WobbleSpeed;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/wobble/dist/esm/Options/Classes/Wobble.js\n      var Wobble = /*#__PURE__*/function () {\n        function Wobble() {\n          _classCallCheck(this, Wobble);\n          this.distance = 5;\n          this.enable = false;\n          this.speed = new WobbleSpeed();\n        }\n        _createClass(Wobble, [{\n          key: \"load\",\n          value: function load(data) {\n            if (!data) {\n              return;\n            }\n            if (data.distance !== undefined) {\n              this.distance = _setRangeValue(data.distance);\n            }\n            if (data.enable !== undefined) {\n              this.enable = data.enable;\n            }\n            if (data.speed !== undefined) {\n              if (typeof data.speed === \"number\") {\n                this.speed.load({\n                  angle: data.speed\n                });\n              } else {\n                var rangeSpeed = data.speed;\n                if (rangeSpeed.min !== undefined) {\n                  this.speed.load({\n                    angle: rangeSpeed\n                  });\n                } else {\n                  this.speed.load(data.speed);\n                }\n              }\n            }\n          }\n        }]);\n        return Wobble;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/wobble/dist/esm/WobbleUpdater.js\n\n      function updateWobble(particle, delta) {\n        var _a;\n        var wobble = particle.options.wobble;\n        if (!(wobble === null || wobble === void 0 ? void 0 : wobble.enable) || !particle.wobble) {\n          return;\n        }\n        var angleSpeed = particle.wobble.angleSpeed * delta.factor,\n          moveSpeed = particle.wobble.moveSpeed * delta.factor,\n          distance = moveSpeed * (((_a = particle.retina.wobbleDistance) !== null && _a !== void 0 ? _a : 0) * delta.factor) / (1000 / 60),\n          max = 2 * Math.PI;\n        particle.wobble.angle += angleSpeed;\n        if (particle.wobble.angle > max) {\n          particle.wobble.angle -= max;\n        }\n        particle.position.x += distance * Math.cos(particle.wobble.angle);\n        particle.position.y += distance * Math.abs(Math.sin(particle.wobble.angle));\n      }\n      var WobbleUpdater = /*#__PURE__*/function () {\n        function WobbleUpdater(container) {\n          _classCallCheck(this, WobbleUpdater);\n          this.container = container;\n        }\n        _createClass(WobbleUpdater, [{\n          key: \"init\",\n          value: function init(particle) {\n            var _a;\n            var wobbleOpt = particle.options.wobble;\n            if (wobbleOpt === null || wobbleOpt === void 0 ? void 0 : wobbleOpt.enable) {\n              particle.wobble = {\n                angle: _getRandom() * Math.PI * 2,\n                angleSpeed: _getRangeValue(wobbleOpt.speed.angle) / 360,\n                moveSpeed: _getRangeValue(wobbleOpt.speed.move) / 10\n              };\n            } else {\n              particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0\n              };\n            }\n            particle.retina.wobbleDistance = _getRangeValue((_a = wobbleOpt === null || wobbleOpt === void 0 ? void 0 : wobbleOpt.distance) !== null && _a !== void 0 ? _a : 0) * this.container.retina.pixelRatio;\n          }\n        }, {\n          key: \"isEnabled\",\n          value: function isEnabled(particle) {\n            var _a;\n            return !particle.destroyed && !particle.spawning && !!((_a = particle.options.wobble) === null || _a === void 0 ? void 0 : _a.enable);\n          }\n        }, {\n          key: \"loadOptions\",\n          value: function loadOptions(options) {\n            if (!options.wobble) {\n              options.wobble = new Wobble();\n            }\n            for (var _len23 = arguments.length, sources = new Array(_len23 > 1 ? _len23 - 1 : 0), _key23 = 1; _key23 < _len23; _key23++) {\n              sources[_key23 - 1] = arguments[_key23];\n            }\n            for (var _i22 = 0, _sources19 = sources; _i22 < _sources19.length; _i22++) {\n              var source = _sources19[_i22];\n              options.wobble.load(source === null || source === void 0 ? void 0 : source.wobble);\n            }\n          }\n        }, {\n          key: \"update\",\n          value: function update(particle, delta) {\n            if (!this.isEnabled(particle)) {\n              return;\n            }\n            updateWobble(particle, delta);\n          }\n        }]);\n        return WobbleUpdater;\n      }();\n      ; // CONCATENATED MODULE: ../../updaters/wobble/dist/esm/index.js\n      function loadWobbleUpdater(_x108) {\n        return _loadWobbleUpdater.apply(this, arguments);\n      }\n      function _loadWobbleUpdater() {\n        _loadWobbleUpdater = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee101(engine) {\n          return _regeneratorRuntime().wrap(function _callee101$(_context101) {\n            while (1) switch (_context101.prev = _context101.next) {\n              case 0:\n                _context101.next = 2;\n                return engine.addParticleUpdater(\"wobble\", function (container) {\n                  return new WobbleUpdater(container);\n                });\n              case 2:\n              case \"end\":\n                return _context101.stop();\n            }\n          }, _callee101);\n        }));\n        return _loadWobbleUpdater.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ./dist/browser/index.js\n      function _loadFull(_x109) {\n        return _loadFull2.apply(this, arguments);\n      }\n      function _loadFull2() {\n        _loadFull2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee102(engine) {\n          return _regeneratorRuntime().wrap(function _callee102$(_context102) {\n            while (1) switch (_context102.prev = _context102.next) {\n              case 0:\n                _context102.next = 2;\n                return _loadSlim(engine);\n              case 2:\n                _context102.next = 4;\n                return loadDestroyUpdater(engine);\n              case 4:\n                _context102.next = 6;\n                return loadRollUpdater(engine);\n              case 6:\n                _context102.next = 8;\n                return loadTiltUpdater(engine);\n              case 8:\n                _context102.next = 10;\n                return loadTwinkleUpdater(engine);\n              case 10:\n                _context102.next = 12;\n                return loadWobbleUpdater(engine);\n              case 12:\n                _context102.next = 14;\n                return loadExternalTrailInteraction(engine);\n              case 14:\n                _context102.next = 16;\n                return loadAbsorbersPlugin(engine);\n              case 16:\n                _context102.next = 18;\n                return loadEmittersPlugin(engine);\n              case 18:\n              case \"end\":\n                return _context102.stop();\n            }\n          }, _callee102);\n        }));\n        return _loadFull2.apply(this, arguments);\n      }\n      ; // CONCATENATED MODULE: ./dist/browser/bundle.js\n\n      _loadFull(_tsParticles);\n\n      /******/\n      return __nested_webpack_exports__;\n      /******/\n    }()\n  );\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/assets/tsparticles.bundle.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/assets/tsparticles.bundle.js");
/******/ 	
/******/ })()
;